LucidImporter = {};
(function() {
    var defaultFontSize = "11";
    var scale = .6;
    var dx = 0;
    var dy = 0;
    var arcSize = 6;
    var edgeStyle = "html=1;jettySize=18;";
    var vertexStyle = "html=1;whiteSpace=wrap;";
    var labelStyle = "text;html=1;resizable=0;labelBackgroundColor=#ffffff;align=center;verticalAlign=middle;";
    var c = "fillColor=#036897;strokeColor=#ffffff";
    var s = "shape=mxgraph.";
    var ss = "strokeColor=none;shape=mxgraph.";
    var cs = "mxCompositeShape";
    var hardRound = ["GSDFDProcessBlock", "GSDFDProcessBlock2", "RoundedRectangleContainerBlock", "UI2ButtonBlock", "UMLStateBlock"];
    var hardDefRound = ["UMLActivationBlock"];
    var hardStroke = ["VennPlainColor1", "VennPlainColor2", "VennPlainColor3", "VennPlainColor4", "VennPlainColor5", "VennPlainColor6", "VennPlainColor7", "VennPlainColor8", "VennGradientColor1", "VennGradientColor2", "VennGradientColor3", "VennGradientColor4", "VennGradientColor5", "VennGradientColor6", "VennGradientColor7", "VennGradientColor8", "UMLEndBlock", "DefaultTextBlockNew", "iOSButton"];
    var hardFill = ["AWSAndroidBlock3", "AWSiOSBlock3", "AWSJavaBlock3", "AWSJavaScript", "AWSNetBlock3", "AWSNodeJSBlock3", "AWSPHPBlock3", "AWSPythonBlock3", "AWSRubyBlock3", "AWSXamarin", "AWSCLIBlock3", "AWSEclipseToolkitBlock3", "AWSVisualStudioToolkitBlock3", "AWSWindowsPowershellToolkitBlock3", "DefaultTextBlock", "RectangleContainerBlock", "UMLStartBlock", "UMLEndBlock", "DefaultTextBlockNew", "UMLHForkJoinBlock", "iOSButton"];
    var hardOpacity = ["VennPlainColor1", "VennPlainColor2", "VennPlainColor3", "VennPlainColor4", "VennPlainColor5", "VennPlainColor6", "VennPlainColor7", "VennPlainColor8", "VennGradientColor1", "VennGradientColor2", "VennGradientColor3", "VennGradientColor4", "VennGradientColor5", "VennGradientColor6", "VennGradientColor7", "VennGradientColor8"];
    var rccw = ["AEUSBBlock", "AGSCutandpasteBlock", "iOSDeviceiPadLandscape", "iOSDeviceiPadProLandscape"];
    var rcw2 = ["fpDoor"];
    var edgeStyleMap = {
        "None": "none",
        "Arrow": "block;endFill=1",
        "Hollow Arrow": "block;endFill=0",
        "Open Arrow": "open;",
        "CFN ERD Zero Or More Arrow": "ERzeroToMany;startSize=10",
        "CFN ERD One Or More Arrow": "ERoneToMany;startSize=10",
        "CFN ERD Many Arrow": "ERmany;startSize=10",
        "CFN ERD Exactly One Arrow": "ERmandOne;startSize=10",
        "CFN ERD Zero Or One Arrow": "ERzeroToOne;startSize=10",
        "CFN ERD One Arrow": "ERone;startSize=16",
        "Generalization": "block;endFill=0;startSize=12",
        "Big Open Arrow": "open;startSize=10",
        "Asynch1": "openAsync;flipH=1;startSize=10",
        "Asynch2": "openAsync;startSize=10",
        "Aggregation": "diamond;endFill=0;startSize=16",
        "Composition": "diamond;endFill=1;startSize=16",
        "BlockEnd": "none;endFill=1;startSize=16"
    };
    var styleMap = {
        "DefaultTextBlockNew": "text;strokeColor=none;fillColor=none",
        "DefaultTextBlock": "text;strokeColor=none;fillColor=none",
        "DefaultSquareBlock": "",
        "DefaultNoteBlock": "shape=note;size=15",
        "DefaultNoteBlockV2": "shape=note;size=15",
        "HotspotBlock": "strokeColor=none;opacity=50",
        "ImageSearchBlock2": "shape=image",
        "ProcessBlock": "",
        "DecisionBlock": "rhombus",
        "TerminatorBlock": "rounded=1;arcSize=50",
        "PredefinedProcessBlock": "shape=process",
        "DocumentBlock": "shape=document",
        "MultiDocumentBlock": s + "flowchart.multi-document",
        "ManualInputBlock": "shape=manualInput;size=15",
        "PreparationBlock": "shape=hexagon;perimeter=hexagonPerimeter2",
        "DataBlock": "shape=parallelogram;perimeter=parallelogramPerimeter;anchorPointDirection=0",
        "DataBlockNew": "shape=parallelogram;perimeter=parallelogramPerimeter;anchorPointDirection=0",
        "DatabaseBlock": "shape=cylinder;size=0.1;anchorPointDirection=0;boundedLbl=1;",
        "DirectAccessStorageBlock": "shape=cylinder;direction=south;size=0.1;anchorPointDirection=0;boundedLbl=1;",
        "InternalStorageBlock": "shape=internalStorage;dx=10;dy=10",
        "PaperTapeBlock": "shape=tape;size=0.2",
        "ManualOperationBlockNew": "shape=trapezoid;perimeter=trapezoidPerimeter;anchorPointDirection=0;flipV=1",
        "DelayBlock": "shape=delay",
        "StoredDataBlock": "shape=dataStorage",
        "MergeBlock": "triangle;direction=south;anchorPointDirection=0",
        "ConnectorBlock": "ellipse",
        "OrBlock": s + "flowchart.summing_function",
        "SummingJunctionBlock": s + "flowchart.or",
        "DisplayBlock": "shape=display",
        "OffPageLinkBlock": "shape=offPageConnector",
        "BraceNoteBlock": cs,
        "NoteBlock": s + "flowchart.annotation_1",
        "AdvancedSwimLaneBlock": cs,
        "AdvancedSwimLaneBlockRotated": cs,
        "RectangleContainerBlock": "fillColor=none;container=1",
        "DiamondContainerBlock": "shape=rhombus;fillColor=none;container=1",
        "RoundedRectangleContainerBlock": "fillColor=none;container=1;rounded=1;absoluteArcSize=1;arcSize=24",
        "CircleContainerBlock": "shape=ellipse;fillColor=none;container=1",
        "PillContainerBlock": "arcSize=50;fillColor=none;container=1",
        "IsoscelesTriangleBlock": "triangle;direction=north;anchorPointDirection=0",
        "RightTriangleBlock": s + "basic.orthogonal_triangle",
        "PentagonBlock": s + "basic.pentagon",
        "HexagonBlock": "shape=hexagon;perimeter=hexagonPerimeter2",
        "OctagonBlock": s + "basic.octagon",
        "CrossBlock": "shape=cross;size=0.6",
        "CloudBlock": "ellipse;shape=cloud",
        "HeartBlock": s + "basic.heart",
        "RightArrowBlock": "shape=singleArrow;arrowWidth=0.5;arrowSize=0.3",
        "DoubleArrowBlock": "shape=doubleArrow;arrowWidth=0.5;arrowSize=0.3",
        "CalloutBlock": s + "basic.rectangular_callout",
        "ShapeCircleBlock": "ellipse",
        "ShapePolyStarBlock": s + "basic.star",
        "ShapeDiamondBlock": "rhombus",
        "UI2HotspotBlock": "opacity=50;strokeColor=none",
        "AndroidDevice": cs,
        "AndroidAlertDialog": cs,
        "AndroidDateDialog": cs,
        "AndroidTimeDialog": cs,
        "AndroidListItems": cs,
        "AndroidTabs": cs,
        "AndroidProgressBar": cs,
        "AndroidImageBlock": cs,
        "AndroidTextBlock": cs,
        "AndroidActionBar": cs,
        "AndroidButton": cs,
        "AndroidTextBox": cs,
        "AndroidRadioButton": cs,
        "AndroidCheckBox": cs,
        "AndroidToggle": cs,
        "AndroidSlider": cs,
        "AndroidIconCheck": s + "ios7.misc.check",
        "AndroidIconCancel": s + "atlassian.x",
        "AndroidIconCollapse": s + "ios7.misc.up",
        "AndroidIconExpand": s + "ios7.misc.down",
        "AndroidIconNext": s + "ios7.misc.right",
        "AndroidIconPrevious": s + "ios7.misc.left",
        "AndroidIconRefresh": +"ios7.icons.repeat",
        "AndroidIconInformation": s + "ios7.icons.info",
        "AndroidIconSearch": s + "ios7.icons.looking_glass",
        "AndroidIconSettings": s + "ios7.icons.volume;direction=south",
        "AndroidIconTrash": s + "ios7.icons.trashcan",
        "AndroidIconEmail": s + "mockup.misc.mail2",
        "AndroidIconNew": s + "ios7.misc.flagged",
        "iOSDeviceiPhoneSE": s + "ios7.misc.iphone",
        "iOSDeviceiPhone6s": s + "ios7.misc.iphone",
        "iOSDeviceiPhone6sPlus": s + "ios7.misc.iphone",
        "iOSDeviceiPadPortrait": s + "ios7.misc.ipad7inch",
        "iOSDeviceiPadLandscape": s + "ios7.misc.ipad7inch",
        "iOSDeviceiPadProPortrait": s + "ios7.misc.ipad7inch",
        "iOSDeviceiPadProLandscape": s + "ios7.misc.ipad10inch",
        "iOSButton": "fillColor=none;strokeColor=none;",
        "iOSSegmentedControl": cs,
        "iOSStepper": s + "ios7.misc.adjust",
        "iOSToggle": s + "ios7ui.onOffButton;buttonState=on;strokeColor2=#aaaaaa;fillColor2=#ffffff",
        "iOSSlider": cs,
        "iOSProgressBar": cs,
        "iOSPageControls": cs,
        "iOSStatusBar": cs,
        "iOSSearchBar": cs,
        "iOSNavBar": cs,
        "iOSTabs": cs,
        "iOSUniversalKeyboard": s + "ios.iKeybLett",
        "iOSDatePicker": cs,
        "iOSTimePicker": cs,
        "iOSCountdownPicker": cs,
        "iOSBasicCell": cs,
        "iOSSubtitleCell": cs,
        "iOSRightDetailCell": cs,
        "iOSLeftDetailCell": cs,
        "iOSTableGroupedSectionBreak": cs,
        "iOSTablePlainHeaderFooter": cs,
        "MindMapBlock": "",
        "MindMapStadiumBlock": "arcSize=50",
        "MindMapCloud": "shape=cloud",
        "MindMapCircle": "shape=ellipse",
        "MindMapIsoscelesTriangleBlock": "shape=triangle;direction=north",
        "MindMapDiamondBlock": "shape=rhombus",
        "MindMapPentagonBlock": s + "basic.pentagon",
        "MindMapHexagonBlock": "shape=hexagon;perimeter=hexagonPerimeter2",
        "MindMapOctagonBlock": s + "basic.octagon",
        "MindMapCrossBlock": s + "basic.cross2;dx=20",
        "ERDEntityBlock": cs,
        "ERDEntityBlock2": cs,
        "ERDEntityBlock3": cs,
        "ERDEntityBlock4": cs,
        "SMPage": "shape=mxgraph.sitemap.page",
        "SMHome": "shape=mxgraph.sitemap.home",
        "SMGallery": "shape=mxgraph.sitemap.gallery",
        "SMShopping": "shape=mxgraph.sitemap.shopping",
        "SMMap": "shape=mxgraph.sitemap.map",
        "SMAthletics": "shape=mxgraph.sitemap.sports",
        "SMLogin": "shape=mxgraph.sitemap.login",
        "SMPrint": "shape=mxgraph.sitemap.print",
        "SMScript": "shape=mxgraph.sitemap.script",
        "SMSearch": "shape=mxgraph.sitemap.search",
        "SMSettings": "shape=mxgraph.sitemap.settings",
        "SMSitemap": "shape=mxgraph.sitemap.sitemap",
        "SMSuccess": "shape=mxgraph.sitemap.success",
        "SMVideo": "shape=mxgraph.sitemap.video",
        "SMAudio": "shape=mxgraph.sitemap.audio",
        "SMBlog": "shape=mxgraph.sitemap.blog",
        "SMCalendar": "shape=mxgraph.sitemap.calendar",
        "SMChart": "shape=mxgraph.sitemap.chart",
        "SMCloud": "shape=mxgraph.sitemap.cloud",
        "SMDocument": "shape=mxgraph.sitemap.document",
        "SMDownload": "shape=mxgraph.sitemap.download",
        "SMError": "shape=mxgraph.sitemap.error",
        "SMForm": "shape=mxgraph.sitemap.form",
        "SMGame": "shape=mxgraph.sitemap.game",
        "SMJobs": "shape=mxgraph.sitemap.jobs",
        "SMLucid": "shape=mxgraph.sitemap.page",
        "SMNewspress": "shape=mxgraph.sitemap.news",
        "SMPhoto": "shape=mxgraph.sitemap.photo",
        "SMPortfolio": "shape=mxgraph.sitemap.portfolio",
        "SMPricing": "shape=mxgraph.sitemap.pricing",
        "SMProfile": "shape=mxgraph.sitemap.profile",
        "SMSlideshow": "shape=mxgraph.sitemap.slideshow",
        "SMUpload": "shape=mxgraph.sitemap.upload",
        "UMLClassBlock": cs,
        "UMLActiveClassBlock": "shape=process",
        "UMLMultiplicityBlock": cs,
        "UMLPackageBlock": "shape=folder;tabPosition=left",
        "UMLConstraintBlock": cs,
        "UMLNoteBlock": "shape=note;size=15",
        "UMLTextBlock": cs,
        "UMLActorBlock": "shape=umlActor;labelPosition=center;verticalLabelPosition=bottom;verticalAlign=top;whiteSpace=nowrap",
        "UMLUseCaseBlock": "shape=ellipse",
        "UMLCircleContainerBlock": "shape=ellipse;container=1",
        "UMLRectangleContainerBlock": "container=1",
        "UMLOptionLoopBlock": s + "sysml.package2;xSize=90;overflow=fill",
        "UMLAlternativeBlock2": s + "sysml.package2;xSize=90;overflow=fill",
        "UMLStartBlock": "shape=ellipse;fillColor=#000000",
        "UMLStateBlock": "rounded=1;arcSize=20",
        "UMLDecisionBlock": "shape=rhombus;",
        "UMLHForkJoinBlock": "fillColor=#000000",
        "UMLVForkJoinBlock": "fillColor=#000000",
        "UMLFlowFinalBlock": s + "flowchart.or",
        "UMLHistoryStateBlock": "shape=ellipse",
        "UMLEndBlock": s + "bpmn.shape;outline=end;symbol=terminate;strokeColor=#000000;fillColor=#ffffff",
        "UMLObjectBlock": "",
        "UMLSendSignalBlock": s + "sysml.sendSigAct",
        "UMLReceiveSignalBlock": s + "sysml.accEvent;flipH=1",
        "UMLAcceptTimeEventActionBlock": s + "sysml.timeEvent",
        "UMLOffPageLinkBlock": s + "sysml.sendSigAct;direction=south",
        "UMLMultiLanePoolBlock": cs,
        "UMLMultiLanePoolRotatedBlock": cs,
        "UMLMultidimensionalSwimlane": cs,
        "UMLActivationBlock": "",
        "UMLDeletionBlock": s + "sysml.x;strokeWidth=4",
        "UMLSeqEntityBlock": s + "electrical.radio.microphone_1;direction=north",
        "UMLComponentBlock": "shape=component;align=left;spacingLeft=36",
        "UMLNodeBlock": "shape=cube;size=12;flipH=1",
        "UMLComponentInterfaceBlock": "shape=ellipse",
        "UMLComponentBoxBlock": cs,
        "UMLProvidedInterfaceBlock": "shape=lollipop;direction=south",
        "UMLRequiredInterfaceBlock": "shape=requires;direction=north",
        "UMLEntityBlock": "",
        "UMLWeakEntityBlock": "shape=ext;double=1",
        "UMLAttributeBlock": "shape=ellipse",
        "UMLMultivaluedAttributeBlock": "shape=doubleEllipse",
        "UMLRelationshipBlock": "shape=rhombus",
        "UMLWeakRelationshipBlock": "shape=rhombus;double=1",
        "BPMNActivity": cs,
        "BPMNEvent": cs,
        "BPMNChoreography": cs,
        "BPMNConversation": cs,
        "BPMNGateway": cs,
        "BPMNData": cs,
        "BPMNDataStore": "shape=datastore",
        "BPMNAdvancedPoolBlock": cs,
        "BPMNAdvancedPoolBlockRotated": cs,
        "BPMNBlackPool": cs,
        "DFDExternalEntityBlock": cs,
        "DFDExternalEntityBlock2": "",
        "YDMDFDProcessBlock": "shape=ellipse",
        "YDMDFDDataStoreBlock": "shape=partialRectangle;right=0;left=0",
        "GSDFDProcessBlock": "shape=swimlane;rounded=1;arcSize=10",
        "GSDFDProcessBlock2": "rounded=1;arcSize=10;",
        "GSDFDDataStoreBlock": cs,
        "GSDFDDataStoreBlock2": "shape=partialRectangle;right=0",
        "OrgBlock": "",
        "DefaultTableBlock": cs,
        "VSMCustomerSupplierBlock": s + "lean_mapping.outside_sources",
        "VSMDedicatedProcessBlock": cs,
        "VSMSharedProcessBlock": cs,
        "VSMWorkcellBlock": cs,
        "VSMDatacellBlock": cs,
        "VSMInventoryBlock": cs,
        "VSMSupermarketBlock": cs,
        "VSMPhysicalPullBlock": s + "lean_mapping.physical_pull;direction=south",
        "VSMFIFOLaneBlock": cs,
        "VSMSafetyBufferStockBlock": cs,
        "VSMExternalShipmentAirplaneBlock": s + "lean_mapping.airplane_7",
        "VSMExternalShipmentForkliftBlock": s + "lean_mapping.move_by_forklift",
        "VSMExternalShipmentTruckBlock": s + "lean_mapping.truck_shipment",
        "VSMExternalShipmentBoatBlock": s + "lean_mapping.boat_shipment",
        "VSMProductionControlBlock": cs,
        "VSMOtherInformationBlock": "",
        "VSMSequencedPullBallBlock": s + "lean_mapping.sequenced_pull_ball",
        "VSMMRPERPBlock": s + "lean_mapping.mrp_erp;whiteSpace=wrap",
        "VSMLoadLevelingBlock": s + "lean_mapping.load_leveling",
        "VSMGoSeeBlock": s + "lean_mapping.go_see_production_scheduling;flipH=1",
        "VSMGoSeeProductionBlock": cs,
        "VSMVerbalInfoBlock": s + "lean_mapping.verbal",
        "VSMKaizenBurstBlock": s + "lean_mapping.kaizen_lightening_burst",
        "VSMOperatorBlock": s + "lean_mapping.operator;flipV=1",
        "VSMTimelineBlock": cs,
        "VSMQualityProblemBlock": s + "lean_mapping.quality_problem",
        "VSMProductionKanbanSingleBlock": "shape=card;size=18;flipH=1;",
        "VSMProductionKanbanBatchBlock": cs,
        "VSMWithdrawalKanbanBlock": s + "lean_mapping.withdrawal_kanban",
        "VSMSignalKanbanBlock": "shape=triangle;direction=south;anchorPointDirection=0",
        "VSMKanbanPostBlock": s + "lean_mapping.kanban_post",
        "VSMShipmentArrow": "shape=singleArrow;arrowWidth=0.5;arrowSize=0.13",
        "VSMPushArrow": s + "lean_mapping.push_arrow",
        "AWSElasticComputeCloudBlock2": cs,
        "AWSInstanceBlock2": ss + "aws3.instance",
        "AWSInstancesBlock2": ss + "aws3.instances;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAMIBlock2": ss + "aws3.ami;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDBonInstanceBlock2": ss + "aws3.db_on_instance;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSInstanceCloudWatchBlock2": ss + "aws3.instance_with_cloudwatch;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSElasticIPBlock2": ss + "aws3.elastic_ip;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSHDFSClusterBlock2": ss + "aws3.hdfs_cluster;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAutoScalingBlock2": ss + "aws3.auto_scaling;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSEC2OptimizedInstance2": ss + "aws3.optimized_instance;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonEC2(Spotinstance)": ss + "aws3.spot_instance;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonECR": ss + "aws3.ecr;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonECS": ss + "aws3.ecs;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSLambda2": ss + "aws3.lambda;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSElasticLoadBalancing": ss + "aws3.elastic_load_balancing;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSElasticLoadBlock2": ss + "aws3.classic_load_balancer;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDirectConnectBlock3": ss + "aws3.direct_connect;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSElasticNetworkBlock2": ss + "aws3.elastic_network_interface;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRoute53Block2": cs,
        "AWSHostedZoneBlock2": ss + "aws3.hosted_zone;fontColor=#FFFFFF;fontStyle=1",
        "AWSRouteTableBlock2": ss + "aws3.route_table;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSVPCBlock2": ss + "aws3.vpc;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSVPNConnectionBlock2": ss + "aws3.vpn_connection;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSVPNGatewayBlock2": ss + "aws3.vpn_gateway;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCustomerGatewayBlock2": ss + "aws3.customer_gateway;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCustomerGatewayBlock3": ss + "aws3.customer_gateway;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSInternetGatewayBlock2": ss + "aws3.internet_gateway;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRouterBlock2": ss + "aws3.router;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRouterBlock3": ss + "aws3.router;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonVPC(endpoints)": ss + "aws3.endpoints;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonVPC(flowlogs)": ss + "aws3.flow_logs;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonVPC(VPCNATgateway)": ss + "aws3.vpc_nat_gateway;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSVPCPeering3": ss + "aws3.vpc_peering;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSSimpleStorageBlock2": ss + "aws3.s3;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSBucketBlock2": ss + "aws3.bucket;fontStyle=1;fontColor=#ffffff",
        "AWSBuckethWithObjectsBlock2": ss + "aws3.bucket_with_objects;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSObjectBlock2": ss + "aws3.object;fontStyle=1;fontColor=#ffffff",
        "AWSImportExportBlock2": ss + "aws3.import_export;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSStorageGatewayBlock2": ss + "aws3.storage_gateway;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSElasticBlockStorageBlock2": ss + "aws3.volume;fontStyle=1;fontColor=#ffffff",
        "AWSVolumeBlock3": ss + "aws3.volume;fontStyle=1;fontColor=#ffffff",
        "AWSSnapshotBlock2": ss + "aws3.snapshot;fontStyle=1;fontColor=#ffffff",
        "AWSGlacierArchiveBlock3": ss + "aws3.archive;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSGlacierVaultBlock3": ss + "aws3.vault;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonEFS": ss + "aws3.efs;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSGlacierBlock2": ss + "aws3.glacier;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSImportExportSnowball": ss + "aws3.snowball;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSStorageGatewayCachedVolumn2": ss + "aws3.cached_volume;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSStorageGatewayNon-CachedVolumn2": ss + "aws3.non_cached_volume;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSStorageGatewayVirtualTapeLibrary2": ss + "aws3.virtual_tape_library;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCloudFrontBlock2": ss + "aws3.cloudfront;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDownloadDistBlock2": ss + "aws3.download_distribution;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSStreamingBlock2": ss + "aws3.streaming_distribution;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSEdgeLocationBlock2": ss + "aws3.edge_location;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSItemBlock2": ss + "aws3.item;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSItemsBlock2": ss + "aws3.items;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAttributeBlock2": ss + "aws3.attribute;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAttributesBlock2": ss + "aws3.attributes;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRDBSBlock2": cs,
        "AWSRDSInstanceBlock2": ss + "aws3.rds_db_instance;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRDSStandbyBlock2": ss + "aws3.rds_db_instance_standby_multi_az;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRDSInstanceReadBlock2": ss + "aws3.rds_db_instance_read_replica;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOracleDBBlock2": ss + "aws3.oracle_db_instance;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSMySQLDBBlock2": ss + "aws3.mysql_db_instance;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDynamoDBBlock2": ss + "aws3.dynamo_db;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSSimpleDatabaseBlock3": ss + "aws2.database.simpledb;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSSimpleDatabaseDomainBlock3": ss + "aws2.database.simpledb_domain;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSTableBlock2": ss + "aws3.table;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRedShiftBlock3": ss + "aws3.redshift;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSElastiCacheNodeBlock2": ss + "aws3.cache_node;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSElastiCacheBlock2": ss + "aws3.elasticache;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDynamoDBGlobalSecondaryIndexes2": ss + "aws3.global_secondary_index;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonElastiCacheMemcache2": ss + "aws3.memcached;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonElastiCacheRedis2": ss + "aws3.redis;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRDSMSSQLInstance2": ss + "aws3.ms_sql_instance_2;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSMSSQLDBBlock3": ss + "aws3.ms_sql_instance;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRDSMySQLDBInstance2": ss + "aws3.mysql_db_instance_2;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRDSOracleDBInstance2": ss + "aws3.oracle_db_instance_2;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRDSReplicasetswithPIOP2": ss + "aws3.piop;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRDSPostgreSQL2": ss + "aws3.postgre_sql_instance;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRDSMasterSQL2": ss + "aws3.sql_master;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRDSSlaveSQL2": ss + "aws3.sql_slave;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRedshift(densecomputenode)": ss + "aws3.dense_compute_node;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRedshift(densestoragenode)": ss + "aws3.dense_storage_node;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSDatabaseMigrationService": ss + "aws3.database_migration_service;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSACM": ss + "aws3.certificate_manager;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonInspector": ss + "aws3.inspector;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSCloudHSM": ss + "aws3.cloudhsm;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDirectoryService2": ss + "aws3.directory_service;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSKMS": ss + "aws3.kms;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSWAF": ss + "aws3.waf;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSACM(certificate-manager)": ss + "aws3.certificate_manager_2;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSSESBlock2": ss + "aws3.ses;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSEmailBlock2": ss + "aws3.email;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSSNSBlock2": ss + "aws3.sns;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSSQSBlock3": ss + "aws3.sqs;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSQueueBlock2": ss + "aws3.queue;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSMessageBlock2": ss + "aws3.message;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDeciderBlock2": ss + "aws3.decider;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSSWFBlock2": ss + "aws3.swf;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSWorkerBlock2": ss + "aws3.worker;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCloudSearchBlock2": ss + "aws3.cloudsearch;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCloudSearchMetadataBlock3": ss + "aws3.search_documents;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSElasticTranscoder3": ss + "aws3.elastic_transcoder;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonAPIGateway": ss + "aws3.api_gateway;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAppStream2": ss + "aws3.appstream;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCloudFormationBlock2": ss + "aws3.cloudformation;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDataPipelineBlock3": ss + "aws3.data_pipeline;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDataPipelineBlock2": ss + "aws3.data_pipeline;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSTemplageBlock2": ss + "aws3.template;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSStackBlock2": ss + "aws3.stack_aws_cloudformation;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSBeanStockBlock2": ss + "aws3.elastic_beanstalk;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSApplicationBlock2": ss + "aws3.application;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSBeanstalkDeploymentBlock3": ss + "aws3.deployment;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSIAMBlock3": ss + "aws3.iam;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSIAMSTSBlock3": ss + "aws3.sts;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSIAMAddonBlock2": ss + "aws3.add_on;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCloudWatchBlock3": ss + "aws3.cloudwatch;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCloudWatchAlarmBlock2": ss + "aws3.alarm;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSIAMSecurityTokenService2": ss + "aws3.sts_2;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSIAMDataEncryptionKey2": ss + "aws3.data_encryption_key;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSIAMEncryptedData2": ss + "aws3.encrypted_data;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIAM(long-termsecuritycredential)": ss + "aws3.long_term_security_credential;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSIAMMFAToken2": ss + "aws3.mfa_token;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSIAMPermissions2": ss + "aws3.permissions_2;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSIAMRoles2": ss + "aws3.role;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIAM(temporarysecuritycredential)": ss + "aws3.long_term_security_credential;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCloudTrail2": ss + "aws3.cloudtrail;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSConfig2": ss + "aws3.config;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOpsWorksBlock3": ss + "aws3.opsworks;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSServiceCatalog": ss + "aws3.service_catalog;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSTrustedAdvisor2": ss + "aws3.trusted_advisor;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOpsWorksApps2": ss + "aws3.apps;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOpsWorksDeployments2": ss + "aws3.deployments;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOpsWorksInstances2": ss + "aws3.instances_2;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOpsWorksLayers2": ss + "aws3.layers;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOpsWorksMonitoring2": ss + "aws3.monitoring;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOpsWorksPermissions2": ss + "aws3.permissions;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOpsWorksResources2": ss + "aws3.resources;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSOpsWorksStack2": ss + "aws3.stack_aws_opsworks;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSMechanicalTurkBlock3": ss + "aws3.mechanical_turk;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSHumanITBlock2": ss + "aws3.human_intelligence_tasks_hit;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAssignmentTaskBlock2": ss + "aws3.requester;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSWorkersBlock2": ss + "aws3.users;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRequesterBlock2": ss + "aws3.assignment_task;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAndroidBlock3": ss + "aws3.android;fillColor=#96BF3D;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSiOSBlock3": ss + "aws3.android;fillColor=#CFCFCF;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSJavaBlock3": ss + "aws3.android;fillColor=#EE472A;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSJavaScript": ss + "aws3.android;fillColor=#205E00;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSNetBlock3": ss + "aws3.android;fillColor=#115193;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSNodeJSBlock3": ss + "aws3.android;fillColor=#8CC64F;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSPHPBlock3": ss + "aws3.android;fillColor=#5A69A4;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSPythonBlock3": ss + "aws3.android;fillColor=#FFD44F;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRubyBlock3": ss + "aws3.android;fillColor=#AE1F23;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSXamarin": ss + "aws3.android;fillColor=#4090D7;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCLIBlock3": ss + "aws3.cli;fillColor=#444444;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSEclipseToolkitBlock3": ss + "aws3.toolkit_for_eclipse;fillColor=#342074;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSVisualStudioToolkitBlock3": ss + "aws3.toolkit_for_visual_studio;fillColor=#53B1CB;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSWindowsPowershellToolkitBlock3": ss + "aws3.toolkit_for_windows_powershell;fillColor=#737373;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonElasticsearchService": ss + "aws3.elasticsearch_service;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSElasticMapReduceBlock2": ss + "aws3.emr;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSClusterBlock2": ss + "aws3.emr_cluster;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSEMREngine2": ss + "aws3.emr_engine;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSEMRMapRM3Engine2": ss + "aws3.emr_engine_mapr_m3;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSEMRMapRM5Engine2": ss + "aws3.emr_engine_mapr_m5;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSEMRMapRM7Engine2": ss + "aws3.emr_engine_mapr_m7;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSKinesis2": ss + "aws3.kinesis;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonKinesis(AmazonKinesisAnalytics)": ss + "aws3.kinesis;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSKinesisEnabledApp2": ss + "aws3.kinesis_enabled_app;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonKinesis(AmazonKinesisFirehose)": ss + "aws3.kinesis_firehose;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonKinesis(AmazonKinesisStreams)": ss + "aws3.kinesis_streams;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonMachineLearning": ss + "aws3.machine_learning;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonQuickSight": ss + "aws3.quicksight;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCognito2": ss + "aws3.cognito;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSMobileAnalytics2": ss + "aws3.mobile_analytics;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSDeviceFarm": ss + "aws3.device_farm;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSMobileHub": ss + "aws3.mobile_hub;gradientColor=#AD688A;gradientDirection=east;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSTopicBlock2": ss + "aws3.topic_2;fontStyle=1;fontColor=#ffffff;verticalAlign=top;spacingTop=-5",
        "AWSEmailNotificationBlock2": ss + "aws3.email_notification;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSHTTPNotificationBlock2": ss + "aws3.http_notification;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSCodeCommit": ss + "aws3.codecommit;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCodeDeploy2": ss + "aws3.codedeploy;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSCodePipeline": ss + "aws3.codepipeline;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSWorkDocs2": ss + "aws3.workdocs;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonWorkMail": ss + "aws3.workmail;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonWorkSpaces2": ss + "aws3.workspaces;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT": ss + "aws3.aws_iot;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(action)": ss + "aws3.action;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(actuator)": ss + "aws3.actuator;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(certificate)": ss + "aws3.certificate;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(desiredstate)": ss + "aws3.desired_state;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(hardwareboard)": ss + "aws3.hardware_board;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(HTTP2protocol)": ss + "aws3.http_2_protocol;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(HTTPprotocol)": ss + "aws3.http_protocol;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(MQTTprotocol)": ss + "aws3.mqtt_protocol;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(policy)": ss + "aws3.policy;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(reportedstate)": ss + "aws3.reported_state;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(rule)": ss + "aws3.rule;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(sensor)": ss + "aws3.sensor;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(servo)": ss + "aws3.servo;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(shadow)": ss + "aws3.shadow;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(simulator)": ss + "aws3.simulator;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingbank)": ss + "aws3.bank;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingbicycle)": ss + "aws3.bicycle;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingcamera)": ss + "aws3.camera;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingcar)": ss + "aws3.car;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingcart)": ss + "aws3.cart;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingcoffeepot)": ss + "aws3.coffee_pot;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingdoorlock)": ss + "aws3.door_lock;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingfactory)": ss + "aws3.factory;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thinggeneric)": ss + "aws3.generic;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thinghouse)": ss + "aws3.house;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thinglightbulb)": ss + "aws3.lightbulb;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingmedicalemergency)": ss + "aws3.medical_emergency;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingpoliceemergency)": ss + "aws3.police_emergency;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingthermostat)": ss + "aws3.thermostat;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingtravel)": ss + "aws3.travel;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingutility)": ss + "aws3.utility;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(thingwindfarm)": ss + "aws3.windfarm;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAWSIoT(topic)": ss + "aws3.topic;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSCloudBlock2": ss + "aws3.cloud;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSVPCloudBlock3": ss + "aws3.virtual_private_cloud;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSUserBlock2": ss + "aws3.user;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSUsersBlock2": ss + "aws3.users;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSClientBlock2": ss + "aws3.management_console;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSMobileClientBlock2": ss + "aws3.mobile_client;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSGenericDatabaseBlock3": ss + "aws3.generic_database;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDiskBlock3": ss + "aws3.disk;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSTapeStorageBlock3": ss + "aws3.tape_storage;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSMediaBlock2": ss + "aws3.multimedia;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSDataCenterBlock2": ss + "aws3.corporate_data_center;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSServerBlock2": ss + "aws3.traditional_server;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSInternetBlock2": ss + "aws2.non-service_specific.internet;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSForumsBlock3": ss + "aws3.forums;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSManagementBlock2": ss + "aws3.management_console;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonElasticCacheNode2": ss + "aws3.cache_node;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRedshiftDW1Cluster2": ss + "aws3.dense_compute_node;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRedshiftDW2Cluster2": ss + "aws3.dense_storage_node;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRedshiftSSDFamilyCluster2": ss + "aws3.dense_storage_node;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSAmazonRoute53RouteTable2": ss + "aws3.route_table;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSSubnetBlock2": ss + "aws3.permissions;verticalLabelPosition=bottom;align=center;verticalAlign=top",
        "AWSRoundedRectangleContainerBlock2": cs,
        "ACAccessControlBlock": ss + "azure.access_control",
        "ACAPIAppsBlock": ss + "mscae.cloud.api_app",
        "ACAPIManagementBlock": ss + "mscae.cloud.api_management",
        "ACAppInsightsBlock": ss + "mscae.cloud.application_insights",
        "ACAppServicesBlock": ss + "mscae.cloud.app_service",
        "ACAutoscalingBlock": ss + "azure.autoscale",
        "ACAzureActiveDirectoryBlock": ss + "azure.azure_active_directory",
        "ACAzurealertBlock": ss + "azure.azure_alert",
        "ACAzureAutomationBlock": ss + "azure.automation",
        "ACAzureBatchBlock": ss + "mscae.cloud.azure_batch",
        "ACAzureRedisBlock": ss + "azure.azure_cache",
        "ACAzureFilesBlock": ss + "mscae.cloud.azure_files_service",
        "ACAzureloadbalancerBlock": ss + "mscae.cloud.azure_automatic_load_balancer",
        "ACAzureMarketplaceBlock": ss + "azure.azure_marketplace",
        "ACAzureRightManagementRMSBlock": ss + "mscae.cloud.azure_rights_management_rms",
        "ACAzureSDKBlock": ss + "azure.azure_sdk",
        "ACAzureSearchBlock": ss + "mscae.cloud.azure_search",
        "ACAzureSQLdatabaseBlock": ss + "azure.sql_database_sql_azure",
        "ACAzuresubscriptionBlock": ss + "azure.azure_subscription",
        "ACAzureWebsitesBlock": ss + "azure.azure_website",
        "ACBackupServiceBlock": ss + "azure.backup_service",
        "ACBitbucketcodesourceBlock": ss + "azure.bitbucket_code_source",
        "ACBizTalkServicesBlock": ss + "azure.biztalk_services",
        "ACCloudServiceBlock": ss + "azure.cloud_service",
        "ACCodePlexBlock": ss + "azure.codeplex_code_source",
        "ACContentDeliveryNetworkBlock": ss + "azure.content_delivery_network",
        "ACDataFactoryBlock": ss + "mscae.cloud.data_factory",
        "ACDocumentDBBlock": ss + "mscae.cloud.documentdb",
        "ACDropboxcodesourceBlock": ss + "azure.dropbox_code_source",
        "ACEventsHubBlock": ss + "mscae.cloud.event_hubs",
        "ACExpressRouteBlock": ss + "azure.express_route",
        "ACGitHubBlock": ss + "azure.github_code",
        "ACGitrepositoryBlock": ss + "azure.git_repository",
        "ACHDInsightBlock": ss + "mscae.cloud.hdinsight",
        "ACHealthmonitoringBlock": ss + "azure.health_monitoring",
        "ACHealthyBlock": ss + "azure.healthy",
        "ACHybridConnectionBlock": ss + "mscae.cloud.hybrid_connections",
        "ACBizTalkhybridconnectionBlock": ss + "mscae.cloud.hybrid_connection_manager",
        "ACKeyVaultBlock": ss + "mscae.cloud.key_vault",
        "ACLogicAppBlock": ss + "mscae.cloud.logic_app",
        "ACMachineLearningBlock": ss + "mscae.cloud.machine_learning",
        "ACMediaServicesBlock": ss + "azure.media_service",
        "ACMicrosoftaccountBlock": ss + "mscae.cloud.microsoft_account",
        "ACMicrosoftAzureBlock": ss + "mscae.cloud.microsoft_azure",
        "ACMobileEngagementBlock": ss + "mscae.cloud.mobile_engagement",
        "ACMobileServicesBlock": ss + "mscae.cloud.mobile_app",
        "ACMultiFactorAuthBlock": ss + "azure.multi_factor_authentication",
        "ACMySQLdatabaseBlock": ss + "azure.mysql_database",
        "ACNotificationHubsBlock": ss + "azure.notification_hub",
        "ACNotificationtopicBlock": ss + "azure.notification_topic",
        "ACOperationalInsightsBlock": ss + "mscae.cloud.operational_insights",
        "ACOSimageBlock": ss + "azure.operating_system_image",
        "ACRemoteAppBlock": ss + "mscae.cloud.remoteapp",
        "ACrpdRemotingfileBlock": ss + "azure.rdp_remoting_file",
        "ACSchedulerBlock": ss + "azure.scheduler",
        "ACServiceBusBlock": ss + "azure.service_bus",
        "ACServiceBusQueueBlock": ss + "azure.service_bus_queues",
        "ACServiceBusRelayBlock": ss + "azure.service_bus_relay",
        "ACServiceBusTopicBlock": ss + "azure.service_bus_topics_and_subscriptions",
        "ACServiceEndpointBlock": ss + "mscae.cloud.service_endpoint",
        "ACServicepackageBlock": ss + "mscae.cloud.service_package",
        "ACSiteRecoveryBlock": ss + "azure.hyper_v_recovery_manager",
        "ACSQLdatabasegenericBlock": ss + "azure.sql_database",
        "ACSQLdatasyncBlock": ss + "azure.sql_datasync",
        "ACSQLreportingdeprecatedBlock": ss + "azure.sql_reporting",
        "ACStartuptaskBlock": ss + "azure.startup_task",
        "ACStorageAzureBlock": ss + "mscae.cloud.azure_storage",
        "ACStorageblobBlock": ss + "azure.storage_blob",
        "ACStoragequeueBlock": ss + "azure.storage_queue",
        "ACStoragetableBlock": ss + "azure.storage_table",
        "ACStorSimpleBlock": ss + "azure.storsimple",
        "ACStreamAnalyticsBlock": ss + "mscae.cloud.stream_analytics",
        "ACTrafficManagerBlock": ss + "azure.traffic_manager",
        "ACAlienBlock": ss + "azure.unidentified_code_object",
        "ACVHDBlock": ss + "azure.vhd",
        "ACVHDdatadiskBlock": ss + "azure.vhd_data_disk",
        "ACVirtualmachineBlock": ss + "azure.virtual_machine",
        "ACVirtualmachinecontainerBlock": ss + "mscae.cloud.virtual_machine_container",
        "ACVirtualnetworkBlock": ss + "azure.virtual_network",
        "ACVisualStudioOnlineBlock": ss + "azure.visual_studio_online",
        "ACVMsymbolonlyBlock": ss + "azure.virtual_machine_feature",
        "ACWebJobsBlock": ss + "mscae.cloud.webjobs",
        "ACWebroleBlock": ss + "azure.web_role",
        "ACWebrolesBlock": ss + "azure.web_roles",
        "ACWorkaccountBlock": ss + "mscae.cloud.work_account",
        "ACWorkerroleBlock": ss + "azure.worker_role",
        "ACWorkerrolesBlock": ss + "azure.worker_roles",
        "ADNSBlock": ss + "mscae.cloud.azure_dns",
        "ACLoadBalancerBlock": ss + "mscae.cloud.azure_load_balancer_feature",
        "ACResourceGroupBlock": ss + "mscae.cloud.resource_group",
        "ACVPNGatewayBlock": ss + "mscae.cloud.vpn_gateway",
        "AEActiveDirectoryFSPBlock": ss + "mscae.enterprise.d",
        "AEADFSBlock": ss + "mscae.enterprise.ad_fs",
        "AEAndroidPhoneBlock": ss + "mscae.enterprise.android_phone",
        "AEappblankfortextBlock": ss + "mscae.enterprise.application_blank",
        "AEAppGenericBlock": ss + "mscae.enterprise.app_generic",
        "AEAppserverBlock": ss + "mscae.enterprise.application_server",
        "AEBackuplocalBlock": ss + "mscae.enterprise.backup_local",
        "AEBackuponlineBlock": ss + "mscae.enterprise.backup_online",
        "AECalendarBlock": ss + "mscae.general.calendar",
        "AECertificateBlock": ss + "azure.certificate",
        "AEClientAppBlock": ss + "mscae.enterprise.client_application",
        "AECloudBlock": ss + "mscae.enterprise.internet",
        "AEClusterserverBlock": ss + "mscae.enterprise.cluster_server",
        "AECodefileBlock": ss + "azure.code_file",
        "AEConnectorsBlock": ss + "mscae.enterprise.connectors",
        "AEDatabasegenericBlock": ss + "mscae.enterprise.database_generic",
        "AEDatabaseserverBlock": ss + "mscae.enterprise.database_server",
        "AEDatabasesyncBlock": ss + "mscae.enterprise.database_synchronization",
        "AEDeviceBlock": ss + "mscae.enterprise.device",
        "AEDirectaccessBlock": ss + "mscae.enterprise.direct_access_feature",
        "AEDocumentBlock": ss + "mscae.enterprise.document",
        "AEDomaincontrollerBlock": ss + "mscae.enterprise.domain_controller",
        "AEEnterpriseBuildingBlock": ss + "azure.enterprise",
        "AEFilegeneralBlock": ss + "azure.file",
        "AEFilterBlock": ss + "mscae.enterprise.filter",
        "AEFirewallBlock": ss + "mscae.enterprise.firewall",
        "AEFolderBlock": ss + "mscae.enterprise.folder",
        "AEGatewayBlock": ss + "mscae.enterprise.gateway",
        "AEGenericcodeBlock": ss + "azure.code_file",
        "AEGraphBlock": ss + "mscae.general.graph",
        "AEHealthmonitoringBlock": ss + "azure.health_monitoring",
        "AEHealthyBlock": ss + "azure.healthy",
        "AEImportgenericBlock": ss + "mscae.enterprise.import_generic",
        "AEInternetBlock": ss + "mscae.enterprise.internet",
        "AEKeyboardBlock": ss + "mscae.enterprise.keyboard",
        "AEKeypermissionsBlock": ss + "mscae.enterprise.key_permissions",
        "AELaptopcomputerBlock": ss + "azure.laptop",
        "AELoadbalancerBlock": ss + "azure.load_balancer_generic",
        "AELoadTestingBlock": ss + "mscae.enterprise.load_testing",
        "AELockprotectedBlock": ss + "mscae.enterprise.lock",
        "AELockunprotectedBlock": ss + "mscae.enterprise.lock_unlocked",
        "AEMaintenanceBlock": ss + "mscae.enterprise.maintenance",
        "AEManagementconsoleBlock": ss + "mscae.enterprise.management_console",
        "AEMessageBlock": ss + "azure.message",
        "AEMonitorBlock": ss + "azure.computer",
        "AEMonitorrunningappsBlock": ss + "mscae.enterprise.monitor_running_apps",
        "AEMouseBlock": ss + "mscae.enterprise.mouse",
        "AENetworkcardBlock": ss + "mscae.enterprise.network_card",
        "AENotallowedBlock": ss + "mscae.general.not_allowed",
        "AEPerformanceBlock": ss + "mscae.enterprise.performance",
        "AEPerformancemonitorBlock": ss + "mscae.enterprise.performance_monitor",
        "AEPhoneBlock": ss + "azure.mobile",
        "AEPlugandplayBlock": ss + "mscae.enterprise.plug_and_play",
        "AEPowershellscriptfileBlock": ss + "azure.powershell_file",
        "AEProtocolstackBlock": ss + "mscae.enterprise.protocol_stack",
        "AEQueuegeneralBlock": ss + "azure.queue_generic",
        "AERMSconnectorBlock": ss + "mscae.enterprise.rms_connector",
        "AERouterBlock": ss + "mscae.enterprise.router",
        "AEScriptfileBlock": ss + "azure.script_file",
        "AESecurevirtualmachineBlock": ss + "mscae.enterprise.secure_virtual_machine",
        "AEServerbladeBlock": ss + "azure.server",
        "AEServerdirectoryBlock": ss + "mscae.enterprise.server_directory",
        "AEServerfarmBlock": ss + "mscae.enterprise.server_farm",
        "AEServergenericBlock": ss + "mscae.enterprise.server_generic",
        "AEServerrackBlock": ss + "azure.server_rack",
        "AESettingsBlock": ss + "mscae.enterprise.settings",
        "AESharedfolderBlock": ss + "mscae.enterprise.shared_folder",
        "AESmartcardBlock": ss + "mscae.enterprise.smartcard",
        "AEStorageBlock": ss + "mscae.enterprise.storage",
        "AETableBlock": ss + "mscae.enterprise.table",
        "AETabletBlock": ss + "azure.tablet",
        "AEToolBlock": ss + "mscae.enterprise.tool",
        "AETunnelBlock": ss + "mscae.general.tunnel",
        "AEUnhealthyBlock": ss + "mscae.enterprise.unhealthy",
        "AEUSBBlock": ss + "mscae.enterprise.usb",
        "AEUserBlock": ss + "azure.user",
        "AEVideoBlock": ss + "mscae.general.video",
        "AEVirtualmachineBlock": ss + "azure.virtual_machine_feature",
        "AEWebBlock": ss + "mscae.enterprise.web",
        "AEWebserverBlock": ss + "mscae.enterprise.web_server",
        "AEWindowsserverBlock": ss + "mscae.enterprise.windows_server",
        "AEWirelessconnectionBlock": ss + "mscae.enterprise.wireless_connection",
        "AEWorkstationclientBlock": ss + "mscae.enterprise.workstation_client",
        "AEXMLwebserviceBlock": ss + "mscae.enterprise.xml_web_service",
        "AGSAudioBlock": ss + "mscae.general.audio",
        "AGSBugBlock": ss + "mscae.general.bug",
        "AGSCablesettopTVboxBlock": ss + "mscae.general.cable_settop_tv_box",
        "AGSCalendarBlock": ss + "mscae.general.calendar",
        "AGSChartBlock": ss + "mscae.general.chart",
        "AGSCheckmarkSuccessBlock": ss + "mscae.general.checkmark",
        "AGSContinousCycleCircleBlock": ss + "mscae.general.continuous_cycle",
        "AGSCrossoutFailureBlock": ss + "mscae.general.crossout",
        "AGSCutandpasteBlock": ss + "mscae.general.cut_and_paste",
        "AGSFolderBlock": ss + "mscae.enterprise.folder",
        "AGSGamecontrollerBlock": ss + "mscae.general.game_controller",
        "AGSGearsBlock": ss + "mscae.general.gears",
        "AGSGraphBlock": ss + "mscae.general.graph",
        "AGSLikeBlock": ss + "mscae.general.like",
        "AGSNotallowedBlock": ss + "mscae.general.not_allowed",
        "AGSSliderbarhorizontalBlock": ss + "mscae.general.slider_bar_horizontal",
        "AGSSliderbarvertBlock": ss + "mscae.general.slider_bar_vertical",
        "AGSTasklistorBacklogBlock": ss + "mscae.general.task_list",
        "AGSTasksBlock": ss + "mscae.general.tasks",
        "AGSTunnelBlock": ss + "mscae.general.tunnel",
        "AGSUserBlock": ss + "azure.user",
        "AGSVideoBlock": ss + "mscae.general.video",
        "Cisco_cisco_androgenous_person": s + "cisco.people.androgenous_person;" + c,
        "Cisco_cisco_atm_switch": s + "cisco.switches.atm_switch;" + c,
        "Cisco_cisco_cloud": s + "cisco.storage.cloud;strokeColor=#036897;fillColor=#ffffff",
        "Cisco_cisco_fileserver": s + "cisco.servers.fileserver;" + c,
        "Cisco_cisco_firewall": s + "cisco.security.firewall;" + c,
        "Cisco_cisco_generic_building": s + "cisco.buildings.generic_building;" + c,
        "Cisco_cisco_laptop": s + "cisco.computers_and_peripherals.laptop;" + c,
        "Cisco_cisco_lock": s + "cisco.security.lock;" + c,
        "Cisco_cisco_microwebserver": s + "cisco.servers.microwebserver;" + c,
        "Cisco_cisco_pc": s + "cisco.computers_and_peripherals.pc;" + c,
        "Cisco_cisco_pda": s + "cisco.misc.pda;" + c,
        "Cisco_cisco_phone": s + "cisco.modems_and_phones.hootphone;" + c,
        "Cisco_cisco_printer": s + "cisco.computers_and_peripherals.printer;" + c,
        "Cisco_cisco_relational_database": s + "cisco.storage.relational_database;" + c,
        "Cisco_cisco_router": s + "cisco.routers.router;" + c,
        "Cisco_cisco_standing_man": s + "cisco.people.standing_man;" + c,
        "Cisco_cisco_standing_woman": s + "cisco.people.standing_woman;" + c,
        "Cisco_cisco_ups": s + "cisco.misc.ups;" + c,
        "Cisco_cisco_wireless_router": s + "cisco.routers.wireless_router;" + c,
        "Cisco_cisco_100baset_hub": s + "cisco.hubs_and_gateways.100baset_hub;" + c,
        "Cisco_cisco_10700": s + "cisco.routers.10700;" + c,
        "Cisco_cisco_10GE_FCoE": s + "cisco.controllers_and_modules.10ge_fcoe;" + c,
        "Cisco_cisco_15200": s + "cisco.misc.15200;" + c,
        "Cisco_cisco_3174__desktop_": s + "cisco.controllers_and_modules.3174_(desktop)_cluster_controller;" + c,
        "Cisco_cisco_3200_mobile_access_router": s + "cisco.routers.mobile_access_router;" + c,
        "Cisco_cisco_3x74__floor_": s + "cisco.controllers_and_modules.3x74_(floor)_cluster_controller;" + c,
        "Cisco_cisco_6700_series": s + "cisco.misc.6700_series;" + c,
        "Cisco_cisco_7500ars__7513_": s + "cisco.misc.7500ars_(7513);" + c,
        "Cisco_cisco_accesspoint": s + "cisco.misc.access_point;" + c,
        "Cisco_cisco_ace": s + "cisco.misc.ace;" + c,
        "Cisco_cisco_ACS": s + "cisco.misc.acs;" + c,
        "Cisco_cisco_adm": s + "cisco.misc.adm;" + c,
        "Cisco_cisco_antenna": s + "cisco.wireless.antenna;" + c,
        "Cisco_cisco_asic_processor": s + "cisco.misc.asic_processor;" + c,
        "Cisco_cisco_ASR_1000_Series": s + "cisco.misc.asr_1000_series;" + c,
        "Cisco_cisco_ata": s + "cisco.misc.ata;" + c,
        "Cisco_cisco_atm_3800": s + "cisco.misc.atm_3800;" + c,
        "Cisco_cisco_atm_fast_gigabit_etherswitch": s + "cisco.switches.atm_fast_gigabit_etherswitch;" + c,
        "Cisco_cisco_atm_router": s + "cisco.routers.atm_router;" + c,
        "Cisco_cisco_atm_tag_switch_router": s + "cisco.routers.atm_tag_switch_router;" + c,
        "Cisco_cisco_avs": s + "cisco.misc.avs;" + c,
        "Cisco_cisco_AXP": s + "cisco.misc.axp;" + c,
        "Cisco_cisco_bbsm": s + "cisco.misc.bbsm;" + c,
        "Cisco_cisco_branch_office": s + "cisco.buildings.branch_office;" + c,
        "Cisco_cisco_breakout_box": s + "cisco.misc.breakout_box;" + c,
        "Cisco_cisco_bridge": s + "cisco.misc.bridge;" + c,
        "Cisco_cisco_broadband_router": s + "cisco.routers.broadcast_router;" + c,
        "Cisco_cisco_bts_10200": s + "cisco.misc.bts_10200;" + c,
        "Cisco_cisco_cable_modem": s + "cisco.modems_and_phones.cable_modem;" + c,
        "Cisco_cisco_callmanager": s + "cisco.misc.call_manager;" + c,
        "Cisco_cisco_car": s + "cisco.misc.car;" + c,
        "Cisco_cisco_carrier_routing_system": s + "cisco.misc.carrier_routing_system;" + c,
        "Cisco_cisco_cddi_fddi": s + "cisco.misc.cddi_fddi;" + c,
        "Cisco_cisco_cdm": s + "cisco.misc.cdm;" + c,
        "Cisco_cisco_cellular_phone": s + "cisco.modems_and_phones.cell_phone;" + c,
        "Cisco_cisco_centri_firewall": s + "cisco.security.centri_firewall;" + c,
        "Cisco_cisco_cisco_1000": s + "cisco.misc.cisco_1000;" + c,
        "Cisco_cisco_cisco_asa_5500": s + "cisco.misc.asa_5500;" + c,
        "Cisco_cisco_cisco_ca": s + "cisco.misc.cisco_ca;" + c,
        "Cisco_cisco_cisco_file_engine": s + "cisco.storage.cisco_file_engine;" + c,
        "Cisco_cisco_cisco_hub": s + "cisco.hubs_and_gateways.cisco_hub;" + c,
        "Cisco_cisco_ciscosecurity": s + "cisco.security.cisco_security;" + c,
        "Cisco_cisco_cisco_unified_presence_server": s + "cisco.servers.cisco_unified_presence_server;" + c,
        "Cisco_cisco_cisco_unityexpress": s + "cisco.misc.cisco_unity_express;" + c,
        "Cisco_cisco_ciscoworks": s + "cisco.misc.cisco_works;" + c,
        "Cisco_cisco_class_4_5_switch": s + "cisco.switches.class_4_5_switch;" + c,
        "Cisco_cisco_communications_server": s + "cisco.servers.communications_server;" + c,
        "Cisco_cisco_contact_center": s + "cisco.misc.contact_center;" + c,
        "Cisco_cisco_content_engine__cache_director_": s + "cisco.directors.content_engine_(cache_director);" + c,
        "Cisco_cisco_content_service_router": s + "cisco.routers.content_service_router;" + c,
        "Cisco_cisco_content_service_switch_1100": s + "cisco.switches.content_service_switch_1100;" + c,
        "Cisco_cisco_content_switch_module": s + "cisco.controllers_and_modules.content_switch_module;" + c,
        "Cisco_cisco_content_switch": s + "cisco.switches.content_switch;" + c,
        "Cisco_cisco_content_transformation_engine__cte_": s + "cisco.misc.content_transformation_engine_(cte);" + c,
        "Cisco_cisco_cs_mars": s + "cisco.misc.cs-mars;" + c,
        "Cisco_cisco_csm_s": s + "cisco.misc.csm-s;" + c,
        "Cisco_cisco_csu_dsu": s + "cisco.misc.csu_dsu;" + c,
        "Cisco_cisco_CUBE": s + "cisco.misc.cube;" + c,
        "Cisco_cisco_detector": s + "cisco.misc.detector;" + c,
        "Cisco_cisco_director_class_fibre_channel_director": s + "cisco.directors.director-class_fibre_channel_director;" + c,
        "Cisco_cisco_directory_server": s + "cisco.servers.directory_server;" + c,
        "Cisco_cisco_diskette": s + "cisco.storage.diskette;" + c,
        "Cisco_cisco_distributed_director": s + "cisco.directors.distributed_director;" + c,
        "Cisco_cisco_dot_dot": s + "cisco.misc.dot-dot;" + c,
        "Cisco_cisco_dpt": s + "cisco.misc.dpt;" + c,
        "Cisco_cisco_dslam": s + "cisco.misc.dslam;" + c,
        "Cisco_cisco_dual_mode_ap": s + "cisco.misc.dual_mode;" + c,
        "Cisco_cisco_dwdm_filter": s + "cisco.misc.dwdm_filter;" + c,
        "Cisco_cisco_end_office": s + "cisco.buildings.end_office;" + c,
        "Cisco_cisco_fax": s + "cisco.modems_and_phones.fax;" + c,
        "Cisco_cisco_fc_storage": s + "cisco.storage.fc_storage;" + c,
        "Cisco_cisco_fddi_ring": s + "cisco.misc.fddi_ring;strokeColor=#036897;",
        "Cisco_cisco_fibre_channel_disk_subsystem": s + "cisco.storage.fibre_channel_disk_subsystem;" + c,
        "Cisco_cisco_fibre_channel_fabric_switch": s + "cisco.switches.fibre_channel_fabric_switch;" + c,
        "Cisco_cisco_file_cabinet": s + "cisco.storage.file_cabinet;" + c,
        "Cisco_cisco_file_server": s + "cisco.servers.file_server;" + c,
        "Cisco_cisco_firewall_service_module__fwsm_": s + "cisco.controllers_and_modules.firewall_service_module_(fwsm);" + c,
        "Cisco_cisco_front_end_processor": s + "cisco.misc.front_end_processor;" + c,
        "Cisco_cisco_gatekeeper": s + "cisco.security.gatekeeper;strokeColor=#036897;",
        "Cisco_cisco_general_applicance": s + "cisco.misc.general_appliance;" + c,
        "Cisco_cisco_generic_gateway": s + "cisco.hubs_and_gateways.generic_gateway;" + c,
        "Cisco_cisco_generic_processor": s + "cisco.misc.generic_processor;" + c,
        "Cisco_cisco_generic_softswitch": s + "cisco.switches.generic_softswitch;" + c,
        "Cisco_cisco_gigabit_switch_atm_tag_router": s + "cisco.routers.gigabit_switch_atm_tag_router;" + c,
        "Cisco_cisco_government_building": s + "cisco.buildings.government_building;" + c,
        "Cisco_cisco_Ground_terminal": s + "cisco.wireless.ground_terminal;" + c,
        "Cisco_cisco_guard": s + "cisco.security.guard;" + c,
        "Cisco_cisco_handheld": s + "cisco.misc.handheld;" + c,
        "Cisco_cisco_hootphone": s + "cisco.modems_and_phones.hootphone;" + c,
        "Cisco_cisco_host": s + "cisco.servers.host;" + c,
        "Cisco_cisco_hp_mini": s + "cisco.misc.hp_mini;" + c,
        "Cisco_cisco_h": s + "cisco.misc.h_323;" + c,
        "Cisco_cisco_hub": s + "cisco.hubs_and_gateways.hub;" + c,
        "Cisco_cisco_iad_router": s + "cisco.routers.iad_router;" + c,
        "Cisco_cisco_ibm_mainframe": s + "cisco.computers_and_peripherals.ibm_mainframe;" + c,
        "Cisco_cisco_ibm_mini_as400": s + "cisco.computers_and_peripherals.ibm_mini_as400;" + c,
        "Cisco_cisco_ibm_tower": s + "cisco.computers_and_peripherals.ibm_tower;" + c,
        "Cisco_cisco_icm": s + "cisco.misc.icm;" + c,
        "Cisco_cisco_ics": s + "cisco.misc.ics;" + c,
        "Cisco_cisco_intelliswitch_stack": s + "cisco.switches.intelliswitch_stack;" + c,
        "Cisco_cisco_ios_firewall": s + "cisco.security.ios_firewall;" + c,
        "Cisco_cisco_ios_slb": s + "cisco.misc.ios_slb;" + c,
        "Cisco_cisco_ip_communicator": s + "cisco.misc.ip_communicator;" + c,
        "Cisco_cisco_ip_dsl": s + "cisco.misc.ip_dsl;" + c,
        "Cisco_cisco_ip_phone": s + "cisco.modems_and_phones.ip_phone;" + c,
        "Cisco_cisco_ip": s + "cisco.misc.ip;" + c,
        "Cisco_cisco_iptc": s + "cisco.misc.iptc;" + c,
        "Cisco_cisco_ip_telephony_router": s + "cisco.routers.ip_telephony_router;" + c,
        "Cisco_cisco_iptv_content_manager": s + "cisco.misc.iptv_content_manager;" + c,
        "Cisco_cisco_iptv_server": s + "cisco.servers.iptv_server;" + c,
        "Cisco_cisco_iscsi_router": s + "cisco.routers.isci_router;" + c,
        "Cisco_cisco_isdn_switch": s + "cisco.switches.isdn_switch;" + c,
        "Cisco_cisco_itp": s + "cisco.misc.itp;" + c,
        "Cisco_cisco_jbod": s + "cisco.misc.jbod;" + c,
        "Cisco_cisco_key": s + "cisco.misc.key;" + c,
        "Cisco_cisco_keys": s + "cisco.misc.keys;" + c,
        "Cisco_cisco_lan_to_lan": s + "cisco.misc.lan_to_lan;" + c,
        "Cisco_cisco_layer_2_remote_switch": s + "cisco.switches.layer_2_remote_switch;" + c,
        "Cisco_cisco_layer_3_switch": s + "cisco.switches.layer_3_switch;" + c,
        "Cisco_cisco_lightweight_ap": s + "cisco.misc.lightweight_ap;" + c,
        "Cisco_cisco_localdirector": s + "cisco.directors.localdirector;" + c,
        "Cisco_cisco_longreach_cpe": s + "cisco.misc.longreach_cpe;" + c,
        "Cisco_cisco_macintosh": s + "cisco.computers_and_peripherals.macintosh;" + c,
        "Cisco_cisco_mac_woman": s + "cisco.people.mac_woman;" + c,
        "Cisco_cisco_man_woman": s + "cisco.people.man_woman;" + c,
        "Cisco_cisco_mas_gateway": s + "cisco.hubs_and_gateways.mas_gateway;" + c,
        "Cisco_cisco_mau": s + "cisco.misc.mau;" + c,
        "Cisco_cisco_mcu": s + "cisco.misc.mcu;" + c,
        "Cisco_cisco_mdu": s + "cisco.buildings.mdu;" + c,
        "Cisco_cisco_me_1100": s + "cisco.misc.me1100;" + c,
        "Cisco_cisco_Mediator": s + "cisco.misc.mediator;" + c,
        "Cisco_cisco_meetingplace": s + "cisco.misc.meetingplace;" + c,
        "Cisco_cisco_mesh_ap": s + "cisco.misc.mesh_ap;" + c,
        "Cisco_cisco_metro_1500": s + "cisco.misc.metro_1500;" + c,
        "Cisco_cisco_mgx_8000_multiservice_switch": s + "cisco.switches.mgx_8000_multiservice_switch;" + c,
        "Cisco_cisco_microphone": s + "cisco.computers_and_peripherals.microphone;" + c,
        "Cisco_cisco_mini_vax": s + "cisco.misc.mini_vax;" + c,
        "Cisco_cisco_mobile_access_ip_phone": s + "cisco.modems_and_phones.mobile_access_ip_phone;" + c,
        "Cisco_cisco_mobile_access_router": s + "cisco.routers.mobile_access_router;" + c,
        "Cisco_cisco_modem": s + "cisco.modems_and_phones.modem;" + c,
        "Cisco_cisco_moh_server": s + "cisco.servers.moh_server;" + c,
        "Cisco_cisco_MSE": s + "cisco.misc.mse;" + c,
        "Cisco_cisco_mulitswitch_device": s + "cisco.switches.multiswitch_device;" + c,
        "Cisco_cisco_multi_fabric_server_switch": s + "cisco.switches.multi-fabric_server_switch;" + c,
        "Cisco_cisco_multilayer_remote_switch": s + "cisco.switches.multilayer_remote_switch;" + c,
        "Cisco_cisco_mux": s + "cisco.misc.mux;" + c,
        "Cisco_cisco_MXE": s + "cisco.misc.mxe;" + c,
        "Cisco_cisco_nac_appliance": s + "cisco.misc.nac_appliance;" + c,
        "Cisco_cisco_NCE": s + "cisco.misc.nce;" + c,
        "Cisco_cisco_NCE_router": s + "cisco.routers.nce_router;" + c,
        "Cisco_cisco_netflow_router": s + "cisco.routers.netflow_router;" + c,
        "Cisco_cisco_netranger": s + "cisco.misc.netranger;" + c,
        "Cisco_cisco_netsonar": s + "cisco.misc.netsonar;" + c,
        "Cisco_cisco_network_management": s + "cisco.misc.network_management;" + c,
        "Cisco_cisco_Nexus_1000": s + "cisco.misc.nexus_1000;" + c,
        "Cisco_cisco_Nexus_2000": s + "cisco.misc.nexus_2000_fabric_extender;" + c,
        "Cisco_cisco_Nexus_5000": s + "cisco.misc.nexus_5000;" + c,
        "Cisco_cisco_Nexus_7000": s + "cisco.misc.nexus_7000;" + c,
        "Cisco_cisco_octel": s + "cisco.misc.octel;" + c,
        "Cisco_cisco_ons15500": s + "cisco.misc.ons15500;" + c,
        "Cisco_cisco_optical_amplifier": s + "cisco.misc.optical_amplifier;" + c,
        "Cisco_cisco_optical_services_router": s + "cisco.routers.optical_services_router;" + c,
        "Cisco_cisco_optical_transport": s + "cisco.misc.optical_transport;" + c,
        "Cisco_cisco_pad": s + "cisco.misc.pad_2;" + c,
        "Cisco_cisco_pad_x": s + "cisco.misc.pad_1;" + c,
        "Cisco_cisco_page_icon": s + "cisco.misc.page_icon;strokeColor=#036897;",
        "Cisco_cisco_pbx": s + "cisco.misc.pbx;" + c,
        "Cisco_cisco_pbx_switch": s + "cisco.switches.pbx_switch;" + c,
        "Cisco_cisco_pc_adapter_card": s + "cisco.computers_and_peripherals.pc_adapter_card;" + c,
        "Cisco_cisco_pc_man": s + "cisco.people.pc_man;" + c,
        "Cisco_cisco_pc_routercard": s + "cisco.computers_and_peripherals.pc_routercard;" + c,
        "Cisco_cisco_pc_software": s + "cisco.misc.pc_software;" + c,
        "Cisco_cisco_pc_video": s + "cisco.misc.pc_video;" + c,
        "Cisco_cisco_phone_fax": s + "cisco.modems_and_phones.phone-fax;" + c,
        "Cisco_cisco_pix_firewall": s + "cisco.security.pix_firewall;" + c,
        "Cisco_cisco_pmc": s + "cisco.misc.pmc;" + c,
        "Cisco_cisco_programmable_switch": s + "cisco.switches.programmable_switch;" + c,
        "Cisco_cisco_protocol_translator": s + "cisco.misc.protocol_translator;" + c,
        "Cisco_cisco_pxf": s + "cisco.misc.pxf;" + c,
        "Cisco_cisco_radio_tower": s + "cisco.wireless.radio_tower;strokeColor=#036897",
        "Cisco_cisco_ratemux": s + "cisco.misc.ratemux;" + c,
        "Cisco_cisco_repeater": s + "cisco.misc.repeater;" + c,
        "Cisco_cisco_RF_modem": s + "cisco.modems_and_phones.rf_modem;" + c,
        "Cisco_cisco_router_firewall": s + "cisco.security.router_firewall;" + c,
        "Cisco_cisco_routerin_building": s + "cisco.routers.router_in_building;" + c,
        "Cisco_cisco_router_with_silicon_switch": s + "cisco.routers.router_with_silicon_switch;" + c,
        "Cisco_cisco_route_switch_processor": s + "cisco.misc.route_switch_processor;" + c,
        "Cisco_cisco_rpsrps": s + "cisco.misc.rpsrps;" + c,
        "Cisco_cisco_running_man": s + "cisco.people.running_man;" + c,
        "Cisco_cisco_sattelite_dish": s + "cisco.wireless.satellite_dish;" + c,
        "Cisco_cisco_sattelite": s + "cisco.wireless.satellite;" + c,
        "Cisco_cisco_scanner": s + "cisco.computers_and_peripherals.scanner;" + c,
        "Cisco_cisco_server_switch": s + "cisco.switches.server_switch;" + c,
        "Cisco_cisco_server_with_router": s + "cisco.servers.server_with_router;" + c,
        "Cisco_cisco_service_control": s + "cisco.misc.service_control;" + c,
        "Cisco_cisco_Service_Module": s + "cisco.controllers_and_modules.service_module;" + c,
        "Cisco_cisco_Service_router": s + "cisco.routers.service_router;" + c,
        "Cisco_cisco_Services": s + "cisco.misc.services;" + c,
        "Cisco_cisco_Set_top_box": s + "cisco.misc.set_top_box;" + c,
        "Cisco_cisco_simulitlayer_switch": s + "cisco.switches.simultilayer_switch;" + c,
        "Cisco_cisco_sip_proxy_werver": s + "cisco.servers.sip_proxy_server;" + c,
        "Cisco_cisco_sitting_woman": s + "cisco.people.sitting_woman;" + c,
        "Cisco_cisco_small_business": s + "cisco.buildings.small_business;" + c,
        "Cisco_cisco_small_hub": s + "cisco.hubs_and_gateways.small_hub;" + c,
        "Cisco_cisco_softphone": s + "cisco.modems_and_phones.softphone;" + c,
        "Cisco_cisco_softswitch_pgw_mgc": s + "cisco.switches.softswitch_pgw_mgc;" + c,
        "Cisco_cisco_software_based_server": s + "cisco.servers.software_based_server;" + c,
        "Cisco_cisco_speaker": s + "cisco.computers_and_peripherals.speaker;" + c,
        "Cisco_cisco_ssc": s + "cisco.misc.ssc;" + c,
        "Cisco_cisco_ssl_terminator": s + "cisco.misc.ssl_terminator;" + c,
        "Cisco_cisco_standard_host": s + "cisco.servers.standard_host;" + c,
        "Cisco_cisco_stb": s + "cisco.misc.stb;" + c,
        "Cisco_cisco_storage_router": s + "cisco.routers.storage_router;" + c,
        "Cisco_cisco_storage_server": s + "cisco.servers.storage_server;" + c,
        "Cisco_cisco_stp": s + "cisco.misc.stp;" + c,
        "Cisco_cisco_streamer": s + "cisco.misc.streamer;" + c,
        "Cisco_cisco_sun_workstation": s + "cisco.computers_and_peripherals.workstation;" + c,
        "Cisco_cisco_supercomputer": s + "cisco.computers_and_peripherals.supercomputer;" + c,
        "Cisco_cisco_svx": s + "cisco.misc.svx;" + c,
        "Cisco_cisco_system_controller": s + "cisco.controllers_and_modules.system_controller;" + c,
        "Cisco_cisco_tablet": s + "cisco.computers_and_peripherals.tablet;" + c,
        "Cisco_cisco_tape_array": s + "cisco.storage.tape_array;" + c,
        "Cisco_cisco_tdm_router": s + "cisco.routers.tdm_router;" + c,
        "Cisco_cisco_telecommuter_house_pc": s + "cisco.buildings.telecommuter_house_pc;" + c,
        "Cisco_cisco_telecommuter_house": s + "cisco.buildings.telecommuter_house;" + c,
        "Cisco_cisco_telecommuter_icon": s + "cisco.misc.telecommuter_icon;" + c,
        "Cisco_cisco_Telepresence_3200": s + "cisco.misc.telepresence;" + c,
        "Cisco_cisco_terminal": s + "cisco.computers_and_peripherals.terminal;" + c,
        "Cisco_cisco_token": s + "cisco.misc.token;strokeColor=#036897",
        "Cisco_cisco_TP_MCU": s + "cisco.misc.tp_mcu;" + c,
        "Cisco_cisco_transpath": s + "cisco.misc.transpath;" + c,
        "Cisco_cisco_truck": s + "cisco.misc.truck;" + c,
        "Cisco_cisco_turret": s + "cisco.misc.turret;" + c,
        "Cisco_cisco_tv": s + "cisco.misc.tv;" + c,
        "Cisco_cisco_ubr910": s + "cisco.misc.ubr910;" + c,
        "Cisco_cisco_umg_series": s + "cisco.misc.umg_series;" + c,
        "Cisco_cisco_unity_server": s + "cisco.servers.unity_server;" + c,
        "Cisco_cisco_universal_gateway": s + "cisco.hubs_and_gateways.universal_gateway;" + c,
        "Cisco_cisco_university": s + "cisco.buildings.university;" + c,
        "Cisco_cisco_upc": s + "cisco.computers_and_peripherals.upc;" + c,
        "Cisco_cisco_vault": s + "cisco.misc.vault;" + c,
        "Cisco_cisco_video_camera": s + "cisco.computers_and_peripherals.video_camera;" + c,
        "Cisco_cisco_vip": s + "cisco.misc.vip;" + c,
        "Cisco_cisco_virtual_layer_switch": s + "cisco.switches.virtual_layer_switch;" + c,
        "Cisco_cisco_virtual_switch_controller__vsc3000_": s + "cisco.controllers_and_modules.virtual_switch_controller_(vsc3000);" + c,
        "Cisco_cisco_voice_atm_switch": s + "cisco.switches.voice_atm_switch;" + c,
        "Cisco_cisco_voice_commserver": s + "cisco.servers.voice_commserver;" + c,
        "Cisco_cisco_voice_router": s + "cisco.routers.voice_router;" + c,
        "Cisco_cisco_voice_switch": s + "cisco.switches.voice_switch;" + c,
        "Cisco_cisco_vpn_concentrator": s + "cisco.misc.vpn_concentrator;" + c,
        "Cisco_cisco_vpn_gateway": s + "cisco.hubs_and_gateways.vpn_gateway;" + c,
        "Cisco_cisco_VSS": s + "cisco.misc.vss;" + c,
        "Cisco_cisco_wae": s + "cisco.misc.wae;" + c,
        "Cisco_cisco_wavelength_router": s + "cisco.routers.wavelength_router;" + c,
        "Cisco_cisco_web_browser": s + "cisco.computers_and_peripherals.web_browser;" + c,
        "Cisco_cisco_web_cluster": s + "cisco.storage.web_cluster;" + c,
        "Cisco_cisco_wi_fi_tag": s + "cisco.wireless.wi-fi_tag;" + c,
        "Cisco_cisco_wireless_bridge": s + "cisco.wireless.wireless_bridge;" + c,
        "Cisco_cisco_wireless_location_appliance": s + "cisco.wireless.wireless_location_appliance;" + c,
        "Cisco_cisco_wireless": s + "cisco.wireless.wireless;" + c,
        "Cisco_cisco_wireless_transport": s + "cisco.wireless.wireless_transport;" + c,
        "Cisco_cisco_wism": s + "cisco.misc.wism;" + c,
        "Cisco_cisco_wlan_controller": s + "cisco.wireless.wlan_controller;" + c,
        "Cisco_cisco_workgroup_director": s + "cisco.directors.workgroup_director;" + c,
        "Cisco_cisco_workgroup_switch": s + "cisco.switches.workgroup_switch;" + c,
        "Cisco_cisco_workstation": s + "cisco.computers_and_peripherals.workstation;" + c,
        "Cisco_cisco_www_server": s + "cisco.servers.www_server;" + c,
        "NET_PC": s + "networks.pc;fillColor=#29AAE1",
        "NET_Virtual-PC": s + "networks.virtual_pc;fillColor=#29AAE1",
        "NET_Terminal": s + "networks.terminal;fillColor=#29AAE1",
        "NET_DataPipe": s + "networks.bus;fillColor=#29AAE1",
        "NET_SlateDevice": s + "networks.tablet;fillColor=#29AAE1",
        "NET_TabletDevice": s + "networks.tablet;fillColor=#29AAE1",
        "NET_Laptop": s + "networks.laptop;fillColor=#29AAE1",
        "NET_PDA": s + "networks.mobile;fillColor=#29AAE1",
        "NET_CRTMonitor": s + "networks.monitor;fillColor=#29AAE1",
        "NET_LCDMonitor": s + "networks.monitor;fillColor=#29AAE1",
        "NET_RadioTower": s + "networks.radio_tower;fillColor=#29AAE1",
        "NET_ExternalHardDrive": s + "networks.external_storage;fillColor=#29AAE1",
        "NET_SatelliteDish": s + "networks.satellite_dish;fillColor=#29AAE1",
        "NET_Satellite": s + "networks.satellite;fillColor=#29AAE1",
        "NET_WirelessAccessPoint": s + "networks.radio_tower;fillColor=#29AAE1",
        "NET_RingNetwork": cs,
        "NET_Ethernet": cs,
        "NET_Server": s + "networks.server;fillColor=#29AAE1",
        "NET_Mainframe": s + "networks.mainframe;fillColor=#29AAE1",
        "NET_Router": s + "networks.wireless_hub;fillColor=#29AAE1",
        "NET_Switch": s + "networks.switch;fillColor=#29AAE1",
        "NET_Firewall": s + "networks.firewall;fillColor=#29AAE1",
        "NET_User": s + "networks.user_male;fillColor=#29AAE1",
        "NET_CommLink": s + "networks.comm_link_edge;fillColor=#29AAE1",
        "NET_SuperComputer": s + "networks.supercomputer;fillColor=#29AAE1",
        "NET_VirtualServer": s + "networks.virtual_server;fillColor=#29AAE1",
        "NET_Printer": s + "networks.printer;fillColor=#29AAE1",
        "NET_Scanner": s + "networks.scanner;fillColor=#29AAE1",
        "NET_Copier": s + "networks.copier;fillColor=#29AAE1",
        "NET_MultiFunctionMachine": s + "networks.copier;fillColor=#29AAE1",
        "NET_Projector": s + "networks.video_projector;fillColor=#29AAE1",
        "NET_ProjectorScreen": s + "networks.video_projector_screen;fillColor=#29AAE1",
        "NET_Bridge": s + "networks.router;fillColor=#29AAE1",
        "NET_Hub": s + "networks.hub;fillColor=#29AAE1",
        "NET_Modem": s + "networks.modem;fillColor=#29AAE1",
        "NET_Telephone": s + "signs.tech.telephone_5;fillColor=#29AAE1",
        "NET_CellPhone": s + "networks.mobile;fillColor=#29AAE1",
        "NET_SmartPhone": s + "networks.mobile;fillColor=#29AAE1",
        "NET_Camera": s + "signs.tech.camera_2;fillColor=#29AAE1",
        "RackServerRack": s + "rackGeneral.container;container=1;collapsible=0;childLayout=rack;marginLeft=9;marginRight=9;marginTop=21;marginBottom=22;textColor=#000000;numDisp=off",
        "RackBlank": s + "rackGeneral.plate;strokeColor=#666666;labelPosition=left;align=right;spacingRight=15;fillColor=#e8e8e8",
        "RackRaidArray": s + "rack.cisco.cisco_carrier_packet_transport_50;labelPosition=left;align=right;spacingRight=15",
        "RackServer": s + "rack.oracle.sunfire_x4100;labelPosition=left;align=right;spacingRight=15",
        "RackEthernetSwitch": s + "rack.cisco.cisco_nexus_3016_switch;labelPosition=left;align=right;spacingRight=15",
        "RackPatchPanel": s + "rack.general.cat5e_rack_mount_patch_panel_24_ports;strokeColor=#666666;labelPosition=left;align=right;spacingRight=15",
        "RackRouter": s + "rack.cisco.cisco_asr_1001_router;labelPosition=left;align=right;spacingRight=15",
        "RackMonitor": s + "rack.ibm.ibm_1u_flat_panel_console_kit;labelPosition=left;align=right;spacingRight=15",
        "RackKeyboard": s + "rack.cisco.cisco_1905_serial_integrated_services_router;labelPosition=left;align=right;spacingRight=15",
        "RackPowerStrip": s + "rack.dell.power_strip;labelPosition=left;align=right;spacingRight=15",
        "RackPowerSupply": s + "rack.cisco.cisco_web_security_appliance_s170;labelPosition=left;align=right;spacingRight=15",
        "RackBridge": s + "rack.cisco.cisco_nexus_5548p_switch;labelPosition=left;align=right;spacingRight=15",
        "RackTapeDrive": s + "rack.ibm.ibm_1754_local_console_manager;labelPosition=left;align=right;spacingRight=15",
        "Image_network_server": "image;image=img/lib/clip_art/computers/Server_Tower_128x128.png;flipH=1",
        "Image_network_server_file": "image;image=img/lib/clip_art/computers/Server_128x128.png",
        "Image_network_server_net": "image;image=img/lib/clip_art/networking/Print_Server_128x128.png",
        "Image_network_server_net_large": "image;image=img/lib/clip_art/computers/Server_128x128.png",
        "Image_network_raid": "image;image=img/lib/clip_art/computers/Server_Tower_128x128.png;flipH=1",
        "Image_network_raid_large": "image;image=img/lib/clip_art/computers/Server_Tower_128x128.png;flipH=1",
        "Image_network_rack_server": "image;image=img/lib/clip_art/computers/Server_Rack_128x128.png",
        "Image_network_rack_tape": "image;image=img/lib/clip_art/computers/Server_Rack_Partial_128x128.png",
        "Image_network_printer_small": "image;image=img/lib/clip_art/computers/Printer_128x128.png;flipH=1",
        "Image_network_printer_large": "image;image=img/lib/clip_art/computers/Printer_128x128.png;flipH=1",
        "Image_network_printer_multipurpose": "image;image=img/lib/clip_art/computers/Printer_Commercial_128x128.png;flipH=1",
        "Image_network_copier_small": "image;image=img/lib/clip_art/computers/Printer_Commercial_128x128.png",
        "Image_network_copier_large": "image;image=img/lib/clip_art/computers/Printer_Commercial_128x128.png",
        "Image_network_router": "image;image=img/lib/clip_art/networking/Router_128x128.png",
        "Image_network_router_wireless": "image;image=img/lib/clip_art/networking/Wireless_Router_128x128.png",
        "Image_network_ups": "image;image=img/lib/clip_art/networking/UPS_128x128.png",
        "Image_electronics_lcd": "image;image=img/lib/clip_art/computers/Monitor_128x128.png",
        "Image_electronics_pda": "image;image=img/lib/clip_art/telecommunication/Palm_Treo_128x128.png",
        "Image_electronics_drive_cardreader": "image;image=img/lib/clip_art/finance/Credit_Card_128x128.png",
        "Image_electronics_camcorder": "image;image=img/lib/clip_art/networking/Ip_Camera_128x128.png",
        "Image_electronics_printer_photo": "image;image=img/lib/clip_art/computers/Printer_128x128.png;flipH=1",
        "Image_electronics_drive_firewire": "image;image=img/lib/clip_art/computers/Harddrive_128x128.png;flipH=1",
        "Image_electronics_drive_usb": "image;image=img/lib/clip_art/computers/Harddrive_128x128.png;flipH=1",
        "Image_electronics_modem_external": "image;image=img/lib/clip_art/networking/Modem_128x128.png;flipH=1",
        "Image_electronics_lcd_wide": "image;image=img/lib/clip_art/computers/Monitor_128x128.png",
        "EE_Amplifier": s + "electrical.abstract.amplifier",
        "EE_OpAmp": cs,
        "EE_ControlledAmp": s + "electrical.abstract.controlled_amplifier",
        "EE_Multiplexer": s + "electrical.abstract.mux",
        "EE_Demultiplexer": s + "electrical.abstract.demux;",
        "EE_Capacitor1": s + "electrical.capacitors.capacitor_1",
        "EE_Capacitor2": s + "electrical.capacitors.capacitor_3",
        "EE_Diode": s + "electrical.diodes.diode",
        "EE_Resistor": s + "electrical.resistors.resistor_2",
        "EE_VarResistor": s + "electrical.resistors.variable_resistor_2",
        "EE_Potentiometer": s + "electrical.resistors.potentiometer_2",
        "EE_ProtGround": s + "electrical.signal_sources.protective_earth",
        "EE_SignalGround": s + "electrical.signal_sources.signal_ground",
        "EE_Transformer": s + "electrical.inductors.transformer_1",
        "EE_Inductor": s + "electrical.inductors.inductor_3",
        "EE_Variable Inductor": s + "electrical.inductors.variable_inductor",
        "EE_TwoWaySwitch": s + "electrical.electro-mechanical.2-way_switch",
        "EE_OnOffSwitch": s + "electrical.electro-mechanical.simple_switch",
        "EE_Loudspeaker": s + "electrical.electro-mechanical.loudspeaker",
        "EE_Motor": s + "electrical.electro-mechanical.motor_1",
        "EE_LED1": s + "electrical.opto_electronics.led_2",
        "EE_Lightbulb": s + "electrical.miscellaneous.light_bulb",
        "EE_AcSource": s + "electrical.signal_sources.ac_source;strokeWidth=1",
        "EE_VoltageSource": s + "electrical.signal_sources.dc_source_3",
        "EE_CurrentSource": s + "electrical.signal_sources.dc_source_2;direction=north",
        "EE_ControlledCurrentSource": s + "electrical.signal_sources.dependent_source_2;direction=west",
        "EE_ControlledVoltageSource": s + "electrical.signal_sources.dependent_source_3",
        "EE_DcSource1": s + "electrical.miscellaneous.monocell_battery;flipH=1;verticalLabelPosition=bottom;verticalAlign=top",
        "EE_DcSource2": s + "electrical.miscellaneous.multicell_battery;flipH=1;verticalLabelPosition=bottom;verticalAlign=top",
        "EE_Vss": s + "electrical.signal_sources.vss2;verticalLabelPosition=top;verticalAlign=bottom;fontSize=24",
        "EE_Vdd": s + "electrical.signal_sources.vdd;verticalLabelPosition=bottom;verticalAlign=top",
        "EE_BJT_NPN1": s + "electrical.transistors.pnp_transistor_1",
        "EE_BJT_PNP1": s + "electrical.transistors.npn_transistor_1",
        "EE_JFET_P": s + "electrical.transistors.p-channel_jfet_1;flipV=1",
        "EE_JFET_N": s + "electrical.transistors.n-channel_jfet_1",
        "EE_MOSFET_P1": s + "electrical.mosfets1.mosfet_ic_p;flipV=1",
        "EE_MOSFET_P2": s + "electrical.mosfets1.mosfet_p_no_bulk",
        "EE_MOSFET_P3": s + "electrical.mosfets1.p-channel_mosfet_1;flipV=1",
        "EE_MOSFET_N1": s + "electrical.mosfets1.mosfet_ic_n",
        "EE_MOSFET_N2": s + "electrical.mosfets1.mosfet_n_no_bulk",
        "EE_MOSFET_N3": s + "electrical.mosfets1.n-channel_mosfet_1",
        "EE_AND": s + "electrical.logic_gates.and",
        "EE_OR": s + "electrical.logic_gates.or",
        "EE_Inverter": s + "electrical.logic_gates.inverter",
        "EE_NAND": s + "electrical.logic_gates.nand",
        "EE_NOR": s + "electrical.logic_gates.nor",
        "EE_XOR": s + "electrical.logic_gates.xor",
        "EE_NXOR": s + "electrical.logic_gates.xnor",
        "EE_DTypeRSFlipFlop": s + "electrical.logic_gates.d_type_rs_flip-flop",
        "EE_DTypeFlipFlop": s + "electrical.logic_gates.d_type_flip-flop",
        "EE_DTypeFlipFlopWithClear": s + "electrical.logic_gates.d_type_flip-flop_with_clear",
        "EE_RSLatch": s + "electrical.logic_gates.rs_latch",
        "EE_SyncRSLatch": s + "electrical.logic_gates.synchronous_rs_latch",
        "EE_TTypeFlipFlop": s + "electrical.logic_gates.t_type_flip-flop",
        "EE_Plus": s + "ios7.misc.flagged",
        "EE_Negative": "shape=line",
        "EE_InverterContact": "shape=ellipse",
        "EE_Voltmeter": s + "electrical.instruments.voltmeter",
        "EE_Ammeter": s + "electrical.instruments.ampermeter",
        "EE_SineWave": s + "electrical.waveforms.sine_wave",
        "EE_Sawtooth": s + "electrical.waveforms.sawtooth",
        "EE_SquareWave": s + "electrical.waveforms.square_wave",
        "EIChannelBlock": s + "eip.messageChannel;verticalLabelPosition=bottom;verticalAlign=top",
        "EIMessageChannelBlock": cs,
        "EIMessageBlock": cs,
        "EIMessageRouterBlock": s + "eip.content_based_router;verticalLabelPosition=bottom;verticalAlign=top",
        "EIMessageTranslatorBlock": s + "eip.message_translator;verticalLabelPosition=bottom;verticalAlign=top",
        "EIMessageEndpointBlock": cs,
        "EIPublishSubscribeChannelBlock": cs,
        "EIDatatypeChannelBlock": cs,
        "EIInvalidMessageChannelBlock": cs,
        "EIDeadLetterChannelBlock": cs,
        "EIGuaranteedDeliveryBlock": cs,
        "EIChannelAdapterBlock": cs,
        "EIMessagingBridgeBlock": s + "eip.messaging_bridge;verticalLabelPosition=bottom;verticalAlign=top",
        "EIMessageBusBlock": cs,
        "EICommandMessageBlock": cs,
        "EIDocumentMessageBlock": cs,
        "EIEventMessageBlock": cs,
        "EIRequestReplyBlock": cs,
        "EIReturnAddressBlock": cs,
        "EICorrelationIDBlock": cs,
        "EIMessageSequenceBlock": cs,
        "EIMessageExpirationBlock": cs,
        "EIContentBasedRouterBlock": s + "eip.content_based_router;verticalLabelPosition=bottom;verticalAlign=top",
        "EIMessageFilterBlock": s + "eip.message_filter;verticalLabelPosition=bottom;verticalAlign=top",
        "EIDynamicRouterBlock": s + "eip.dynamic_router;verticalLabelPosition=bottom;verticalAlign=top",
        "EIRecipientListBlock": s + "eip.recipient_list;verticalLabelPosition=bottom;verticalAlign=top",
        "EISplitterBlock": s + "eip.splitter;verticalLabelPosition=bottom;verticalAlign=top",
        "EIAggregatorBlock": s + "eip.aggregator;verticalLabelPosition=bottom;verticalAlign=top",
        "EIResequencerBlock": s + "eip.resequencer;verticalLabelPosition=bottom;verticalAlign=top",
        "EIComposedMessageBlock": s + "eip.composed_message_processor;verticalLabelPosition=bottom;verticalAlign=top",
        "EIRoutingSlipBlock": s + "eip.routing_slip;verticalLabelPosition=bottom;verticalAlign=top",
        "EIProcessManagerBlock": s + "eip.process_manager;verticalLabelPosition=bottom;verticalAlign=top",
        "EIMessageBrokerBlock": cs,
        "EIEnvelopeWrapperBlock": s + "eip.envelope_wrapper;verticalLabelPosition=bottom;verticalAlign=top",
        "EIContentEnricherBlock": s + "eip.content_enricher;verticalLabelPosition=bottom;verticalAlign=top",
        "EIContentFilterBlock": s + "eip.content_filter;verticalLabelPosition=bottom;verticalAlign=top",
        "EIClaimCheckBlock": s + "eip.claim_check;verticalLabelPosition=bottom;verticalAlign=top",
        "EINormalizerBlock": s + "eip.normalizer;verticalLabelPosition=bottom;verticalAlign=top",
        "EIMessagingGatewayBlock": s + "eip.messaging_gateway;verticalLabelPosition=bottom;verticalAlign=top",
        "EITransactionalClientBlock": s + "eip.transactional_client;verticalLabelPosition=bottom;verticalAlign=top",
        "EIPollingConsumerBlock": s + "eip.polling_consumer;verticalLabelPosition=bottom;verticalAlign=top",
        "EIEventDrivenConsumerBlock": s + "eip.event_driven_consumer;verticalLabelPosition=bottom;verticalAlign=top",
        "EICompetingConsumersBlock": s + "eip.competing_consumers;verticalLabelPosition=bottom;verticalAlign=top",
        "EIMessageDispatcherBlock": s + "eip.message_dispatcher;verticalLabelPosition=bottom;verticalAlign=top",
        "EISelectiveConsumerBlock": s + "eip.selective_consumer;verticalLabelPosition=bottom;verticalAlign=top",
        "EIDurableSubscriberBlock": cs,
        "EIServiceActivatorBlock": s + "eip.service_activator;verticalLabelPosition=bottom;verticalAlign=top",
        "EIControlBusBlock": cs,
        "EIDetourBlock": s + "eip.detour;verticalLabelPosition=bottom;verticalAlign=top",
        "EIWireTapBlock": s + "eip.wire_tap;verticalLabelPosition=bottom;verticalAlign=top",
        "EIMessageHistoryBlock": cs,
        "EIMessageStoreBlock": s + "eip.message_store;verticalLabelPosition=bottom;verticalAlign=top",
        "EISmartProxyBlock": s + "eip.smart_proxy;verticalLabelPosition=bottom;verticalAlign=top",
        "EITestMessageBlock": s + "eip.test_message;verticalLabelPosition=bottom;verticalAlign=top",
        "EIChannelPurgerBlock": s + "eip.channel_purger;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconComputeEngineBlock": ss + "gcp.compute.compute_engine;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconAppEngineBlock": ss + "gcp.compute.app_engine;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconContainerEngineBlock": ss + "gcp.compute.container_engine;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconContainerRegistryBlock": ss + "gcp.compute.container_registry;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudFunctionsBlock": ss + "gcp.compute.cloud_functions;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudStorageBlock": ss + "gcp.storage_databases.cloud_storage;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudSQLBlock": ss + "gcp.storage_databases.cloud_sql;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudBigtableBlock": ss + "gcp.storage_databases.cloud_bigtable;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudDatastoreBlock": ss + "gcp.storage_databases.cloud_datastore;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconPersistentDiskBlock": ss + "gcp.storage_databases.persistent_disk;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudVirtualNetworkBlock": ss + "gcp.networking.cloud_virtual_network;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudLoadBalancingBlock": ss + "gcp.networking.cloud_load_balancing;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudCDNBlock": ss + "gcp.networking.cloud_cdn;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudInterconnectBlock": ss + "gcp.networking.cloud_interconnect;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudDNSBlock": ss + "gcp.networking.cloud_dns;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconBigQueryBlock": ss + "gcp.big_data.bigquery;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudDataflowBlock": ss + "gcp.big_data.cloud_dataflow;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudDataprocBlock": ss + "gcp.big_data.cloud_dataproc;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudDatalabBlock": ss + "gcp.big_data.cloud_datalab;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudPubSubBlock": ss + "gcp.big_data.cloud_pubsub;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconGenomicsBlock": ss + "gcp.big_data.genomics;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudMachineLearningServicesBlock": ss + "gcp.machine_learning.cloud_machine_learning;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconVisionAPIBlock": ss + "gcp.machine_learning.vision_api;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconSpeechAPIBlock": ss + "gcp.machine_learning.speech_api;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconNaturalLanguageAPIBlock": ss + "gcp.machine_learning.natural_language_api;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconTranslateAPIBlock": ss + "gcp.machine_learning.translation_api;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconStackdriverOverviewBlock": ss + "gcp.management_tools.stackdriver;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconMonitoringBlock": ss + "gcp.management_tools.monitoring;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconErrorReportingBlock": ss + "gcp.management_tools.error_reporting;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconTraceBlock": ss + "gcp.management_tools.trace;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconDebuggerBlock": ss + "gcp.management_tools.debugger;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconDeploymentManagerBlock": ss + "gcp.management_tools.deployment_manager;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudEndpointsBlock": ss + "gcp.management_tools.cloud_endpoints;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudToolsForPowerShellBlock": ss + "gcp.developer_tools.cloud_tools_for_powershell;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudToolsForVisualStudioBlock": ss + "gcp.developer_tools.cloud_tools_for_visual_studio;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconCloudIAMBlock": ss + "gcp.identity_and_security.cloud_iam;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconGCPLogoBlock": ss + "gcp.extras.generic_gcp;verticalLabelPosition=bottom;verticalAlign=top",
        "GCPIconBlankBlock": ss + "gcp.extras.blue_hexagon;verticalLabelPosition=bottom;verticalAlign=top",
        "Equation": cs,
        "fpWall": "",
        "fpWindow": s + "floorplan.window",
        "fpOpening": "shape=rect",
        "fpDoor": cs,
        "fpDoubleDoor": cs,
        "fpStairs": s + "floorplan.stairs;direction=north",
        "fpStairsDirectional": s + "floorplan.stairs;direction=north;verticalAlign=bottom",
        "fpDeskLongSegment": "",
        "fpDeskShortSegment": "",
        "fpDeskLargeCornerSegment": s + "floorplan.desk_corner",
        "fpCubiclePanel": s + "floorplan.wall;wallThickness=3",
        "fpCubicleWorkstation": s + "floorplan.wallU;wallThickness=3",
        "fpCubicleCorner5x5": s + "floorplan.wallCorner;wallThickness=3",
        "fpCubicleCorner6x6": s + "floorplan.wallCorner;wallThickness=3",
        "fpCubicleCorner8x8": s + "floorplan.wallCorner;wallThickness=3",
        "fpCubicleCorner8x6": s + "floorplan.wallCorner;wallThickness=3",
        "fpCubicleCornerOpen6x4": s + "floorplan.wallCorner;wallThickness=3",
        "fpCubicleDouble14x8": s + "floorplan.wallU;wallThickness=3",
        "fpCubicleEnclosed11x9": s + "floorplan.wallU;wallThickness=3",
        "fpTableConferenceOval": "shape=ellipse",
        "fpTableConferenceBoat": "",
        "fpTableConferenceRectangle": "",
        "fpTableDiningRound": "shape=ellipse",
        "fpTableDiningSquare": "",
        "fpChairOffice": s + "floorplan.office_chair",
        "fpChairExecutive": s + "floorplan.office_chair",
        "fpChairLobby": s + "floorplan.office_chair",
        "fpChairDining": s + "floorplan.chair",
        "fpChairBarstool": "shape=ellipse",
        "fpCabinetBasic": "",
        "fpCabinetDoubleWide": "",
        "fpCabinetDoubleWithShelves": "",
        "fpCabinetShelvesBasic": "",
        "fpCabinetShelvesDouble": "",
        "fpCabinetBasicWithShelves": "",
        "fpCabinetsAboveDeskShelves": "",
        "fpRestroomToiletPrivate": s + "floorplan.toilet",
        "fpRestroomToiletPublic": s + "floorplan.toilet",
        "fpRestroomLights": cs,
        "fpRestroomSinks": cs,
        "fpRestroomBathtub": s + "floorplan.bathtub;direction=south",
        "fpRestroomShower": s + "floorplan.shower;flipH=1",
        "fpRestroomPedastalSink": s + "floorplan.sink_1",
        "fpRestroomCountertop": "",
        "fpRestroomMirror": "shape=line;strokeWidth=3",
        "fpRestroomStalls": cs,
        "fpBedDouble": s + "floorplan.bed_double",
        "fpBedSingle": s + "floorplan.bed_single",
        "fpBedQueen": s + "floorplan.bed_double",
        "fpBedKing": s + "floorplan.bed_double",
        "fpBedDoubleWithTrundle": s + "floorplan.bed_double",
        "fpBedBunk": s + "floorplan.bed_double",
        "fpBedBassinet": s + "pid.fittings.compensator",
        "fpApplianceWasher": "",
        "fpApplianceDryer": "",
        "fpApplianceWaterHeater": "shape=ellipse",
        "fpApplianceStoveOven": s + "floorplan.range_1",
        "fpStoveOvenSixBurner": s + "floorplan.range_2",
        "fpApplianceDishwasher": "",
        "fpKitchenSink": s + "floorplan.sink_2",
        "fpKitchenDoubleSink": s + "floorplan.sink_double",
        "fpKitchenCountertop": "",
        "fpKitchenCountertopCorner": s + "floorplan.desk_corner",
        "fpCouchLoveSeat": s + "floorplan.couch",
        "fpCouchSofa": s + "floorplan.couch",
        "fpCouchOttoman": "",
        "fpMiscDesktopComputer": s + "floorplan.workstation",
        "fpMiscLaptopComputer": s + "floorplan.laptop",
        "fpComputerMonitor": s + "floorplan.flat_tv",
        "fpCRTTelevision": s + "floorplan.flat_tv",
        "fpMiscIndoorPlant": s + "floorplan.plant",
        "fpPiano": s + "floorplan.piano",
        "PEAxialCompressor": s + "pid.compressors.centrifugal_compressor_-_turbine_driven;verticalLabelPosition=bottom;verticalAlign=top",
        "PECentrifugalCompressor": s + "pid.compressors.centrifugal_compressor;verticalLabelPosition=bottom;verticalAlign=top",
        "PECentrifugalCompressor2": s + "pid.compressors.centrifugal_compressor_-_turbine_driven;verticalLabelPosition=bottom;verticalAlign=top",
        "PEReciprocationCompressor": s + "pid.compressors.reciprocating_compressor;verticalLabelPosition=bottom;verticalAlign=top",
        "PERotaryCompressorBlock": s + "pid.compressors.rotary_compressor;verticalLabelPosition=bottom;verticalAlign=top",
        "PERotaryCompressor2Block": s + "pid.compressors.compressor_and_silencers;verticalLabelPosition=bottom;verticalAlign=top",
        "PEConveyorBlock": s + "pid2misc.conveyor;verticalLabelPosition=bottom;verticalAlign=top",
        "PEElevator1Block": s + "pid.misc.bucket_elevator;flipH=1;verticalLabelPosition=bottom;verticalAlign=top",
        "PEAgitatorMixerBlock": s + "pid.agitators.agitator_(propeller);verticalLabelPosition=bottom;verticalAlign=top",
        "PEDrumBlock": s + "pid.vessels.drum_or_condenser;verticalLabelPosition=bottom;verticalAlign=top",
        "PETankEquipmentBlock": s + "pid.vessels.tank;verticalLabelPosition=bottom;verticalAlign=top",
        "PEMixingReactorBlock": s + "pid.vessels.mixing_reactor;verticalLabelPosition=bottom;verticalAlign=top",
        "PEPlateTowerBlock": s + "pid2misc.column;columnType=baffle;verticalLabelPosition=bottom;verticalAlign=top",
        "PEPackedTowerBlock": s + "pid2misc.column;columnType=fixed;verticalLabelPosition=bottom;verticalAlign=top",
        "PEFurnaceBlock": s + "pid.vessels.furnace;verticalLabelPosition=bottom;verticalAlign=top",
        "PEOneToMany": cs,
        "PEMultilines": cs,
        "PEMidArrow": "shape=triangle;anchorPointDirection=0",
        "PEButtWeld": s + "sysml.x",
        "PETopToTop": s + "pid.vessels.container,_tank,_cistern",
        "PENuclear": s + "electrical.waveforms.sine_wave",
        "PEMechanicalLink": "shape=ellipse",
        "PESolderedSolvent": "shape=ellipse",
        "PEDoubleContainment": "shape=hexagon;perimeter=hexagonPerimeter2",
        "PEFlange": s + "pid.piping.double_flange",
        "PEFlange2": s + "pid.piping.flange_in;flipH=1",
        "PEEndCap": s + "pid.piping.cap",
        "PEEndCap2": s + "pid.vessels.container,_tank,_cistern;direction=north",
        "PEBreather": s + "pid.piping.breather",
        "PEElectronicallyInsulated": s + "pid.piping.double_flange",
        "PEReducer": s + "pid.piping.concentric_reducer",
        "PEInlineMixer": s + "pid.piping.in-line_mixer",
        "PEFlameArrester": s + "pid.piping.flame_arrestor",
        "PEDetonationArrester": s + "pid.piping.detonation_arrestor",
        "PETriangleSeparator": "shape=triangle;direction=west;anchorPointDirection=0",
        "PETundish": s + "ios7.misc.left",
        "PEOpenVent": s + "pid.vessels.vent_(bent)",
        "PERemovableSpool": s + "pid.piping.removable_spool",
        "PEYTypeStrainer": s + "pid.piping.y-type_strainer",
        "PEDiverterValve": s + "pid.piping.diverter_valve",
        "PEPulsationDampener": s + "pid.piping.pulsation_dampener",
        "PEDuplexStrainer": s + "pid.piping.duplex_strainer",
        "PEBasketStrainer": s + "pid.piping.basket_strainer",
        "PEVentSilencer": s + "pid.piping.vent_silencer",
        "PEInlineSilencer": s + "pid.piping.in-line_silencer",
        "PESteamTrap": s + "pid.piping.steam_trap",
        "PEDesuperheater": s + "pid.piping.desuper_heater",
        "PEEjectorOrEductor": s + "pid.fittings.injector",
        "PEExhaustHead": s + "pid.piping.exhaust_head",
        "PERotaryValve": s + "pid.piping.rotary_valve",
        "PEExpansionJoint": s + "pid.piping.expansion_joint",
        "PEVesselBlock": cs,
        "PEOpenTankBlock": s + "pid.vessels.container,_tank,_cistern;verticalLabelPosition=bottom;verticalAlign=top",
        "PEOpenTopTank": s + "pid.vessels.container,_tank,_cistern;verticalLabelPosition=bottom;verticalAlign=top",
        "PEClosedTankBlock": cs,
        "PEStorageSphereBlock": s + "pid.vessels.storage_sphere;verticalLabelPosition=bottom;verticalAlign=top",
        "PEColumnBlock": cs,
        "PEBagBlock": s + "pid.vessels.bag;verticalLabelPosition=bottom;verticalAlign=top",
        "PEGasCylinderBlock": s + "pid.vessels.gas_bottle;verticalLabelPosition=bottom;verticalAlign=top",
        "PEGasHolderBlock": s + "pid.vessels.gas_holder;verticalLabelPosition=bottom;verticalAlign=top",
        "PEClarifierBlock": s + "pid.vessels.bunker_(conical_bottom);verticalLabelPosition=bottom;verticalAlign=top",
        "PETankBlock": s + "pid.vessels.tank_(conical_roof);verticalLabelPosition=bottom;verticalAlign=top",
        "PETrayColumnBlock": s + "pid2misc.column;columnType=tray;verticalLabelPosition=bottom;verticalAlign=top",
        "PEReactionVesselBlock": s + "pid.vessels.reactor",
        "PEBin": s + "pid.vessels.tank_(conical_bottom)",
        "PEDomeRoofTank": s + "pid.vessels.tank_(dished_roof)",
        "PEConeRoofTank": s + "pid.vessels.tank_(conical_roof)",
        "PEBoilerBlock": s + "pid.misc.boiler_(dome);verticalLabelPosition=bottom;verticalAlign=top",
        "PEEquipmentBoilerBlock": s + "pid.misc.boiler_(dome);verticalLabelPosition=bottom;verticalAlign=top",
        "PEReboilerBlock": s + "pid.heat_exchangers.reboiler;verticalLabelPosition=bottom;verticalAlign=top",
        "PECondenserBlock": s + "pid.heat_exchangers.heat_exchanger_(straight_tubes);verticalLabelPosition=bottom;verticalAlign=top",
        "PEEquipmentCondenserBlock": s + "pid.heat_exchangers.condenser;verticalLabelPosition=bottom;verticalAlign=top",
        "PECoolingTowerBlock": s + "pid.misc.cooling_tower;verticalLabelPosition=bottom;verticalAlign=top",
        "PEHeatExchangerBlock": s + "pid.heat_exchangers.shell_and_tube_heat_exchanger_1;verticalLabelPosition=bottom;verticalAlign=top",
        "PEHairpinExchangerBlock": s + "pid.heat_exchangers.hairpin_exchanger;verticalLabelPosition=bottom;verticalAlign=top",
        "PEPlateAndFrameHeatExchangerBlock": s + "pid.heat_exchangers.plate_and_frame_heat_exchanger;verticalLabelPosition=bottom;verticalAlign=top",
        "PESpiralHeatExchanger": s + "pid.heat_exchangers.spiral_heat_exchanger;verticalLabelPosition=bottom;verticalAlign=top",
        "PEUTubeHeatExchangerBlock": s + "pid.heat_exchangers.u-tube_heat_exchanger;verticalLabelPosition=bottom;verticalAlign=top",
        "PEDoublePipeHeatBlock": s + "pid.heat_exchangers.double_pipe_heat_exchanger;verticalLabelPosition=bottom;verticalAlign=top",
        "PEShellAndTubeHeat1Block": s + "pid.heat_exchangers.shell_and_tube_heat_exchanger_1;verticalLabelPosition=bottom;verticalAlign=top",
        "PEShellAndTubeHeat2Block": s + "pid.heat_exchangers.shell_and_tube_heat_exchanger_2;verticalLabelPosition=bottom;verticalAlign=top",
        "PEShellAndTubeHeat3Block": s + "pid.heat_exchangers.shell_and_tube_heat_exchanger_1;direction=north;verticalLabelPosition=bottom;verticalAlign=top",
        "PESinglePassHeatBlock": s + "pid.heat_exchangers.single_pass_heat_exchanger;verticalLabelPosition=bottom;verticalAlign=top",
        "PEHeaterBlock": s + "pid.heat_exchangers.heater",
        "PEEjectorInjectorBlock": s + "pid.fittings.injector;verticalLabelPosition=bottom;verticalAlign=top",
        "PECompressorTurbineBlock": cs,
        "PEMotorDrivenTurbineBlock": cs,
        "PECentrifugalPumpBlock": s + "pid.pumps.gas_blower;flipH=1;verticalLabelPosition=bottom;verticalAlign=top",
        "PECentrifugalPump": s + "pid.pumps.centrifugal_pump_1;verticalLabelPosition=bottom;verticalAlign=top",
        "PECentrifugalPump2": s + "pid.pumps.centrifugal_pump_2;verticalLabelPosition=bottom;verticalAlign=top",
        "PECentrifugalPump3": s + "pid.pumps.centrifugal_pump_1;flipH=1;verticalLabelPosition=bottom;verticalAlign=top",
        "PEGearPumpBlock": s + "pid.pumps.gear_pump;verticalLabelPosition=bottom;verticalAlign=top",
        "PEHorizontalPump": s + "pid.pumps.horizontal_pump;verticalLabelPosition=bottom;verticalAlign=top",
        "PEProgressiveCavityPump": s + "pid.pumps.cavity_pump;flipH=1;flipV=1;verticalLabelPosition=bottom;verticalAlign=top",
        "PEScrewPump": s + "pid.pumps.screw_pump;verticalLabelPosition=bottom;verticalAlign=top",
        "PEScrewPump2": s + "pid.pumps.screw_pump_2;flipH=1;verticalLabelPosition=bottom;verticalAlign=top",
        "PESumpPump": s + "pid.pumps.sump_pump;verticalLabelPosition=bottom;verticalAlign=top",
        "PEVacuumPump": s + "pid.pumps.vacuum_pump;verticalLabelPosition=bottom;verticalAlign=top",
        "PEVerticalPump": s + "pid.pumps.vertical_pump;verticalLabelPosition=bottom;verticalAlign=top",
        "PEVerticalPump2": s + "pid.pumps.vertical_pump;verticalLabelPosition=bottom;verticalAlign=top",
        "PEIndicatorBlock": cs,
        "PEIndicator2Block": cs,
        "PEIndicator3Block": s + "pid2inst.discInst;mounting=field",
        "PEIndicator4Block": s + "pid2inst.indicator;mounting=field;indType=inst",
        "PESharedIndicatorBlock": cs,
        "PESharedIndicator2Block": cs,
        "PEComputerIndicatorBlock": cs,
        "PEProgrammableIndicatorBlock": cs,
        "PEGateValveBlock": cs,
        "PEGlobeValveBlock": cs,
        "PEControlValveBlock": s + "pid2valves.valve;valveType=gate;actuator=diaph;verticalLabelPosition=bottom;verticalAlign=top",
        "PENeedleValveBlock": s + "pid2valves.valve;valveType=needle;verticalLabelPosition=bottom;verticalAlign=top",
        "PEButterflyValve2Block": s + "pid2valves.valve;flipH=1;valveType=butterfly;verticalLabelPosition=bottom;verticalAlign=top",
        "PEBallValveBlock": s + "pid2valves.valve;valveType=ball;verticalLabelPosition=bottom;verticalAlign=top",
        "PEDiaphragmBlock": s + "pid2valves.valve;valveType=ball;verticalLabelPosition=bottom;verticalAlign=top",
        "PEPlugValveBlock": s + "pid2valves.valve;valveType=ball;verticalLabelPosition=bottom;verticalAlign=top",
        "PECheckValveBlock": s + "pid2valves.valve;valveType=check;verticalLabelPosition=bottom;verticalAlign=top",
        "PECheckValve2Block": s + "pid2valves.valve;valveType=check;verticalLabelPosition=bottom;verticalAlign=top",
        "PEAngleValveBlock": cs,
        "PEAngleGlobeValveBlock": cs,
        "PEPoweredValveBlock": cs,
        "PEFloatOperatedValveBlock": s + "pid2valves.valve;valveType=gate;actuator=singActing;verticalLabelPosition=bottom;verticalAlign=top",
        "PENeedleValve2Block": s + "pid2valves.valve;valveType=needle;verticalLabelPosition=bottom;verticalAlign=top",
        "PEThreeWayValveBlock": s + "pid2valves.valve;valveType=threeWay;actuator=none;verticalLabelPosition=bottom;verticalAlign=top",
        "PEBleederValveBlock": s + "pid2valves.blockBleedValve;actuator=none;verticalLabelPosition=bottom;verticalAlign=top",
        "PERotameterBlock": s + "pid.flow_sensors.rotameter;flipH=1;verticalLabelPosition=bottom;verticalAlign=top",
        "VennGradientColor1": "shape=ellipse;fillOpacity=35",
        "VennGradientColor2": "shape=ellipse;fillOpacity=35",
        "VennGradientColor3": "shape=ellipse;fillOpacity=35",
        "VennGradientColor4": "shape=ellipse;fillOpacity=35",
        "VennGradientColor5": "shape=ellipse;fillOpacity=35",
        "VennGradientColor6": "shape=ellipse;fillOpacity=35",
        "VennGradientColor7": "shape=ellipse;fillOpacity=35",
        "VennGradientColor8": "shape=ellipse;fillOpacity=35",
        "VennPlainColor1": "shape=ellipse;fillOpacity=35",
        "VennPlainColor2": "shape=ellipse;fillOpacity=35",
        "VennPlainColor3": "shape=ellipse;fillOpacity=35",
        "VennPlainColor4": "shape=ellipse;fillOpacity=35",
        "VennPlainColor5": "shape=ellipse;fillOpacity=35",
        "VennPlainColor6": "shape=ellipse;fillOpacity=35",
        "VennPlainColor7": "shape=ellipse;fillOpacity=35",
        "VennPlainColor8": "shape=ellipse;fillOpacity=35",
        "iOS7DeviceiPhone5Portrait": s + "ios.iPhone;bgStyle=bgGreen",
        "iOS7DeviceiPhone5Landscape": s + "ios.iPhone;bgStyle=bgGreen",
        "iOS7DeviceiPadPortrait": s + "ios.iPad;bgStyle=bgGreen",
        "iOS7DeviceiPadLandscape": s + "ios.iPad;bgStyle=bgGreen",
        "iOS7DeviceiPhone6Portrait": s + "ios.iPhone;bgStyle=bgGreen",
        "iOS7DeviceiPhone6Landscape": s + "ios.iPhone;bgStyle=bgGreen",
        "iOS7DeviceiPhone6PlusPortrait": s + "ios.iPhone;bgStyle=bgGreen",
        "iOS7DeviceiPhone6PlusLandscape": s + "ios.iPhone;bgStyle=bgGreen",
        "iOS7StatusBariPhone": s + "ios7ui.appBar",
        "iOS7TabsiPhone": cs,
        "iOS7iPhoneActionSheet": cs,
        "iOS7iPhoneKeyboard": s + "ios7.misc.keyboard_(letters)",
        "iOS7TableView": cs,
        "iOS7StatusBariPad": s + "ios7ui.appBar",
        "iOS7NavBariPad": cs,
        "iOS7TabsiPad": cs,
        "iOS7iPadActionSheet": cs,
        "iOS7iPadKeyboard": s + "ios7.misc.keyboard_(letters)",
        "iOS7AlertDialog": cs,
        "iOS7ProgressBar": s + "ios7ui.downloadBar",
        "iOS7Slider": s + "ios7ui.searchBox",
        "iOS7SearchBar": s + "ios7ui.searchBox",
        "iOS7Button": "",
        "iOS7TextField": "",
        "iOS7TextView": "",
        "iOS7SegmentedControl": cs,
        "iOS7Toggle": s + "ios7ui.onOffButton;buttonState=on;strokeColor=#38D145;strokeColor2=#aaaaaa;fillColor=#38D145;fillColor2=#ffffff",
        "iOS7Stepper": s + "ios7.misc.adjust;fillColor=#ffffff;gradientColor=none",
        "iOS7PageControls": s + "ios7ui.pageControl;fillColor=#666666;strokeColor=#bbbbbb",
        "iOS7Block": "",
        "iOS7DatePicker": cs,
        "iOS7TimePicker": cs,
        "iOS7CountdownPicker": cs,
        "iOS7IconArrow left": s + "ios7.misc.left",
        "iOS7IconArrow": s + "ios7.misc.right",
        "iOS7IconArrow up": s + "ios7.misc.up",
        "iOS7IconArrow down": s + "ios7.misc.down",
        "iOS7IconWifi": s + "ios7.icons.wifi",
        "iOS7IconBluetooth": s + "ios7.icons.bluetooth",
        "iOS7IconBattery": s + "ios7.icons.battery",
        "iOS7IconSiri": s + "ios7.icons.microphone",
        "iOS7IconCheck": s + "ios7.icons.select",
        "iOS7IconCreate": s + "ios7.icons.add",
        "iOS7IconInfo": s + "ios7.icons.info",
        "iOS7IconLocation": s + "ios7.icons.location_2",
        "iOS7IconQuestion": s + "ios7.icons.help",
        "iOS7IconSearch": s + "ios7.icons.looking_glass",
        "iOS7IconToolbox": s + "ios7.icons.briefcase",
        "iOS7IconOptions": s + "ios7.icons.options",
        "iOS7IconShare": s + "ios7.icons.share",
        "iOS7IconTyping": s + "ios7.icons.message",
        "iOS7IconCopy": s + "ios7.icons.folders_2",
        "iOS7IconChat": s + "ios7.icons.messages",
        "iOS7IconOrganize": s + "ios7.icons.folder",
        "iOS7IconTrash": s + "ios7.icons.trashcan",
        "iOS7IconReply": s + "ios7.icons.back",
        "iOS7IconArchive": s + "ios7.icons.box",
        "iOS7IconCompose": s + "ios7.icons.compose",
        "iOS7IconSend": s + "ios7.icons.pointer",
        "iOS7IconDrawer": s + "ios7.icons.storage",
        "iOS7IconMail": s + "ios7.icons.mail",
        "iOS7IconDocument": s + "ios7.icons.document",
        "iOS7IconFlag": s + "ios7.icons.flag",
        "iOS7IconBookmarks": s + "ios7.icons.book",
        "iOS7IconGlasses": s + "ios7.icons.glasses",
        "iOS7IconFiles": s + "ios7.icons.folders",
        "iOS7IconDownloads": s + "ios7.icons.down",
        "iOS7IconLock": s + "ios7.icons.locked",
        "iOS7IconCloud": s + "ios7.icons.cloud",
        "iOS7IconOrientation Lock": s + "ios7.icons.orientation_lock",
        "iOS7IconContacts": s + "ios7.icons.user",
        "iOS7IconGlobal": s + "ios7.icons.globe",
        "iOS7IconSettings": s + "ios7.icons.settings",
        "iOS7IconAirplay": s + "ios7.icons.move_to_folder",
        "iOS7IconCamera": s + "ios7.icons.camera",
        "iOS7IconAirplane": s + "signs.transportation.airplane_6;direction=south",
        "iOS7IconCalculator": s + "ios7.icons.calculator",
        "iOS7IconPreferences": s + "ios7.icons.most_viewed",
        "iOS7IconPhone": s + "signs.tech.telephone_3",
        "iOS7IconKeypad": s + "ios7.icons.keypad",
        "iOS7IconVoicemail": s + "ios7.icons.tape",
        "iOS7IconStar": s + "ios7.icons.star",
        "iOS7IconMost Viewed": s + "ios7.icons.most_viewed",
        "iOS7IconVideo": s + "ios7.icons.video_conversation",
        "iOS7IconVolumne Controls": s + "ios7.icons.volume",
        "iOS7IconLocation pin": s + "ios7.icons.location",
        "iOS7IconCalendar": s + "ios7.icons.calendar",
        "iOS7IconAlarm": s + "ios7.icons.alarm_clock",
        "iOS7IconClock": s + "ios7.icons.clock",
        "iOS7IconTimer": s + "ios7.icons.gauge",
        "iOS7IconVolume down": s + "ios7.icons.silent",
        "iOS7IconVolume": s + "ios7.icons.volume_2",
        "iOS7IconVolume up": s + "ios7.icons.loud",
        "iOS7IconRepeat": s + "ios7.icons.reload",
        "iOS7IconRewind": s + "ios7.icons.backward",
        "iOS7IconPlay": s + "ios7.icons.play",
        "iOS7IconPause": s + "ios7.icons.pause",
        "iOS7IconFast forward": s + "ios7.icons.forward",
        "iOS7IconControls": s + "ios7.icons.controls",
        "iOS7IconPrivacy": s + "ios7.icons.privacy",
        "iOS7IconLink": s + "ios7.icons.link",
        "iOS7IconLight": s + "ios7.icons.flashlight",
        "iOS7IconBrightness": s + "ios7.icons.sun",
        "iOS7IconHeart": s + "ios7.icons.heart",
        "iOS7IconJava": s + "ios7.icons.cup",
        "iOS7IconBox": s + "ios7.icons.bag",
        "iOS7IconEye": s + "ios7.icons.eye",
        "iOS7IconDo not disturb": s + "ios7.icons.moon",
        "UI2BrowserBlock": cs,
        "UI2WindowBlock": cs,
        "UI2DialogBlock": cs,
        "UI2AreaBlock": "",
        "UI2ElementBlock": "",
        "UI2AccordionBlock": cs,
        "UI2TabBarContainerBlock": cs,
        "UI2TabBar2ContainerBlock": cs,
        "UI2VTabBarContainerBlock": cs,
        "UI2VScrollBlock": s + "mockup.navigation.scrollBar;direction=north",
        "UI2HScrollBlock": s + "mockup.navigation.scrollBar",
        "UI2VerticalSplitterBlock": s + "mockup.forms.splitter;direction=north",
        "UI2HorizontalSplitterBlock": s + "mockup.forms.splitter",
        "UI2ImageBlock": s + "mockup.graphics.simpleIcon",
        "UI2VideoBlock": s + "mockup.containers.videoPlayer;barHeight=30",
        "UI2AudioBlock": s + "mockup.misc.playbackControls",
        "UI2MapBlock": s + "mockup.misc.map",
        "UI2BarChartBlock": s + "mockup.graphics.barChart;strokeColor=none;strokeColor2=none",
        "UI2ColumnChartBlock": s + "mockup.graphics.columnChart;strokeColor=none;strokeColor2=none",
        "UI2LineChartBlock": s + "mockup.graphics.lineChart;strokeColor=none",
        "UI2PieChartBlock": s + "mockup.graphics.pieChart;parts=10,20,35",
        "UI2WebcamBlock": s + "mockup.containers.userMale",
        "UI2CaptchaBlock": s + "mockup.text.captcha;mainText=",
        "UI2ButtonBlock": "rounded=1;arcSize=25;",
        "UI2CheckBoxBlock": cs,
        "UI2HorizontalCheckBoxBlock": cs,
        "UI2RadioBlock": cs,
        "UI2HorizontalRadioBlock": cs,
        "UI2ColorPickerBlock": s + "mockup.forms.colorPicker;chosenColor=#aaddff",
        "UI2TextInputBlock": "",
        "UI2SelectBlock": s + "mockup.forms.comboBox;strokeColor=#999999;fillColor=#ddeeff;align=left;fillColor2=#aaddff;mainText=;fontColor=#666666",
        "UI2VSliderBlock": cs,
        "UI2HSliderBlock": cs,
        "UI2DatePickerBlock": cs,
        "UI2SearchBlock": cs,
        "UI2NumericStepperBlock": cs,
        "UI2TableBlock": cs,
        "UI2ButtonBarBlock": cs,
        "UI2VerticalButtonBarBlock": cs,
        "UI2LinkBarBlock": cs,
        "UI2BreadCrumbsBlock": cs,
        "UI2MenuBarBlock": cs,
        "UI2AtoZBlock": cs,
        "UI2PaginationBlock": cs,
        "UI2ContextMenuBlock": cs,
        "UI2TreePaneBlock": cs,
        "UI2PlaybackControlsBlock": s + "mockup.misc.playbackControls;fillColor=#ffffff;strokeColor=#999999;fillColor2=#99ddff;strokeColor2=none;fillColor3=#ffffff;strokeColor3=none",
        "Image_ui_formatting_toolbar": s + "mockup.menus_and_buttons.font_style_selector_2",
        "UI2ProgressBarBlock": cs,
        "UI2HelpIconBlock": s + "mockup.misc.help_icon",
        "UI2BraceNoteBlock": cs,
        "UI2TooltipBlock": s + "basic.rectangular_callout;flipV=1",
        "UI2TooltipSquareBlock": cs,
        "UI2CalloutBlock": cs,
        "UI2AlertBlock": cs,
        "Image_ipad_ipad": s + "ios.iPad;bgStyle=bgGreen",
        "iPadGrayBackgroundBlock": "",
        "Image_ipad_top_bar": s + "ios.iTopBar2;opacity=50;fillColor=#999999;strokeColor=#cccccc",
        "Image_ipad_search": s + "mockup.forms.searchBox;mainText=;flipH=1",
        "Image_ipad_alert_dialog": cs,
        "Image_ipad_dialog": cs,
        "Image_ipad_popover": s + "ios.iOption;barPos=50;pointerPos=top;buttonText=",
        "Image_ipad_table": cs,
        "Image_ipad_vtab": cs,
        "Image_ipad_button_black": "",
        "Image_ipad_button_blue": "",
        "Image_ipad_button_grayblue": "",
        "Image_ipad_button_red": "",
        "Image_ipad_back_button_gray": s + "ios.iButtonBack;buttonText=;fillColor=#eeeeee;fillColor2=#aaaaaa",
        "Image_ipad_back_button_black": s + "ios.iButtonBack;buttonText=;fillColor=#888888;fillColor2=#000000",
        "Image_ipad_sort_handle": s + "ios7.icons.options",
        "Image_ipad_dropdown": s + "ios.iComboBox;buttonText=;fillColor=#dddddd;fillColor2=#3D5565",
        "Image_ipad_email_name": "",
        "Image_ipad_prev_next": s + "ios.iPrevNext;strokeColor=#444444;fillColor=#dddddd;fillColor2=#3D5565;fillColor3=#ffffff",
        "Image_ipad_keyboard_portrait": s + "ios.iKeybLett",
        "Image_ipad_keyboard_landscape": s + "ios.iKeybLett",
        "Image_ipad_large_tabbed_button": cs,
        "Image_ipad_sort_button": cs,
        "Image_ipad_tab_bar": cs,
        "Image_ipad_slider": s + "ios.iSlider;barPos=20",
        "Image_ipad_add_icon_blue": s + "ios.iAddIcon;fillColor=#8BbEff;fillColor2=#135Ec8;strokeColor=#ffffff",
        "Image_ipad_add_icon_green": s + "ios.iAddIcon;fillColor=#7AdF78;fillColor2=#1A9917;strokeColor=#ffffff",
        "Image_ipad_remove_icon": s + "ios.iDeleteIcon;fillColor=#e8878E;fillColor2=#BD1421;strokeColor=#ffffff",
        "Image_ipad_arrow_icon": s + "ios.iArrowIcon;fillColor=#8BbEff;fillColor2=#135Ec8;strokeColor=#ffffff",
        "Image_ipad_arrow": s + "ios7.misc.more",
        "Image_ipad_checkmark": s + "ios7.misc.check",
        "Image_ipad_check_off": "shape=ellipse",
        "Image_ipad_location_dot": "shape=ellipse",
        "Image_ipad_mark_as_read": "shape=ellipse",
        "Image_ipad_pin_green": s + "ios.iPin;fillColor2=#00dd00;fillColor3=#004400;strokeColor=#006600",
        "Image_ipad_pin_red": s + "ios.iPin;fillColor2=#dd0000;fillColor3=#440000;strokeColor=#660000",
        "Image_ipad_radio_off": "shape=ellipse",
        "Image_ipad_checkbox_off": "absoluteArcSize=1;arcSize=" + arcSize + ";rounded=1",
        "Image_ipad_indicator": "absoluteArcSize=1;arcSize=" + arcSize + ";rounded=1;fillColor=#e8878E;gradientColor=#BD1421;strokeColor=#ffffff",
        "Image_iphone_iphone_4": s + "ios.iPhone;bg=bgGreen",
        "Image_iphone_bg_black": "",
        "Image_iphone_bg_gray": "",
        "Image_iphone_bg_stripe_drk": s + "ios.iBgStriped;strokeColor=#18211b;fillColor=#5D7585;strokeColor2=#657E8F",
        "Image_iphone_bg_stripe_lt": s + "ios.iBgStriped;strokeColor=#18211b;fillColor=#5D7585;strokeColor2=#657E8F",
        "Image_iphone_bg_white": "",
        "Image_iphone_top_bar_app": s + "ios.iAppBar",
        "Image_iphone_top_bar_home": s + "ios.iTopBar2;opacity=50;fillColor=#999999;strokeColor=#cccccc;strokeWidth=1",
        "Image_iphone_bar_top": "",
        "Image_iphone_bar_semi_trans_black": "",
        "Image_iphone_bar_semi_trans_blue": "",
        "Image_iphone_search": s + "mockup.forms.searchBox;mainText=;flipH=1",
        "Image_iphone_table": cs,
        "Image_iphone_table_w_buttons": cs,
        "Image_iphone_table_w_icons": cs,
        "Image_iphone_list": cs,
        "Image_iphone_gray_grad_list": "",
        "Image_iphone_dialog": cs,
        "Image_iphone_scroll_pane": cs,
        "Image_iphone_alpha_list": s + "ios.iAlphaList",
        "Image_iphone_button_black": "",
        "Image_iphone_button_blue": "",
        "Image_iphone_button_grayblue": "",
        "Image_iphone_button_red": "",
        "Image_iphone_button_lg_light": "",
        "Image_iphone_button_lg_dark": "",
        "Image_iphone_button_lg_green": "",
        "Image_iphone_button_lg_red": "",
        "Image_iphone_button_lg_yellow": "",
        "Image_iphone_button_xl_green": "",
        "Image_iphone_back_button": s + "ios.iButtonBack;strokeColor=#444444;buttonText=;fillColor=#dddddd;fillColor2=#3D5565",
        "Image_iphone_prev_next": s + "ios.iPrevNext;strokeColor=#444444;fillColor=#dddddd;fillColor2=#3D5565;fillColor3=#ffffff",
        "Image_iphone_sort_handle": s + "ios7.icons.options",
        "Image_iphone_slider": s + "ios.iSlider;barPos=60",
        "Image_iphone_dropdown": s + "ios.iComboBox;buttonText=;fillColor=#dddddd;fillColor2=#3D5565",
        "Image_iphone_email_name": "",
        "Image_iphone_switch_off": s + "android.switch_off;fillColor=#666666",
        "Image_iphone_keyboard_button_blue": "",
        "Image_iphone_keyboard_letters": s + "ios.iKeybLett",
        "Image_iphone_keyboard_landscape": s + "ios.iKeybLett",
        "Image_iphone_large_tabbed_button": cs,
        "Image_iphone_sort_button": cs,
        "Image_iphone_tab_bar": cs,
        "Image_iphone_picker_multi": cs,
        "Image_iphone_picker_web": cs,
        "Image_iphone_add_icon_blue": s + "ios.iAddIcon;fillColor=#8BbEff;fillColor2=#135Ec8;strokeColor=#ffffff",
        "Image_iphone_add_icon_green": s + "ios.iAddIcon;fillColor=#7AdF78;fillColor2=#1A9917;strokeColor=#ffffff",
        "Image_iphone_remove_icon": s + "ios.iDeleteIcon;fillColor=#e8878E;fillColor2=#BD1421;strokeColor=#ffffff",
        "Image_iphone_arrow_icon": s + "ios.iArrowIcon;fillColor=#8BbEff;fillColor2=#135Ec8;strokeColor=#ffffff",
        "Image_iphone_arrow": s + "ios7.misc.more",
        "Image_iphone_checkmark": s + "ios7.misc.check",
        "Image_iphone_check_off": "shape=ellipse",
        "Image_iphone_location_dot": "shape=ellipse",
        "Image_iphone_mark_as_read": "shape=ellipse",
        "Image_iphone_pin_green": s + "ios.iPin;fillColor2=#00dd00;fillColor3=#004400;strokeColor=#006600",
        "Image_iphone_pin_red": s + "ios.iPin;fillColor2=#dd0000;fillColor3=#440000;strokeColor=#660000",
        "Image_iphone_radio_off": "shape=ellipse",
        "Image_iphone_checkbox_off": "",
        "Image_iphone_indicator": "fillColor=#e8878E;gradientColor=#BD1421;strokeColor=#ffffff",
        "Image_iphone_thread_count": ""
    };
    function convertText(props) {
        var text = props.Text != null ? props.Text : props.Value != null ? props.Value : props.Lane_0;
        var text2 = null;
        if (text == null && props.State != null) {
            if (props.State.t != null)
                text = props.State
        } else if (text == null && props.Note != null) {
            if (props.Note.t != null)
                text = props.Note
        } else if (text == null && props.Title != null) {
            if (props.Title.t != null)
                text = props.Title
        } else if (props.t != null)
            text = props;
        if (text == null && props.TextAreas != null)
            if (props.TextAreas.Text != null)
                if (props.TextAreas.Text.Value != null)
                    if (props.TextAreas.Text.Value.t != null)
                        text = props.TextAreas.Text.Value;
        if (text != null) {
            if (text.t != null) {
                text.t = text.t.replace(/</g, "&lt;");
                text.t = text.t.replace(/>/g, "&gt;");
                return text.t
            }
            if (text.Value != null)
                if (text.Value.t != null) {
                    text.Value.t = text.Value.t.replace(/</g, "&lt;");
                    text.Value.t = text.Value.t.replace(/>/g, "&gt;");
                    return text.Value.t
                }
        }
        return text2 != null ? text2 : ""
    }
    function getAction(obj) {
        if (obj.Action != null)
            return obj.Action;
        return obj
    }
    function getTextM(properties) {
        if (properties.Text != null) {
            if (properties.Text.m != null)
                return properties.Text.m
        } else if (properties.TextAreas != null) {
            if (properties.TextAreas.Text != null)
                if (properties.TextAreas.Text.Value != null)
                    if (properties.TextAreas.Text.Value.m != null)
                        return properties.TextAreas.Text.Value.m
        } else if (properties.m != null)
            return properties.m;
        return null
    }
    function getLabelStyle(properties) {
        var style = getFontSize(properties) + getFontColor(properties) + getFontStyle(properties) + getTextAlignment(properties) + getTextLeftSpacing(properties) + getTextRightSpacing(properties) + getTextTopSpacing(properties) + getTextBottomSpacing(properties) + getTextGlobalSpacing(properties) + getTextVerticalAlignment(properties);
        return style
    }
    function getFontSize(properties) {
        var isV = false;
        var m = getTextM(properties);
        if (m != null) {
            var i = 0;
            while (!isV && i < m.length) {
                var currM = m[i];
                if (currM.n == "s")
                    if (currM.v != null) {
                        isV = true;
                        return "fontSize=" + Math.round(currM.v * scale) + ";"
                    }
                i++
            }
        }
        if (isV == 0)
            return "fontSize=" + defaultFontSize + ";";
        return ""
    }
    function getFontColor(properties) {
        var isC = false;
        var m = getTextM(properties);
        if (m != null) {
            var i = 0;
            while (!isC && i < m.length) {
                var currM = m[i];
                if (currM.n == "c")
                    if (currM.v != null) {
                        isC = true;
                        var currV = currM.v;
                        if (currV.charAt(0) != "#")
                            currV = "#" + currV;
                        var currV = currV.substring(0, 7);
                        return mxConstants.STYLE_FONTCOLOR + "=" + currV + ";"
                    }
                i++
            }
        }
        return ""
    }
    function getFontStyle(properties) {
        var m = getTextM(properties);
        if (m != null) {
            var fontStyle = 0;
            var isBT = false;
            if (m != null) {
                var i = 0;
                while (!isBT && i < m.length) {
                    var currM = m[i];
                    if (currM.n == "b")
                        if (currM.v != null && currM.v) {
                            isBT = true;
                            fontStyle += 1
                        }
                    i++
                }
            }
            var isIT = false;
            if (m != null) {
                var i = 0;
                while (!isIT && i < m.length) {
                    var currM = m[i];
                    if (currM.n == "i")
                        if (currM.v != null && currM.v) {
                            isIT = true;
                            fontStyle += 2
                        }
                    i++
                }
            }
            var isUT = false;
            if (m != null) {
                var i = 0;
                while (!isUT && i < m.length) {
                    var currM = m[i];
                    if (currM.n == "u")
                        if (currM.v != null && currM.v) {
                            isUT = true;
                            fontStyle += 4
                        }
                    i++
                }
            }
            if (fontStyle > 0)
                return "fontStyle=" + fontStyle + ";"
        }
        return ""
    }
    function getTextAlignment(properties) {
        var m = getTextM(properties);
        if (m != null) {
            var i = 0;
            while (i < m.length) {
                var currM = m[i];
                if (currM.n == "a")
                    if (currM.v != null)
                        return "align=" + currM.v + ";";
                i++
            }
        }
        return ""
    }
    function getTextLeftSpacing(properties) {
        var m = getTextM(properties);
        if (m != null) {
            var i = 0;
            while (i < m.length) {
                var currM = m[i];
                if (currM.v != null)
                    if (currM.n == "il")
                        return "spacingLeft=" + currM.v * .6 + ";";
                    else {
                        var align = getTextAlignment(properties);
                        if (currM.n == "s" && align != "align=center;" && align != "")
                            ;
                    }
                i++
            }
        }
        return ""
    }
    function getTextRightSpacing(properties) {
        var isIR = false;
        var m = getTextM(properties);
        if (m != null) {
            var i = 0;
            while (!isIR && i < m.length) {
                var currM = m[i];
                if (currM.n == "ir")
                    if (currM.v != null) {
                        isIR = true;
                        return "spacingRight=" + currM.v + ";"
                    }
                i++
            }
        }
        return ""
    }
    function getTextTopSpacing(properties) {
        var isMT = false;
        var m = getTextM(properties);
        if (m != null) {
            var i = 0;
            while (!isMT && i < m.length) {
                var currM = m[i];
                if (currM.n == "mt")
                    if (currM.v != null) {
                        isMT = true;
                        return "spacingTop=" + currM.v + ";"
                    }
                i++
            }
        }
        return ""
    }
    function getTextBottomSpacing(properties) {
        var isMB = false;
        var m = getTextM(properties);
        if (m != null) {
            var i = 0;
            while (!isMB && i < m.length) {
                var currM = m[i];
                if (currM.n == "mb")
                    if (currM.v != null) {
                        isMB = true;
                        return "spacingBottom=" + currM.v + ";"
                    }
                i++
            }
        }
        return ""
    }
    function getTextGlobalSpacing(properties) {
        if (typeof properties.InsetMargin === "number")
            return "spacing=" + parseInt(properties.InsetMargin) + ";";
        return ""
    }
    function getTextVerticalAlignment(properties) {
        if (properties.Text_VAlign != null)
            if (typeof properties.Text_VAlign === "string")
                return "verticalAlign=" + properties.Text_VAlign + ";";
        return createStyle(mxConstants.STYLE_VERTICAL_ALIGN, properties.TextVAlign, "middle")
    }
    function getStrokeColor(properties, action) {
        if (mxUtils.indexOf(hardStroke, action.Class) < 0)
            if (properties.LineWidth == 0)
                return mxConstants.STYLE_STROKECOLOR + "=none;";
            else
                return createStyle(mxConstants.STYLE_STROKECOLOR, properties.LineColor.substring(0, 7), "#000000");
        else if (action.Class.substring(0, 4) == "Venn")
            return createStyle(mxConstants.STYLE_STROKECOLOR, properties.FillColor.substring(0, 7), "#FFFFFF");
        return ""
    }
    function getOpacity(properties, action) {
        var style = "";
        var incl = mxUtils.indexOf(hardOpacity, action.Class) >= 0;
        if (!incl)
            style += createStyle(mxConstants.STYLE_OPACITY, properties.Opacity, "100");
        if (typeof properties.LineColor === "string" && !incl)
            if (properties.LineColor.length > 7) {
                var sOpac = "0x" + properties.LineColor.substring(properties.LineColor.length - 2, properties.LineColor.length);
                style += "strokeOpacity=" + Math.round(parseInt(sOpac) / 2.55) + ";"
            }
        if (typeof properties.FillColor === "string" && !incl)
            if (properties.FillColor.length > 7) {
                var fOpac = "0x" + properties.FillColor.substring(properties.FillColor.length - 2, properties.FillColor.length);
                style += "fillOpacity=" + Math.round(parseInt(fOpac) / 2.55) + ";"
            }
        return style
    }
    function getRounded(properties, action, cell) {
        if (!cell.edge)
            if (properties.Rounding != null && mxUtils.indexOf(hardRound, action.Class) < 0) {
                if (properties.Rounding > 0)
                    return "rounded=1;absoluteArcSize=1;arcSize=" + properties.Rounding * .6 + ";"
            } else if (properties.Rounding == null && mxUtils.indexOf(hardDefRound, action.Class) >= 0)
                return "rounded=1;absoluteArcSize=1;arcSize=8;";
        return ""
    }
    function getRotation(properties, action, cell) {
        if (properties.Rotation != null) {
            var deg = mxUtils.toDegree(parseFloat(properties.Rotation));
            if (action.Class == "AdvancedSwimLaneBlockRotated") {
                deg += 90;
                cell.geometry.rotate90()
            } else if (mxUtils.indexOf(rccw, action.Class) >= 0) {
                deg -= 90;
                cell.geometry.rotate90();
                cell.geometry.rotate90();
                cell.geometry.rotate90()
            } else if (mxUtils.indexOf(rcw2, action.Class) >= 0) {
                deg += 180;
                cell.geometry.rotate90();
                cell.geometry.rotate90()
            }
            if (deg != 0)
                return "rotation=" + deg + ";"
        }
        return ""
    }
    function getFlipH(properties) {
        if (properties.FlipX)
            return "flipH=1;";
        return ""
    }
    function getFlipV(properties) {
        if (properties.FlipY)
            return "flipV=1;";
        return ""
    }
    function getShadow(properties) {
        if (properties.Shadow != null)
            return mxConstants.STYLE_SHADOW + "=1;";
        return ""
    }
    function getFillColor(properties, action) {
        if (properties.FillColor != null)
            if (mxUtils.indexOf(hardFill, action.Class) < 0)
                if (typeof properties.FillColor === "object") {
                    if (properties.FillColor.cs != null && properties.FillColor.cs.length > 1)
                        return createStyle(mxConstants.STYLE_FILLCOLOR, properties.FillColor.cs[0].c.substring(0, 7)) + createStyle(mxConstants.STYLE_GRADIENTCOLOR, properties.FillColor.cs[1].c.substring(0, 7))
                } else if (typeof properties.FillColor === "string")
                    return createStyle(mxConstants.STYLE_FILLCOLOR, properties.FillColor.substring(0, 7), "#FFFFFF");
                else
                    return createStyle(mxConstants.STYLE_FILLCOLOR, "none");
        return ""
    }
    function getStrokeStyle(properties) {
        if (properties.StrokeStyle == "dashed")
            return "dashed=1;";
        else if (properties.StrokeStyle == "dotted")
            return "dashed=1;dashPattern=1 4;";
        else if (properties.StrokeStyle == "dashdot")
            return "dashed=1;dashPattern=10 5 1 5;";
        else if (properties.StrokeStyle == "dotdotdot")
            return "dashed=1;dashPattern=1 1;";
        return ""
    }
    function getStrokeWidth(properties) {
        return createStyle(mxConstants.STYLE_STROKEWIDTH, parseFloat(properties.LineWidth) * scale, "1")
    }
    function getImage(properties, action) {
        if (action.Class == "ImageSearchBlock2")
            return "image=" + properties.URL + ";";
        return ""
    }
    function updateCell(cell, obj) {
        var a = getAction(obj);
        if (a != null) {
            var s = styleMap[a.Class];
            if (s != null)
                cell.style += s + ";";
            {}
            var p = a.Properties != null ? a.Properties : a;
            if (p != null) {
                cell.value = convertText(p);
                cell.style += getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p, cell) + getTextLeftSpacing(p) + getTextRightSpacing(p) + getTextTopSpacing(p) + getTextBottomSpacing(p) + getTextGlobalSpacing(p) + getTextVerticalAlignment(p) + getStrokeColor(p, a) + getOpacity(p, a) + getRounded(p, a, cell) + getRotation(p, a, cell) + getFlipH(p) + getFlipV(p) + getShadow(p) + getFillColor(p, a) + getStrokeStyle(p) + getStrokeWidth(p) + getImage(p, a);
                if (cell.edge) {
                    if (p.Rounding != null)
                        cell.style += "rounded=1;arcSize=" + p.Rounding + ";";
                    else
                        cell.style += "rounded=0;";
                    if (p.Shape != "diagonal")
                        if (p.ElbowPoints != null) {
                            cell.geometry.points = [];
                            for (var i = 0; i < p.ElbowPoints.length; i++)
                                cell.geometry.points.push(new mxPoint(Math.round(p.ElbowPoints[i].x * scale + dx),Math.round(p.ElbowPoints[i].y * scale + dy)))
                        } else if (p.Shape == "elbow")
                            if (p.Endpoint1.Block != null && p.Endpoint1.Block != null)
                                cell.style += "edgeStyle=orthogonalEdgeStyle;";
                            else
                                cell.style += "edgeStyle=elbowEdgeStyle;";
                        else if (p.Endpoint1.Block != null && p.Endpoint1.Block != null) {
                            cell.style += "edgeStyle=orthogonalEdgeStyle;";
                            if (p.Shape == "curve")
                                cell.style += "curved=1;"
                        }
                    if (p.Endpoint1.Style != null)
                        cell.style += "startArrow=" + edgeStyleMap[p.Endpoint1.Style] + ";";
                    if (p.Endpoint2.Style != null)
                        cell.style += "endArrow=" + edgeStyleMap[p.Endpoint2.Style].replace(/startSize/g, "endSize") + ";";
                    updateEndpoint(cell, p.Endpoint1, true);
                    updateEndpoint(cell, p.Endpoint2, false)
                }
            }
        }
    }
    function createVertex(obj) {
        var p = getAction(obj).Properties;
        var b = p.BoundingBox;
        if (obj.Class != null && obj.Class.substring(0, 3) === "AWS")
            b.h = b.h - 20;
        v = new mxCell("",new mxGeometry(Math.round(b.x * scale + dx),Math.round(b.y * scale + dy),Math.round(b.w * scale),Math.round(b.h * scale)),vertexStyle);
        v.vertex = true;
        updateCell(v, obj);
        return v
    }
    function createEdge(obj) {
        var e = new mxCell("",new mxGeometry(0,0,100,100),edgeStyle);
        e.geometry.relative = true;
        e.edge = true;
        updateCell(e, obj);
        var a = getAction(obj);
        var p = a.Properties;
        var ta = p != null ? p.TextAreas : obj.TextAreas;
        if (ta != null) {
            var count = 0;
            while (ta["t" + count] != null) {
                var tmp = ta["t" + count];
                e = insertLabel(tmp, e);
                count++
            }
            var count = 1;
            while (ta["m" + count] != null) {
                var tmp = ta["m" + count];
                e = insertLabel(tmp, e, obj);
                count++
            }
            if (ta.Text != null)
                e = insertLabel(ta, e, obj);
            var ta = p != null ? p.TextAreas : obj.TextAreas;
            if (ta.Message != null)
                e = insertLabel(ta.Message, e, obj)
        }
        return e
    }
    function insertLabel(textArea, e, obj) {
        var x = (parseFloat(textArea.Location) - .5) * 2;
        var lab = new mxCell(convertText(textArea),new mxGeometry(x,0,0,0),labelStyle);
        lab.geometry.relative = true;
        lab.vertex = true;
        e.insert(lab);
        return e
    }
    function createStyle(key, prop, defaultValue, fn) {
        if (prop != null && fn != null)
            prop = fn(prop);
        if (prop != null && prop != defaultValue)
            return key + "=" + prop + ";";
        return ""
    }
    function updateEndpoint(cell, endpoint, source) {
        if (endpoint != null)
            if (endpoint.LinkX != null && endpoint.LinkY != null)
                cell.style += (source ? "exitX" : "entryX") + "=" + endpoint.LinkX + ";" + (source ? "exitY" : "entryY") + "=" + endpoint.LinkY + ";" + (source ? "exitPerimeter" : "entryPerimeter") + "=1;"
    }
    var hideObj = function(key, groups, hidden) {
        if (mxUtils.indexOf(hidden, key) < 0)
            hidden.push(key);
        if (key in groups) {
            var obj = groups[key];
            obj.id = key;
            if (obj.Members != null)
                for (var key2 in obj.Members)
                    hidden = hideObj(key2, groups, hidden)
        }
        return hidden
    };
    function importLucidPage(graph, g, dx, dy, crop, noSelection) {
        graph.getModel().beginUpdate();
        try {
            var addLine = function(obj, p) {
                var src = p.Endpoint1.Block != null ? lookup[p.Endpoint1.Block] : null;
                var trg = p.Endpoint2.Block != null ? lookup[p.Endpoint2.Block] : null;
                var e = createEdge(obj);
                if (src == null && p.Endpoint1 != null)
                    e.geometry.setTerminalPoint(new mxPoint(Math.round(p.Endpoint1.x * scale),Math.round(p.Endpoint1.y * scale)), true);
                if (trg == null && p.Endpoint2 != null)
                    e.geometry.setTerminalPoint(new mxPoint(Math.round(p.Endpoint2.x * scale),Math.round(p.Endpoint2.y * scale)), false);
                select.push(graph.addCell(e, null, null, src, trg))
            };
            var select = [];
            var lookup = {};
            var queue = [];
            var hidden = [];
            var i = 0;
            if (g.Groups != null)
                for (var key in g.Groups) {
                    var obj = g.Groups[key];
                    obj.id = key;
                    if (obj.Hidden == true && obj.Members != null) {
                        if (mxUtils.indexOf(hidden, key) < 0)
                            hidden.push(key);
                        for (var key2 in obj.Members)
                            hidden = hideObj(key2, g.Groups, hidden)
                    }
                }
            if (g.Blocks != null)
                for (var key in g.Blocks) {
                    var obj = g.Blocks[key];
                    obj.id = key;
                    if (mxUtils.indexOf(hidden, key) < 0) {
                        var created = false;
                        if (styleMap[obj.Class] != null)
                            if (styleMap[obj.Class] == "mxCompositeShape") {
                                lookup[obj.id] = addCompositeShape(obj, select, graph);
                                queue.push(obj);
                                created = true
                            }
                        if (!created) {
                            lookup[obj.id] = createVertex(obj);
                            queue.push(obj)
                        }
                    }
                }
            else
                for (var i = 0; i < g.Objects.length; i++) {
                    var obj = g.Objects[i];
                    if (obj.Action != null && styleMap[obj.Action.Class] == "mxCompositeShape")
                        lookup[obj.id] = addCompositeShape(obj, select, graph);
                    else if (obj.IsBlock && obj.Action != null && obj.Action.Properties != null)
                        lookup[obj.id] = createVertex(obj);
                    queue.push(obj)
                }
            queue.sort(function(a, b) {
                a = getAction(a);
                b = getAction(b);
                if (a.Properties != null)
                    if (b.Properties != null)
                        return a.Properties.ZOrder - b.Properties.ZOrder;
                return 0
            });
            for (var i = 0; i < queue.length; i++) {
                var obj = queue[i];
                var v = lookup[obj.id];
                if (v != null)
                    select.push(graph.addCell(v));
                else if (obj.IsLine && obj.Action != null && obj.Action.Properties != null) {
                    var p = obj.Action.Properties;
                    addLine(obj, p)
                }
            }
            if (g.Lines != null)
                for (var key in g.Lines)
                    if (mxUtils.indexOf(hidden, key) < 0) {
                        var obj = g.Lines[key];
                        addLine(obj, obj)
                    }
            if (crop && dx != null && dy != null) {
                if (graph.isGridEnabled()) {
                    dx = graph.snap(dx);
                    dy = graph.snap(dy)
                }
                var bounds = graph.getBoundingBoxFromGeometry(select, true);
                if (bounds != null)
                    graph.moveCells(select, dx - bounds.x, dy - bounds.y)
            }
            if (!noSelection)
                graph.setSelectionCells(select)
        } finally {
            graph.getModel().endUpdate()
        }
    }
    function createGraph() {
        var graph = new Graph;
        graph.setExtendParents(false);
        graph.setExtendParentsOnAdd(false);
        graph.setConstrainChildren(false);
        graph.setHtmlLabels(true);
        graph.getModel().maintainEdgeParent = false;
        return graph
    }
    LucidImporter.importState = function(state) {
        var xml = ['<?xml version="1.0" encoding="UTF-8"?>', "<mxfile>"];
        var pages = [];
        if (state.state != null) {
            state = JSON.parse(state.state);
            for (var id in state.Pages)
                pages.push(state.Pages[id]);
            pages.sort(function(a, b) {
                if (a.Properties.Order < b.Properties.Order)
                    return -1;
                else if (a.Properties.Order > b.Properties.Order)
                    return 1;
                else
                    return 0
            })
        } else
            pages.push(state);
        var graph = createGraph();
        var codec = new mxCodec;
        for (var i = 0; i < pages.length; i++) {
            xml.push("<diagram");
            if (pages[i].Properties != null && pages[i].Properties.Title != null)
                xml.push(' name="' + mxUtils.htmlEntities(pages[i].Properties.Title) + '"');
            importLucidPage(graph, pages[i], null, null, null, true);
            var node = codec.encode(graph.getModel());
            graph.getModel().clear();
            xml.push(">" + Graph.prototype.compress(mxUtils.getXml(node)) + "</diagram>")
        }
        xml.push("</mxfile>");
        return xml.join("")
    }
    ;
    function addRouterEdge(x, y, edge, select, graph, cells, v, cell) {
        var dummy = new mxCell("",new mxGeometry(x,y,0,0),"strokeColor=none;fillColor=none;");
        dummy.vertex = true;
        v.insert(dummy);
        cells = [dummy];
        var e = sb.cloneCell(edge);
        cell.insertEdge(e, false);
        dummy.insertEdge(e, true);
        cells.push(e);
        select.push(graph.addCell(e, null, null, null, null))
    }
    function addFloatingEdge(x1, y1, x2, y2, edge, select, graph, cells, v) {
        var dummy1 = new mxCell("",new mxGeometry(x1,y1,0,0),"strokeColor=none;fillColor=none;");
        dummy1.vertex = true;
        v.insert(dummy1);
        cells = [dummy1];
        var dummy2 = new mxCell("",new mxGeometry(x2,y2,0,0),"strokeColor=none;fillColor=none;");
        dummy2.vertex = true;
        v.insert(dummy2);
        cells = [dummy2];
        var e = sb.cloneCell(edge);
        dummy1.insertEdge(e, true);
        dummy2.insertEdge(e, false);
        cells.push(e);
        select.push(graph.addCell(e, null, null, null, null))
    }
    function addCompositeShape(obj, select, graph) {
        var a = getAction(obj);
        var p = a.Properties;
        var b = p.BoundingBox;
        var w = Math.round(b.w * scale);
        var h = Math.round(b.h * scale);
        var x = Math.round(b.x * scale + dx);
        var y = Math.round(b.y * scale + dy);
        v = new mxCell("",new mxGeometry(x,y,w,h),vertexStyle);
        v.vertex = true;
        var cls = obj.Class != null ? obj.Class : a != null ? a.Class : null;
        switch (cls) {
        case "BraceNoteBlock":
        case "UI2BraceNoteBlock":
            var isRightBrace = false;
            if (p.BraceDirection != null)
                if (p.BraceDirection == "Right")
                    isRightBrace = true;
            var brace = null;
            var label = null;
            if (isRightBrace) {
                brace = new mxCell("",new mxGeometry(w - h * .125,0,h * .125,h),"shape=curlyBracket;rounded=1;");
                label = new mxCell("",new mxGeometry(0,0,w - h * .125,h),"strokeColor=none;fillColor=none;")
            } else {
                brace = new mxCell("",new mxGeometry(0,0,h * .125,h),"shape=curlyBracket;rounded=1;flipH=1;");
                label = new mxCell("",new mxGeometry(h * .125,0,w - h * .125,h),"strokeColor=none;fillColor=none;")
            }
            v.style = "strokeColor=none;fillColor=none;";
            v.style += getRotation(p, a, v);
            brace.vertex = true;
            v.insert(brace);
            brace.style += getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getStrokeWidth(p);
            label.vertex = true;
            label.value = convertText(p);
            v.insert(label);
            label.style += getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p, label) + getTextLeftSpacing(p) + getTextRightSpacing(p) + getTextTopSpacing(p) + getTextBottomSpacing(p) + getTextGlobalSpacing(p) + getTextVerticalAlignment(p);
            break;
        case "AdvancedSwimLaneBlockRotated":
        case "AdvancedSwimLaneBlock":
            var lanesNum = 0;
            if (p.Lanes != null)
                lanesNum = p.Lanes.length;
            v.style = "strokeColor=none;fillColor=none;";
            var totalOffset = 0;
            var lane = new Array;
            for (var i = 0; i < lanesNum; i++) {
                var currOffset = parseFloat(p.Lanes[i].p);
                lane.push(new mxCell("",new mxGeometry(w * totalOffset,0,w * currOffset,h),"shape=swimlane;startSize=25;"));
                lane[i].vertex = true;
                v.insert(lane[i]);
                lane[i].value = convertText(p["Lane_" + i]);
                lane[i].style += getFontSize(p["Lane_" + i]) + getFontColor(p["Lane_" + i]) + getFontStyle(p["Lane_" + i]) + getTextAlignment(p["Lane_" + i], lane[i]) + getTextLeftSpacing(p["Lane_" + i]) + getTextRightSpacing(p["Lane_" + i]) + getTextTopSpacing(p["Lane_" + i]) + getTextBottomSpacing(p["Lane_" + i]) + getTextGlobalSpacing(p["Lane_" + i]) + getTextVerticalAlignment(p["Lane_" + i]) + getStrokeColor(p, a) + getOpacity(p, a) + getRounded(p, a, lane[i]) + getRotation(p, a, lane[i]) + getFlipH(p) + getFlipV(p) + getShadow(p) + getFillColor(p, a) + getStrokeStyle(p) + getStrokeWidth(p);
                totalOffset += currOffset
            }
            break;
        case "AndroidDevice":
            if (p.AndroidDeviceName != null) {
                v.style = "fillColor=#000000;strokeColor=#000000;";
                var background = null;
                var keyboard = null;
                var statusBar = null;
                if (p.AndroidDeviceName == "Tablet" || p.AndroidDeviceName == "Mini Tablet") {
                    v.style += "shape=mxgraph.android.tab2;";
                    background = new mxCell("",new mxGeometry(w * .112,h * .077,w * .77,h * .85),"");
                    if (p.KeyboardShown)
                        keyboard = new mxCell("",new mxGeometry(w * .112,h * .727,w * .77,h * .2),"shape=mxgraph.android.keyboard;");
                    if (!p.FullScreen)
                        statusBar = new mxCell("",new mxGeometry(w * .112,h * .077,w * .77,h * .03),"shape=mxgraph.android.statusBar;strokeColor=#33b5e5;fillColor=#000000;fontColor=#33b5e5;fontSize=" + h * .015 + ";")
                } else if (p.AndroidDeviceName == "Large Phone" || p.AndroidDeviceName == "Phone") {
                    v.style += "shape=mxgraph.android.phone2;";
                    background = new mxCell("",new mxGeometry(w * .04,h * .092,w * .92,h * .816),"");
                    if (p.KeyboardShown)
                        keyboard = new mxCell("",new mxGeometry(w * .04,h * .708,w * .92,h * .2),"shape=mxgraph.android.keyboard;");
                    if (!p.FullScreen)
                        statusBar = new mxCell("",new mxGeometry(w * .04,h * .092,w * .92,h * .03),"shape=mxgraph.android.statusBar;strokeColor=#33b5e5;fillColor=#000000;fontColor=#33b5e5;fontSize=" + h * .015 + ";")
                }
                background.vertex = true;
                v.insert(background);
                if (p.Scheme == "Dark")
                    background.style += "fillColor=#111111;";
                else if (p.Scheme == "Light")
                    background.style += "fillColor=#ffffff;";
                if (keyboard != null) {
                    keyboard.vertex = true;
                    v.insert(keyboard)
                }
                if (statusBar != null) {
                    statusBar.vertex = true;
                    v.insert(statusBar)
                }
            }
            break;
        case "AndroidAlertDialog":
            var dialog = new mxCell("",new mxGeometry(0,0,w,30),"strokeColor=none;fillColor=none;spacingLeft=9;");
            dialog.vertex = true;
            v.insert(dialog);
            var line = new mxCell("",new mxGeometry(0,25,w,10),"shape=line;strokeColor=#33B5E5;");
            line.vertex = true;
            v.insert(line);
            var dialogText = new mxCell("",new mxGeometry(0,30,w,h - 30),"strokeColor=none;fillColor=none;verticalAlign=top;");
            dialogText.vertex = true;
            v.insert(dialogText);
            var cancelButton = new mxCell("",new mxGeometry(0,h - 25,w * .5,25),"fillColor=none;");
            cancelButton.vertex = true;
            v.insert(cancelButton);
            var okButton = new mxCell("",new mxGeometry(w * .5,h - 25,w * .5,25),"fillColor=none;");
            okButton.vertex = true;
            v.insert(okButton);
            dialog.value = convertText(p.DialogTitle);
            dialog.style += getLabelStyle(p.DialogTitle);
            dialogText.value = convertText(p.DialogText);
            dialogText.style += getLabelStyle(p.DialogText);
            cancelButton.value = convertText(p.Button_0);
            cancelButton.style += getLabelStyle(p.Button_0);
            okButton.value = convertText(p.Button_1);
            okButton.style += getLabelStyle(p.Button_1);
            if (p.Scheme == "Dark") {
                v.style += "strokeColor=#353535;fillColor=#282828;shadow=1;";
                cancelButton.style += "strokeColor=#353535;";
                okButton.style += "strokeColor=#353535;"
            } else {
                v.style += "strokeColor=none;fillColor=#ffffff;shadow=1;";
                cancelButton.style += "strokeColor=#E2E2E2;";
                okButton.style += "strokeColor=#E2E2E2;"
            }
            break;
        case "AndroidDateDialog":
        case "AndroidTimeDialog":
            var dialog = new mxCell("",new mxGeometry(0,0,w,30),"strokeColor=none;fillColor=none;spacingLeft=9;");
            dialog.vertex = true;
            v.insert(dialog);
            dialog.value = convertText(p.DialogTitle);
            dialog.style += getLabelStyle(p.DialogTitle);
            var line = new mxCell("",new mxGeometry(0,25,w,10),"shape=line;strokeColor=#33B5E5;");
            line.vertex = true;
            v.insert(line);
            var cancelButton = new mxCell("",new mxGeometry(0,h - 25,w * .5,25),"fillColor=none;");
            cancelButton.vertex = true;
            v.insert(cancelButton);
            cancelButton.value = convertText(p.Button_0);
            cancelButton.style += getLabelStyle(p.Button_0);
            var okButton = new mxCell("",new mxGeometry(w * .5,h - 25,w * .5,25),"fillColor=none;");
            okButton.vertex = true;
            v.insert(okButton);
            okButton.value = convertText(p.Button_1);
            okButton.style += getLabelStyle(p.Button_1);
            var triangle1 = new mxCell("",new mxGeometry(w * .5 - 4,41,8,4),"shape=triangle;direction=north;");
            triangle1.vertex = true;
            v.insert(triangle1);
            var triangle2 = new mxCell("",new mxGeometry(w * .25 - 4,41,8,4),"shape=triangle;direction=north;");
            triangle2.vertex = true;
            v.insert(triangle2);
            var triangle3 = new mxCell("",new mxGeometry(w * .75 - 4,41,8,4),"shape=triangle;direction=north;");
            triangle3.vertex = true;
            v.insert(triangle3);
            var prevDate1 = new mxCell("",new mxGeometry(w * .375,50,w * .2,15),"strokeColor=none;fillColor=none;");
            prevDate1.vertex = true;
            v.insert(prevDate1);
            prevDate1.value = convertText(p.Label_1);
            prevDate1.style += getLabelStyle(p.Label_1);
            var prevDate2 = new mxCell("",new mxGeometry(w * .125,50,w * .2,15),"strokeColor=none;fillColor=none;");
            prevDate2.vertex = true;
            v.insert(prevDate2);
            prevDate2.value = convertText(p.Label_0);
            prevDate2.style += getLabelStyle(p.Label_0);
            var prevDate3 = null;
            if (obj.Class == "AndroidDateDialog") {
                prevDate3 = new mxCell("",new mxGeometry(w * .625,50,w * .2,15),"strokeColor=none;fillColor=none;");
                prevDate3.vertex = true;
                v.insert(prevDate3);
                prevDate3.value = convertText(p.Label_2);
                prevDate3.style += getLabelStyle(p.Label_2)
            }
            var line1 = new mxCell("",new mxGeometry(w * .43,60,w * .14,10),"shape=line;strokeColor=#33B5E5;");
            line1.vertex = true;
            v.insert(line1);
            var line2 = new mxCell("",new mxGeometry(w * .18,60,w * .14,10),"shape=line;strokeColor=#33B5E5;");
            line2.vertex = true;
            v.insert(line2);
            var line3 = new mxCell("",new mxGeometry(w * .68,60,w * .14,10),"shape=line;strokeColor=#33B5E5;");
            line3.vertex = true;
            v.insert(line3);
            var date1 = new mxCell("",new mxGeometry(w * .375,65,w * .2,15),"strokeColor=none;fillColor=none;");
            date1.vertex = true;
            v.insert(date1);
            date1.value = convertText(p.Label_4);
            date1.style += getLabelStyle(p.Label_4);
            var sep = null;
            if (obj.Class == "AndroidTimeDialog") {
                sep = new mxCell("",new mxGeometry(w * .3,65,w * .1,15),"strokeColor=none;fillColor=none;");
                sep.vertex = true;
                v.insert(sep);
                sep.value = convertText(p.Label_Colon);
                sep.style += getLabelStyle(p.Label_Colon)
            }
            var date2 = new mxCell("",new mxGeometry(w * .125,65,w * .2,15),"strokeColor=none;fillColor=none;");
            date2.vertex = true;
            v.insert(date2);
            date2.value = convertText(p.Label_3);
            date2.style += getLabelStyle(p.Label_3);
            var date3 = new mxCell("",new mxGeometry(w * .625,65,w * .2,15),"strokeColor=none;fillColor=none;");
            date3.vertex = true;
            v.insert(date3);
            date3.value = convertText(p.Label_5);
            date3.style += getLabelStyle(p.Label_5);
            var line4 = new mxCell("",new mxGeometry(w * .43,75,w * .14,10),"shape=line;strokeColor=#33B5E5;");
            line4.vertex = true;
            v.insert(line4);
            var line5 = new mxCell("",new mxGeometry(w * .18,75,w * .14,10),"shape=line;strokeColor=#33B5E5;");
            line5.vertex = true;
            v.insert(line5);
            var line6 = new mxCell("",new mxGeometry(w * .68,75,w * .14,10),"shape=line;strokeColor=#33B5E5;");
            line6.vertex = true;
            v.insert(line6);
            var nextDate1 = new mxCell("",new mxGeometry(w * .375,80,w * .2,15),"strokeColor=none;fillColor=none;");
            nextDate1.vertex = true;
            v.insert(nextDate1);
            nextDate1.value = convertText(p.Label_7);
            nextDate1.style += getLabelStyle(p.Label_7);
            var nextDate2 = new mxCell("",new mxGeometry(w * .125,80,w * .2,15),"strokeColor=none;fillColor=none;");
            nextDate2.vertex = true;
            v.insert(nextDate2);
            nextDate2.value = convertText(p.Label_6);
            nextDate2.style += getLabelStyle(p.Label_6);
            var nextDate3 = new mxCell("",new mxGeometry(w * .625,80,w * .2,15),"strokeColor=none;fillColor=none;");
            nextDate3.vertex = true;
            v.insert(nextDate3);
            nextDate3.value = convertText(p.Label_8);
            nextDate3.style += getLabelStyle(p.Label_8);
            var triangle4 = new mxCell("",new mxGeometry(w * .5 - 4,99,8,4),"shape=triangle;direction=south;");
            triangle4.vertex = true;
            v.insert(triangle4);
            var triangle5 = new mxCell("",new mxGeometry(w * .25 - 4,99,8,4),"shape=triangle;direction=south;");
            triangle5.vertex = true;
            v.insert(triangle5);
            var triangle6 = new mxCell("",new mxGeometry(w * .75 - 4,99,8,4),"shape=triangle;direction=south;");
            triangle6.vertex = true;
            v.insert(triangle6);
            if (p.Scheme == "Dark") {
                v.style += "strokeColor=#353535;fillColor=#282828;shadow=1;";
                cancelButton.style += "strokeColor=#353535;";
                okButton.style += "strokeColor=#353535;";
                triangle1.style += "strokeColor=none;fillColor=#7E7E7E;";
                triangle2.style += "strokeColor=none;fillColor=#7E7E7E;";
                triangle3.style += "strokeColor=none;fillColor=#7E7E7E;";
                triangle4.style += "strokeColor=none;fillColor=#7E7E7E;";
                triangle5.style += "strokeColor=none;fillColor=#7E7E7E;";
                triangle6.style += "strokeColor=none;fillColor=#7E7E7E;"
            } else {
                v.style += "strokeColor=none;fillColor=#ffffff;shadow=1;";
                cancelButton.style += "strokeColor=#E2E2E2;";
                okButton.style += "strokeColor=#E2E2E2;";
                triangle1.style += "strokeColor=none;fillColor=#939393;";
                triangle2.style += "strokeColor=none;fillColor=#939393;";
                triangle3.style += "strokeColor=none;fillColor=#939393;";
                triangle4.style += "strokeColor=none;fillColor=#939393;";
                triangle5.style += "strokeColor=none;fillColor=#939393;";
                triangle6.style += "strokeColor=none;fillColor=#939393;"
            }
            break;
        case "AndroidListItems":
            var itemFullH = h;
            var startH = 0;
            if (p.ShowHeader) {
                startH = 8;
                var header = new mxCell("",new mxGeometry(0,0,w,startH),"strokeColor=none;fillColor=none;");
                header.vertex = true;
                v.insert(header);
                header.value = convertText(p.Header);
                header.style += getLabelStyle(p.Header);
                itemFullH -= startH;
                var lineH = new mxCell("",new mxGeometry(0,startH - 2,w,4),"shape=line;strokeColor=#999999;");
                lineH.vertex = true;
                v.insert(lineH)
            }
            var numItems = parseInt(p.Items);
            if (numItems > 0)
                itemFullH = itemFullH / numItems;
            var item = new Array;
            var line = new Array;
            for (var i = 0; i < numItems; i++) {
                item[i] = new mxCell("",new mxGeometry(0,startH + i * itemFullH,w,itemFullH),"strokeColor=none;fillColor=none;");
                item[i].vertex = true;
                v.insert(item[i]);
                item[i].value = convertText(p["Item_" + i]);
                item[i].style += getLabelStyle(p["Item_" + i]);
                if (i > 0) {
                    line[i] = new mxCell("",new mxGeometry(0,startH + i * itemFullH - 2,w,4),"shape=line;");
                    line[i].vertex = true;
                    v.insert(line[i]);
                    if (p.Scheme == "Dark")
                        line[i].style += "strokeColor=#ffffff;";
                    else
                        line[i].style += "strokeColor=#D9D9D9;"
                }
            }
            if (p.Scheme == "Dark")
                v.style += "strokeColor=none;fillColor=#111111;";
            else
                v.style += "strokeColor=none;fillColor=#ffffff;";
            break;
        case "AndroidTabs":
            var numTabs = parseInt(p.Tabs);
            var tabFullW = w;
            if (numTabs > 0)
                tabFullW = tabFullW / numTabs;
            var tab = new Array;
            var line = new Array;
            for (var i = 0; i < numTabs; i++) {
                tab[i] = new mxCell("",new mxGeometry(i * tabFullW,0,tabFullW,h),"strokeColor=none;fillColor=none;");
                tab[i].vertex = true;
                v.insert(tab[i]);
                tab[i].value = convertText(p["Tab_" + i]);
                tab[i].style += getLabelStyle(p["Tab_" + i]);
                if (i > 0) {
                    line[i] = new mxCell("",new mxGeometry(i * tabFullW - 2,h * .2,4,h * .6),"shape=line;direction=north;");
                    line[i].vertex = true;
                    v.insert(line[i]);
                    if (p.Scheme == "Dark")
                        line[i].style += "strokeColor=#484848;";
                    else
                        line[i].style += "strokeColor=#CCCCCC;"
                }
            }
            var selectedMarker = new mxCell("",new mxGeometry(p.Selected * tabFullW + 2,h - 3,tabFullW - 4,3),"strokeColor=none;fillColor=#33B5E5;");
            selectedMarker.vertex = true;
            v.insert(selectedMarker);
            if (p.Scheme == "Dark")
                v.style += "strokeColor=none;fillColor=#333333;";
            else
                v.style += "strokeColor=none;fillColor=#DDDDDD;";
            break;
        case "AndroidProgressBar":
            v = new mxCell("",new mxGeometry(Math.round(x),Math.round(y + h * .25),Math.round(w),Math.round(h * .5)),vertexStyle);
            v.vertex = true;
            var progressBar = new mxCell("",new mxGeometry(0,0,w * p.BarPosition,Math.round(h * .5)),"strokeColor=none;fillColor=#33B5E5;");
            progressBar.vertex = true;
            v.insert(progressBar);
            if (p.Scheme == "Dark")
                v.style += "strokeColor=none;fillColor=#474747;";
            else
                v.style += "strokeColor=none;fillColor=#BBBBBB;";
            break;
        case "AndroidImageBlock":
            if (p.Scheme == "Dark")
                v.style += "shape=mxgraph.mockup.graphics.simpleIcon;strokeColor=#7E7E7E;fillColor=#111111;";
            else
                v.style += "shape=mxgraph.mockup.graphics.simpleIcon;strokeColor=#939393;fillColor=#ffffff;";
            break;
        case "AndroidTextBlock":
            if (p.Scheme == "Dark")
                if (p.ShowBorder)
                    v.style += "fillColor=#111111;strokeColor=#ffffff;";
                else
                    v.style += "fillColor=#111111;strokeColor=none;";
            else if (p.ShowBorder)
                v.style += "fillColor=#ffffff;strokeColor=#000000;";
            else
                v.style += "fillColor=#ffffff;strokeColor=none;";
            v.value = convertText(p.Label);
            v.style += getLabelStyle(p.Label);
            break;
        case "AndroidActionBar":
            v.style += "strokeColor=none;";
            switch (p.BarBackground) {
            case "Blue":
                v.style += "fillColor=#002E3E;";
                break;
            case "Gray":
                v.style += "fillColor=#DDDDDD;";
                break;
            case "Dark Gray":
                v.style += "fillColor=#474747;";
                break;
            case "White":
                v.style += "fillColor=#ffffff;";
                break
            }
            if (p.HighlightShow) {
                var highlight = null;
                if (p.HighlightTop)
                    highlight = new mxCell("",new mxGeometry(0,0,w,2),"strokeColor=none;");
                else
                    highlight = new mxCell("",new mxGeometry(0,h - 2,w,2),"strokeColor=none;");
                highlight.vertex = true;
                v.insert(highlight);
                switch (p.HighlightColor) {
                case "Blue":
                    highlight.style += "fillColor=#33B5E5;";
                    break;
                case "Dark Gray":
                    highlight.style += "fillColor=#B0B0B0;";
                    break;
                case "White":
                    highlight.style += "fillColor=#ffffff;";
                    break
                }
            }
            if (p.VlignShow) {
                var vLine = new mxCell("",new mxGeometry(20,5,2,h - 10),"shape=line;direction=north;");
                vLine.vertex = true;
                v.insert(vLine);
                switch (p.VlignColor) {
                case "Blue":
                    vLine.style += "strokeColor=#244C5A;";
                    break;
                case "White":
                    vLine.style += "strokeColor=#ffffff;";
                    break
                }
            }
            break;
        case "AndroidButton":
            v.value = convertText(p.Label);
            v.style += getLabelStyle(p.Label) + "shape=partialRectangle;left=0;right=0;";
            if (p.Scheme == "Dark")
                v.style += "fillColor=#474747;strokeColor=#C6C5C6;bottom=0;";
            else
                v.style += "fillColor=#DFE0DF;strokeColor=#C6C5C6;top=0;";
            break;
        case "AndroidTextBox":
            v.value = convertText(p.Label);
            v.style += getLabelStyle(p.Label);
            var underline = new mxCell("",new mxGeometry(2,h - 6,w - 4,4),"shape=partialRectangle;top=0;fillColor=none;");
            underline.vertex = true;
            v.insert(underline);
            if (p.Scheme == "Dark")
                v.style += "fillColor=#111111;strokeColor=none;";
            else
                v.style += "fillColor=#ffffff;strokeColor=none;";
            if (p.TextFocused)
                underline.style += "strokeColor=#33B5E5;";
            else
                underline.style += "strokeColor=#A9A9A9;";
            break;
        case "AndroidRadioButton":
            var dot = null;
            if (p.Checked) {
                dot = new mxCell("",new mxGeometry(w * .15,h * .15,w * .7,h * .7),"shape=ellipse;fillColor=#33B5E5;strokeWidth=0.6;");
                dot.vertex = true;
                v.insert(dot)
            }
            if (p.Scheme == "Dark") {
                v.style += "shape=ellipse;strokeWidth=0.6;strokeColor=#272727;";
                if (p.Checked) {
                    dot.style += "strokeColor=#1F5C73;";
                    v.style += "fillColor=#193C49;"
                } else
                    v.style += "fillColor=#111111;"
            } else {
                v.style += "shape=ellipse;strokeWidth=0.6;fillColor=#ffffff;strokeColor=#5C5C5C;";
                if (p.Checked)
                    dot.style += "strokeColor=#999999;"
            }
            break;
        case "AndroidCheckBox":
            var check = null;
            if (p.Checked) {
                check = new mxCell("",new mxGeometry(w * .25,-h * .05,w,h * .8),"shape=mxgraph.ios7.misc.check;strokeColor=#33B5E5;strokeWidth=2;");
                check.vertex = true;
                v.insert(check)
            }
            if (p.Scheme == "Dark")
                v.style += "strokeWidth=0.6;strokeColor=#272727;fillColor=#111111;";
            else
                v.style += "strokeWidth=0.6;strokeColor=#5C5C5C;fillColor=#ffffff;";
            break;
        case "AndroidToggle":
            if (p.Scheme == "Dark")
                if (p.Checked)
                    v.style += "shape=mxgraph.android.switch_on;fillColor=#666666;";
                else
                    v.style += "shape=mxgraph.android.switch_off;fillColor=#666666;";
            else if (p.Checked)
                v.style += "shape=mxgraph.android.switch_on;fillColor=#E6E6E6;";
            else
                v.style += "shape=mxgraph.android.switch_off;fillColor=#E6E6E6;";
            break;
        case "AndroidSlider":
            v.style += "shape=mxgraph.android.progressScrubberFocused;dx=" + p.BarPosition + ";fillColor=#33b5e5;";
            break;
        case "iOSSegmentedControl":
            var numTabs = parseInt(p.Tabs);
            var tabFullW = w;
            v.style += "strokeColor=none;fillColor=none;";
            if (numTabs > 0)
                tabFullW = tabFullW / numTabs;
            var tab = new Array;
            var line = new Array;
            for (var i = 0; i < numTabs; i++) {
                tab[i] = new mxCell("",new mxGeometry(i * tabFullW,0,tabFullW,h),"strokeColor=" + p.FillColor + ";");
                tab[i].vertex = true;
                v.insert(tab[i]);
                tab[i].value = convertText(p["Tab_" + i]);
                tab[i].style += getLabelStyle(p["Tab_" + i]);
                if (p.Selected == i)
                    tab[i].style += getFillColor(p, a);
                else
                    tab[i].style += "fillColor=none;"
            }
            break;
        case "iOSSlider":
            v.style += "shape=mxgraph.ios7ui.slider;strokeColor=" + p.FillColor + ";fillColor=#ffffff;strokeWidth=2;barPos=" + p.BarPosition * 100 + ";";
            break;
        case "iOSProgressBar":
            v = new mxCell("",new mxGeometry(Math.round(x),Math.round(y + h * .25),Math.round(w),Math.round(h * .5)),vertexStyle + "strokeColor=none;fillColor=#B5B5B5;");
            v.vertex = true;
            var progressBar = new mxCell("",new mxGeometry(0,0,w * p.BarPosition,Math.round(h * .5)),"strokeColor=none;" + getFillColor(p, a));
            progressBar.vertex = true;
            v.insert(progressBar);
            break;
        case "iOSPageControls":
            v.style += "shape=mxgraph.ios7ui.pageControl;" + getFillColor(p, a) + "strokeColor=#D6D6D6;";
            break;
        case "iOSStatusBar":
            v.style += "shape=mxgraph.ios7ui.appBar;" + getFillColor(p, a) + "strokeColor=#000000;";
            var text1 = new mxCell(convertText(p.Text),new mxGeometry(w * .35,0,w * .3,h),"strokeColor=none;fillColor=none;");
            text1.vertex = true;
            v.insert(text1);
            text1.style += getLabelStyle(p.Text);
            var text2 = new mxCell(convertText(p.Carrier),new mxGeometry(w * .09,0,w * .2,h),"strokeColor=none;fillColor=none;");
            text2.vertex = true;
            v.insert(text2);
            text2.style += getLabelStyle(p.Carrier);
            break;
        case "iOSSearchBar":
            v.style += "strokeColor=none;" + getFillColor(p, a) + getOpacity(p, a) + getRounded(p, a, v) + getLabelStyle(p.Search);
            v.value = convertText(p.Search);
            var icon1 = new mxCell("",new mxGeometry(w * .3,h * .3,h * .4,h * .4),"shape=mxgraph.ios7.icons.looking_glass;strokeColor=#000000;fillColor=none;");
            icon1.vertex = true;
            v.insert(icon1);
            break;
        case "iOSNavBar":
            v.style += "shape=partialRectangle;top=0;right=0;left=0;strokeColor=#979797;" + getFillColor(p, a) + getOpacity(p, a) + getLabelStyle(p.Title);
            v.value = convertText(p.Title);
            var text1 = new mxCell(convertText(p.LeftText),new mxGeometry(w * .03,0,w * .3,h),"strokeColor=none;fillColor=none;");
            text1.vertex = true;
            v.insert(text1);
            text1.style += getLabelStyle(p.LeftText);
            var text2 = new mxCell(convertText(p.RightText),new mxGeometry(w * .65,0,w * .3,h),"strokeColor=none;fillColor=none;");
            text2.vertex = true;
            v.insert(text2);
            text2.style += getLabelStyle(p.RightText);
            var icon1 = new mxCell("",new mxGeometry(w * .02,h * .2,h * .3,h * .5),"shape=mxgraph.ios7.misc.left;strokeColor=#007AFF;strokeWidth=2;");
            icon1.vertex = true;
            v.insert(icon1);
            break;
        case "iOSTabs":
            var numTabs = parseInt(p.Tabs);
            var tabFullW = w;
            v.style += "shape=partialRectangle;right=0;left=0;bottom=0;strokeColor=#979797;" + getFillColor(p, a) + getOpacity(p, a);
            if (numTabs > 0)
                tabFullW = tabFullW / numTabs;
            var tab = new Array;
            var line = new Array;
            for (var i = 0; i < numTabs; i++) {
                tab[i] = new mxCell("",new mxGeometry(i * tabFullW,0,tabFullW,h),"strokeColor=none;");
                tab[i].vertex = true;
                v.insert(tab[i]);
                tab[i].value = convertText(p["Tab_" + i]);
                tab[i].style += getFontSize(p["Tab_" + i]);
                tab[i].style += getFontColor(p["Tab_" + i]) + getFontStyle(p["Tab_" + i]) + getTextAlignment(p["Tab_" + i]) + getTextLeftSpacing(p["Tab_" + i]) + getTextRightSpacing(p["Tab_" + i]) + getTextTopSpacing(p["Tab_" + i]) + getTextBottomSpacing(p["Tab_" + i]) + getTextGlobalSpacing(p["Tab_" + i]);
                tab[i].style += "verticalAlign=bottom;";
                if (p.Selected == i)
                    tab[i].style += "fillColor=#BBBBBB;";
                else
                    tab[i].style += "fillColor=none;"
            }
            break;
        case "iOSDatePicker":
            var firstDate1 = new mxCell("",new mxGeometry(0,0,w * .5,h * .2),"strokeColor=none;fillColor=none;");
            firstDate1.vertex = true;
            v.insert(firstDate1);
            firstDate1.value = convertText(p.Option11);
            firstDate1.style += getLabelStyle(p.Option11);
            var firstDate2 = new mxCell("",new mxGeometry(w * .5,0,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            firstDate2.vertex = true;
            v.insert(firstDate2);
            firstDate2.value = convertText(p.Option21);
            firstDate2.style += getLabelStyle(p.Option21);
            var firstDate3 = new mxCell("",new mxGeometry(w * .65,0,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            firstDate3.vertex = true;
            v.insert(firstDate3);
            firstDate3.value = convertText(p.Option31);
            firstDate3.style += getLabelStyle(p.Option31);
            var secondDate1 = new mxCell("",new mxGeometry(0,h * .2,w * .5,h * .2),"strokeColor=none;fillColor=none;");
            secondDate1.vertex = true;
            v.insert(secondDate1);
            secondDate1.value = convertText(p.Option12);
            secondDate1.style += getLabelStyle(p.Option12);
            var secondDate2 = new mxCell("",new mxGeometry(w * .5,h * .2,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            secondDate2.vertex = true;
            v.insert(secondDate2);
            secondDate2.value = convertText(p.Option22);
            secondDate2.style += getLabelStyle(p.Option22);
            var secondDate3 = new mxCell("",new mxGeometry(w * .65,h * .2,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            secondDate3.vertex = true;
            v.insert(secondDate3);
            secondDate3.value = convertText(p.Option32);
            secondDate3.style += getLabelStyle(p.Option32);
            var currDate1 = new mxCell("",new mxGeometry(0,h * .4,w * .5,h * .2),"strokeColor=none;fillColor=none;");
            currDate1.vertex = true;
            v.insert(currDate1);
            currDate1.value = convertText(p.Option13);
            currDate1.style += getLabelStyle(p.Option13);
            var currDate2 = new mxCell("",new mxGeometry(w * .5,h * .4,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            currDate2.vertex = true;
            v.insert(currDate2);
            currDate2.value = convertText(p.Option23);
            currDate2.style += getLabelStyle(p.Option23);
            var currDate3 = new mxCell("",new mxGeometry(w * .65,h * .4,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            currDate3.vertex = true;
            v.insert(currDate3);
            currDate3.value = convertText(p.Option33);
            currDate3.style += getLabelStyle(p.Option33);
            var currDate4 = new mxCell("",new mxGeometry(w * .8,h * .4,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            currDate4.vertex = true;
            v.insert(currDate4);
            currDate4.value = convertText(p.Option43);
            currDate4.style += getLabelStyle(p.Option43);
            var fourthDate1 = new mxCell("",new mxGeometry(0,h * .6,w * .5,h * .2),"strokeColor=none;fillColor=none;");
            fourthDate1.vertex = true;
            v.insert(fourthDate1);
            fourthDate1.value = convertText(p.Option14);
            fourthDate1.style += getLabelStyle(p.Option14);
            var fourthDate2 = new mxCell("",new mxGeometry(w * .5,h * .6,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            fourthDate2.vertex = true;
            v.insert(fourthDate2);
            fourthDate2.value = convertText(p.Option24);
            fourthDate2.style += getLabelStyle(p.Option24);
            var fourthDate3 = new mxCell("",new mxGeometry(w * .65,h * .6,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            fourthDate3.vertex = true;
            v.insert(fourthDate3);
            fourthDate3.value = convertText(p.Option34);
            fourthDate3.style += getLabelStyle(p.Option34);
            var fourthDate4 = new mxCell("",new mxGeometry(w * .8,h * .6,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            fourthDate4.vertex = true;
            v.insert(fourthDate4);
            fourthDate4.value = convertText(p.Option44);
            fourthDate4.style += getLabelStyle(p.Option44);
            var fifthDate1 = new mxCell("",new mxGeometry(0,h * .8,w * .5,h * .2),"strokeColor=none;fillColor=none;");
            fifthDate1.vertex = true;
            v.insert(fifthDate1);
            fifthDate1.value = convertText(p.Option15);
            fifthDate1.style += getLabelStyle(p.Option15);
            var fifthDate2 = new mxCell("",new mxGeometry(w * .5,h * .8,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            fifthDate2.vertex = true;
            v.insert(fifthDate2);
            fifthDate2.value = convertText(p.Option25);
            fifthDate2.style += getLabelStyle(p.Option25);
            var fifthDate3 = new mxCell("",new mxGeometry(w * .65,h * .8,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            fifthDate3.vertex = true;
            v.insert(fifthDate3);
            fifthDate3.value = convertText(p.Option35);
            fifthDate3.style += getLabelStyle(p.Option35);
            var line1 = new mxCell("",new mxGeometry(0,h * .4 - 2,w,4),"shape=line;strokeColor=#888888;");
            line1.vertex = true;
            v.insert(line1);
            var line2 = new mxCell("",new mxGeometry(0,h * .6 - 2,w,4),"shape=line;strokeColor=#888888;");
            line2.vertex = true;
            v.insert(line2);
            v.style += getFillColor(p, a) + getOpacity(p, a) + "strokeColor=none;";
            break;
        case "iOSTimePicker":
            var firstDate1 = new mxCell("",new mxGeometry(0,0,w * .25,h * .2),"strokeColor=none;fillColor=none;");
            firstDate1.vertex = true;
            v.insert(firstDate1);
            firstDate1.value = convertText(p.Option11);
            firstDate1.style += getLabelStyle(p.Option11);
            var firstDate2 = new mxCell("",new mxGeometry(w * .25,0,w * .3,h * .2),"strokeColor=none;fillColor=none;");
            firstDate2.vertex = true;
            v.insert(firstDate2);
            firstDate2.value = convertText(p.Option21);
            firstDate2.style += getLabelStyle(p.Option21);
            var secondDate1 = new mxCell("",new mxGeometry(0,h * .2,w * .25,h * .2),"strokeColor=none;fillColor=none;");
            secondDate1.vertex = true;
            v.insert(secondDate1);
            secondDate1.value = convertText(p.Option12);
            secondDate1.style += getLabelStyle(p.Option12);
            var secondDate2 = new mxCell("",new mxGeometry(w * .25,h * .2,w * .3,h * .2),"strokeColor=none;fillColor=none;");
            secondDate2.vertex = true;
            v.insert(secondDate2);
            secondDate2.value = convertText(p.Option22);
            secondDate2.style += getLabelStyle(p.Option22);
            var currDate1 = new mxCell("",new mxGeometry(0,h * .4,w * .25,h * .2),"strokeColor=none;fillColor=none;");
            currDate1.vertex = true;
            v.insert(currDate1);
            currDate1.value = convertText(p.Option13);
            currDate1.style += getLabelStyle(p.Option13);
            var currDate2 = new mxCell("",new mxGeometry(w * .25,h * .4,w * .3,h * .2),"strokeColor=none;fillColor=none;");
            currDate2.vertex = true;
            v.insert(currDate2);
            currDate2.value = convertText(p.Option23);
            currDate2.style += getLabelStyle(p.Option23);
            var currDate4 = new mxCell("",new mxGeometry(w * .7,h * .4,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            currDate4.vertex = true;
            v.insert(currDate4);
            currDate4.value = convertText(p.Option33);
            currDate4.style += getLabelStyle(p.Option33);
            var fourthDate1 = new mxCell("",new mxGeometry(0,h * .6,w * .25,h * .2),"strokeColor=none;fillColor=none;");
            fourthDate1.vertex = true;
            v.insert(fourthDate1);
            fourthDate1.value = convertText(p.Option14);
            fourthDate1.style += getLabelStyle(p.Option14);
            var fourthDate2 = new mxCell("",new mxGeometry(w * .25,h * .6,w * .3,h * .2),"strokeColor=none;fillColor=none;");
            fourthDate2.vertex = true;
            v.insert(fourthDate2);
            fourthDate2.value = convertText(p.Option24);
            fourthDate2.style += getLabelStyle(p.Option24);
            var fourthDate4 = new mxCell("",new mxGeometry(w * .7,h * .6,w * .15,h * .2),"strokeColor=none;fillColor=none;");
            fourthDate4.vertex = true;
            v.insert(fourthDate4);
            fourthDate4.value = convertText(p.Option34);
            fourthDate4.style += getLabelStyle(p.Option34);
            var fifthDate1 = new mxCell("",new mxGeometry(0,h * .8,w * .25,h * .2),"strokeColor=none;fillColor=none;");
            fifthDate1.vertex = true;
            v.insert(fifthDate1);
            fifthDate1.value = convertText(p.Option15);
            fifthDate1.style += getLabelStyle(p.Option15);
            var fifthDate2 = new mxCell("",new mxGeometry(w * .25,h * .8,w * .3,h * .2),"strokeColor=none;fillColor=none;");
            fifthDate2.vertex = true;
            v.insert(fifthDate2);
            fifthDate2.value = convertText(p.Option25);
            fifthDate2.style += getLabelStyle(p.Option25);
            var line1 = new mxCell("",new mxGeometry(0,h * .4 - 2,w,4),"shape=line;strokeColor=#888888;");
            line1.vertex = true;
            v.insert(line1);
            var line2 = new mxCell("",new mxGeometry(0,h * .6 - 2,w,4),"shape=line;strokeColor=#888888;");
            line2.vertex = true;
            v.insert(line2);
            v.style += getFillColor(p, a) + getOpacity(p, a) + "strokeColor=none;";
            break;
        case "iOSCountdownPicker":
            var firstDate3 = new mxCell("",new mxGeometry(w * .45,0,w * .2,h * .2),"strokeColor=none;fillColor=none;");
            firstDate3.vertex = true;
            v.insert(firstDate3);
            firstDate3.value = convertText(p.Option31);
            firstDate3.style += getLabelStyle(p.Option31);
            var secondDate3 = new mxCell("",new mxGeometry(w * .45,h * .2,w * .2,h * .2),"strokeColor=none;fillColor=none;");
            secondDate3.vertex = true;
            v.insert(secondDate3);
            secondDate3.value = convertText(p.Option32);
            secondDate3.style += getLabelStyle(p.Option32);
            var currDate1 = new mxCell("",new mxGeometry(0,h * .4,w * .25,h * .2),"strokeColor=none;fillColor=none;");
            currDate1.vertex = true;
            v.insert(currDate1);
            currDate1.value = convertText(p.Option13);
            currDate1.style += getLabelStyle(p.Option13);
            var currDate2 = new mxCell("",new mxGeometry(w * .2,h * .4,w * .25,h * .2),"strokeColor=none;fillColor=none;");
            currDate2.vertex = true;
            v.insert(currDate2);
            currDate2.value = convertText(p.Option23);
            currDate2.style += getLabelStyle(p.Option23);
            var currDate3 = new mxCell("",new mxGeometry(w * .45,h * .4,w * .2,h * .2),"strokeColor=none;fillColor=none;");
            currDate3.vertex = true;
            v.insert(currDate3);
            currDate3.value = convertText(p.Option33);
            currDate3.style += getLabelStyle(p.Option33);
            var currDate4 = new mxCell("",new mxGeometry(w * .6,h * .4,w * .2,h * .2),"strokeColor=none;fillColor=none;");
            currDate4.vertex = true;
            v.insert(currDate4);
            currDate4.value = convertText(p.Option43);
            currDate4.style += getLabelStyle(p.Option43);
            var fourthDate1 = new mxCell("",new mxGeometry(0,h * .6,w * .25,h * .2),"strokeColor=none;fillColor=none;");
            fourthDate1.vertex = true;
            v.insert(fourthDate1);
            fourthDate1.value = convertText(p.Option14);
            fourthDate1.style += getLabelStyle(p.Option14);
            var fourthDate3 = new mxCell("",new mxGeometry(w * .45,h * .6,w * .2,h * .2),"strokeColor=none;fillColor=none;");
            fourthDate3.vertex = true;
            v.insert(fourthDate3);
            fourthDate3.value = convertText(p.Option34);
            fourthDate3.style += getLabelStyle(p.Option34);
            var fifthDate1 = new mxCell("",new mxGeometry(0,h * .8,w * .25,h * .2),"strokeColor=none;fillColor=none;");
            fifthDate1.vertex = true;
            v.insert(fifthDate1);
            fifthDate1.value = convertText(p.Option15);
            fifthDate1.style += getLabelStyle(p.Option15);
            var fifthDate3 = new mxCell("",new mxGeometry(w * .45,h * .8,w * .2,h * .2),"strokeColor=none;fillColor=none;");
            fifthDate3.vertex = true;
            v.insert(fifthDate3);
            fifthDate3.value = convertText(p.Option35);
            fifthDate3.style += getLabelStyle(p.Option35);
            var line1 = new mxCell("",new mxGeometry(0,h * .4 - 2,w,4),"shape=line;strokeColor=#888888;");
            line1.vertex = true;
            v.insert(line1);
            var line2 = new mxCell("",new mxGeometry(0,h * .6 - 2,w,4),"shape=line;strokeColor=#888888;");
            line2.vertex = true;
            v.insert(line2);
            v.style += getFillColor(p, a) + getOpacity(p, a) + "strokeColor=none;";
            break;
        case "iOSBasicCell":
            v.style += "shape=partialRectangle;left=0;top=0;right=0;fillColor=#ffffff;strokeColor=#C8C7CC;spacing=0;align=left;spacingLeft=" + p.SeparatorInset * scale + ";";
            v.style += getFontSize(p.text) + getFontColor(p.text) + getFontStyle(p.text) + getTextVerticalAlignment(p.text);
            v.value = convertText(p.text);
            switch (p.AccessoryIndicatorType) {
            case "Disclosure":
                var icon1 = new mxCell("",new mxGeometry(w * .91,h * .35,h * .15,h * .3),"shape=mxgraph.ios7.misc.right;strokeColor=#D2D2D6;");
                icon1.vertex = true;
                v.insert(icon1);
                break;
            case "DetailDisclosure":
                var icon1 = new mxCell("",new mxGeometry(w * .91,h * .35,h * .15,h * .3),"shape=mxgraph.ios7.misc.right;strokeColor=#D2D2D6;");
                icon1.vertex = true;
                v.insert(icon1);
                var icon2 = new mxCell("",new mxGeometry(w * .79,h * .25,h * .5,h * .5),"shape=mxgraph.ios7.icons.info;strokeColor=#007AFF;fillColor=#ffffff;");
                icon2.vertex = true;
                v.insert(icon2);
                break;
            case "DetailIndicator":
                var icon2 = new mxCell("",new mxGeometry(w * .87,h * .25,h * .5,h * .5),"shape=mxgraph.ios7.icons.info;strokeColor=#007AFF;fillColor=#ffffff;");
                icon2.vertex = true;
                v.insert(icon2);
                break;
            case "CheckMark":
                var icon1 = new mxCell("",new mxGeometry(w * .89,h * .37,h * .4,h * .26),"shape=mxgraph.ios7.misc.check;strokeColor=#007AFF;strokeWidth=2;");
                icon1.vertex = true;
                v.insert(icon1);
                break
            }
            break;
        case "iOSSubtitleCell":
            v.style += "shape=partialRectangle;left=0;top=0;right=0;fillColor=#ffffff;strokeColor=#C8C7CC;align=left;spacing=0;verticalAlign=top;spacingLeft=" + p.SeparatorInset * scale + ";";
            v.style += getFontSize(p.subtext) + getFontColor(p.subtext) + getFontStyle(p.subtext);
            v.value = convertText(p.subtext);
            var subtext = new mxCell("",new mxGeometry(0,h * .4,w,h * .6),"fillColor=none;strokeColor=none;spacing=0;align=left;verticalAlign=bottom;spacingLeft=" + p.SeparatorInset * scale + ";");
            subtext.vertex = true;
            v.insert(subtext);
            subtext.style += getFontSize(p.text) + getFontColor(p.text) + getFontStyle(p.text);
            subtext.value = convertText(p.text);
            switch (p.AccessoryIndicatorType) {
            case "Disclosure":
                var icon1 = new mxCell("",new mxGeometry(w * .91,h * .35,h * .15,h * .3),"shape=mxgraph.ios7.misc.right;strokeColor=#D2D2D6;");
                icon1.vertex = true;
                v.insert(icon1);
                break;
            case "DetailDisclosure":
                var icon1 = new mxCell("",new mxGeometry(w * .91,h * .35,h * .15,h * .3),"shape=mxgraph.ios7.misc.right;strokeColor=#D2D2D6;");
                icon1.vertex = true;
                v.insert(icon1);
                var icon2 = new mxCell("",new mxGeometry(w * .79,h * .25,h * .5,h * .5),"shape=mxgraph.ios7.icons.info;strokeColor=#007AFF;fillColor=#ffffff;");
                icon2.vertex = true;
                v.insert(icon2);
                break;
            case "DetailIndicator":
                var icon2 = new mxCell("",new mxGeometry(w * .87,h * .25,h * .5,h * .5),"shape=mxgraph.ios7.icons.info;strokeColor=#007AFF;fillColor=#ffffff;");
                icon2.vertex = true;
                v.insert(icon2);
                break;
            case "CheckMark":
                var icon1 = new mxCell("",new mxGeometry(w * .89,h * .37,h * .4,h * .26),"shape=mxgraph.ios7.misc.check;strokeColor=#007AFF;strokeWidth=2;");
                icon1.vertex = true;
                v.insert(icon1);
                break
            }
            break;
        case "iOSRightDetailCell":
            v.style += "shape=partialRectangle;left=0;top=0;right=0;fillColor=#ffffff;strokeColor=#C8C7CC;align=left;spacing=0;verticalAlign=middle;spacingLeft=" + p.SeparatorInset * scale + ";";
            v.style += getFontSize(p.subtext) + getFontColor(p.subtext) + getFontStyle(p.subtext);
            v.value = convertText(p.subtext);
            var subtext = null;
            switch (p.AccessoryIndicatorType) {
            case "Disclosure":
                var icon1 = new mxCell("",new mxGeometry(w * .91,h * .35,h * .15,h * .3),"shape=mxgraph.ios7.misc.right;strokeColor=#D2D2D6;");
                icon1.vertex = true;
                v.insert(icon1);
                subtext = new mxCell("",new mxGeometry(w * .55,0,w * .3,h),"fillColor=none;strokeColor=none;spacing=0;align=right;");
                break;
            case "DetailDisclosure":
                var icon1 = new mxCell("",new mxGeometry(w * .91,h * .35,h * .15,h * .3),"shape=mxgraph.ios7.misc.right;strokeColor=#D2D2D6;");
                icon1.vertex = true;
                v.insert(icon1);
                var icon2 = new mxCell("",new mxGeometry(w * .79,h * .25,h * .5,h * .5),"shape=mxgraph.ios7.icons.info;strokeColor=#007AFF;fillColor=#ffffff;");
                icon2.vertex = true;
                v.insert(icon2);
                subtext = new mxCell("",new mxGeometry(w * .45,0,w * .3,h),"fillColor=none;strokeColor=none;spacing=0;align=right;");
                break;
            case "DetailIndicator":
                var icon2 = new mxCell("",new mxGeometry(w * .87,h * .25,h * .5,h * .5),"shape=mxgraph.ios7.icons.info;strokeColor=#007AFF;fillColor=#ffffff;");
                icon2.vertex = true;
                v.insert(icon2);
                subtext = new mxCell("",new mxGeometry(w * .52,0,w * .3,h),"fillColor=none;strokeColor=none;spacing=0;align=right;");
                break;
            case "CheckMark":
                var icon1 = new mxCell("",new mxGeometry(w * .89,h * .37,h * .4,h * .26),"shape=mxgraph.ios7.misc.check;strokeColor=#007AFF;strokeWidth=2;");
                icon1.vertex = true;
                v.insert(icon1);
                subtext = new mxCell("",new mxGeometry(w * .55,0,w * .3,h),"fillColor=none;strokeColor=none;spacing=0;align=right;");
                break;
            default:
                subtext = new mxCell("",new mxGeometry(w * .65,0,w * .3,h),"fillColor=none;strokeColor=none;spacing=0;align=right;")
            }
            subtext.vertex = true;
            v.insert(subtext);
            subtext.style += getFontSize(p.text) + getFontColor(p.text) + getFontStyle(p.text);
            subtext.value = convertText(p.text);
            break;
        case "iOSLeftDetailCell":
            v.style += "shape=partialRectangle;left=0;top=0;right=0;fillColor=#ffffff;strokeColor=#C8C7CC;";
            var text = new mxCell("",new mxGeometry(0,0,w * .25,h),"fillColor=none;strokeColor=none;spacing=0;align=right;verticalAlign=middle;spacingRight=3;");
            text.vertex = true;
            v.insert(text);
            text.style += getFontSize(p.subtext) + getFontColor(p.subtext) + getFontStyle(p.subtext);
            text.value = convertText(p.subtext);
            var subtext = new mxCell("",new mxGeometry(w * .25,0,w * .5,h),"fillColor=none;strokeColor=none;spacing=0;align=left;verticalAlign=middle;spacingLeft=3;");
            subtext.vertex = true;
            v.insert(subtext);
            subtext.style += getFontSize(p.text) + getFontColor(p.text) + getFontStyle(p.text);
            subtext.value = convertText(p.text);
            switch (p.AccessoryIndicatorType) {
            case "Disclosure":
                var icon1 = new mxCell("",new mxGeometry(w * .91,h * .35,h * .15,h * .3),"shape=mxgraph.ios7.misc.right;strokeColor=#D2D2D6;");
                icon1.vertex = true;
                v.insert(icon1);
                break;
            case "DetailDisclosure":
                var icon1 = new mxCell("",new mxGeometry(w * .91,h * .35,h * .15,h * .3),"shape=mxgraph.ios7.misc.right;strokeColor=#D2D2D6;");
                icon1.vertex = true;
                v.insert(icon1);
                var icon2 = new mxCell("",new mxGeometry(w * .79,h * .25,h * .5,h * .5),"shape=mxgraph.ios7.icons.info;strokeColor=#007AFF;fillColor=#ffffff;");
                icon2.vertex = true;
                v.insert(icon2);
                break;
            case "DetailIndicator":
                var icon2 = new mxCell("",new mxGeometry(w * .87,h * .25,h * .5,h * .5),"shape=mxgraph.ios7.icons.info;strokeColor=#007AFF;fillColor=#ffffff;");
                icon2.vertex = true;
                v.insert(icon2);
                break;
            case "CheckMark":
                var icon1 = new mxCell("",new mxGeometry(w * .89,h * .37,h * .4,h * .26),"shape=mxgraph.ios7.misc.check;strokeColor=#007AFF;strokeWidth=2;");
                icon1.vertex = true;
                v.insert(icon1);
                break
            }
            break;
        case "iOSTableGroupedSectionBreak":
            v.style += "shape=partialRectangle;left=0;right=0;fillColor=#EFEFF4;strokeColor=#C8C7CC;";
            var text1 = new mxCell("",new mxGeometry(0,0,w,h * .4),"fillColor=none;strokeColor=none;spacing=10;align=left;");
            text1.vertex = true;
            v.insert(text1);
            text1.style += getFontSize(p.text) + getFontColor(p.text) + getFontStyle(p.text);
            text1.value = convertText(p.text);
            var text2 = new mxCell("",new mxGeometry(0,h * .6,w,h * .4),"fillColor=none;strokeColor=none;spacing=10;align=left;");
            text2.vertex = true;
            v.insert(text2);
            text2.style += getFontSize(p["bottom-text"]) + getFontColor(p["bottom-text"]) + getFontStyle(p["bottom-text"]);
            text2.value = convertText(p["bottom-text"]);
            break;
        case "iOSTablePlainHeaderFooter":
            v.style += "fillColor=#F7F7F7;strokeColor=none;align=left;spacingLeft=5;spacing=0;";
            v.style += getFontSize(p.text) + getFontColor(p.text) + getFontStyle(p.text);
            v.value = convertText(p.text);
            break;
        case "SMPage":
            if (p.Group) {
                v.style += "strokeColor=none;fillColor=none;";
                var item1 = new mxCell("",new mxGeometry(0,0,w * .9,h * .9),"part=1;");
                item1.vertex = true;
                v.insert(item1);
                item1.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p);
                var item2 = new mxCell("",new mxGeometry(w * .1,h * .1,w * .9,h * .9),"part=1;");
                item2.vertex = true;
                v.insert(item2);
                item2.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p);
                item2.value = convertText(p.Text);
                if (p.Future) {
                    item1.style += "dashed=1;";
                    item2.style += "dashed=1;"
                }
            } else {
                if (p.Future)
                    v.style += "dashed=1;";
                v.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p);
                v.value = convertText(p.Text)
            }
            break;
        case "SMHome":
        case "SMPrint":
        case "SMSearch":
        case "SMSettings":
        case "SMSitemap":
        case "SMSuccess":
        case "SMVideo":
        case "SMAudio":
        case "SMCalendar":
        case "SMChart":
        case "SMCloud":
        case "SMDocument":
        case "SMForm":
        case "SMGame":
        case "SMUpload":
            v.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p);
            var item1 = null;
            switch (obj.Class) {
            case "SMHome":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .4,h * .1,h * .8,h * .8),"part=1;shape=mxgraph.office.concepts.home;flipH=1;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMPrint":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .4,h * .19,h * .8,h * .62),"part=1;shape=mxgraph.office.devices.printer;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMSearch":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .4,h * .1,h * .8,h * .8),"part=1;shape=mxgraph.office.concepts.search;flipH=1;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMSettings":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .35,h * .15,h * .7,h * .7),"part=1;shape=mxgraph.mscae.enterprise.settings;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMSitemap":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .35,h * .2,h * .7,h * .6),"part=1;shape=mxgraph.office.sites.site_collection;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMSuccess":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .3,h * .25,h * .6,h * .5),"part=1;shape=mxgraph.mscae.general.checkmark;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMVideo":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .4,h * .2,h * .8,h * .6),"part=1;shape=mxgraph.office.concepts.video_play;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMAudio":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .3,h * .2,h * .6,h * .6),"part=1;shape=mxgraph.mscae.general.audio;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMCalendar":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .4,h * .15,h * .8,h * .7),"part=1;shape=mxgraph.office.concepts.form;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMChart":
                var fc = getFillColor(p, a);
                if (fc == "")
                    fc = "#ffffff;";
                else
                    fc = fc.replace("fillColor=", "");
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .35,h * .15,h * .7,h * .7),"part=1;shape=mxgraph.ios7.icons.pie_chart;fillColor=#e6e6e6;fillOpacity=50;strokeWidth=4;strokeColor=" + fc);
                break;
            case "SMCloud":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .4,h * .27,h * .8,h * .46),"part=1;shape=mxgraph.networks.cloud;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMDocument":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .25,h * .15,h * .5,h * .7),"part=1;shape=mxgraph.mscae.enterprise.document;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMForm":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .4,h * .15,h * .8,h * .7),"part=1;shape=mxgraph.office.concepts.form;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMGame":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .4,h * .2,h * .8,h * .6),"part=1;shape=mxgraph.mscae.general.game_controller;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break;
            case "SMUpload":
                item1 = new mxCell("",new mxGeometry(w * .5 - h * .4,h * .2,h * .8,h * .6),"part=1;shape=mxgraph.mscae.enterprise.backup_online;fillColor=#e6e6e6;opacity=50;strokeColor=none;");
                break
            }
            item1.vertex = true;
            v.insert(item1);
            item1.style += getLabelStyle(p);
            item1.value = convertText(p.Text);
            break;
        case "UMLMultiplicityBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var item1 = new mxCell("",new mxGeometry(w * .1,0,w * .9,h * .9),"part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p);
            var item2 = new mxCell("",new mxGeometry(0,h * .1,w * .9,h * .9),"part=1;");
            item2.vertex = true;
            v.insert(item2);
            item2.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p.Text);
            item2.value = convertText(p.Text);
            break;
        case "UMLConstraintBlock":
            var brace1 = new mxCell("",new mxGeometry(0,0,h * .25,h),"shape=curlyBracket;rounded=1;");
            brace1.vertex = true;
            v.insert(brace1);
            var brace2 = new mxCell("",new mxGeometry(w - h * .25,0,h * .25,h),"shape=curlyBracket;rounded=1;flipH=1;");
            brace2.vertex = true;
            v.insert(brace2);
            var label = new mxCell("",new mxGeometry(h * .25,0,w - h * .5,h),"strokeColor=none;fillColor=none;");
            label.vertex = true;
            label.value = convertText(p);
            v.insert(label);
            v.style = "strokeColor=none;fillColor=none;";
            v.style += getRotation(p, a, v);
            brace1.style += getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getStrokeWidth(p);
            brace2.style += getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getStrokeWidth(p);
            label.style += getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p) + getTextLeftSpacing(p) + getTextRightSpacing(p) + getTextTopSpacing(p) + getTextBottomSpacing(p) + getTextGlobalSpacing(p) + getTextVerticalAlignment(p);
            break;
        case "UMLTextBlock":
            v.style += "strokeColor=none;" + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getStrokeWidth(p) + getLabelStyle(p.Text);
            v.value = convertText(p.Text);
            break;
        case "UMLMultiLanePoolBlock":
            break;
        case "UMLMultiLanePoolRotatedBlock":
            break;
        case "UMLMultidimensionalSwimlane":
            break;
        case "UMLComponentBoxBlock":
            break;
        case "BPMNActivity":
            switch (p.bpmnActivityType) {
            case 1:
                v.style += getFillColor(p, a) + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getStrokeWidth(p) + getLabelStyle(p.Text);
                v.value = convertText(p.Text);
                break;
            case 2:
                v.style += "shape=ext;double=1;" + getFillColor(p, a) + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getStrokeWidth(p) + getLabelStyle(p.Text);
                v.value = convertText(p.Text);
                break;
            case 3:
                v.style += "shape=ext;dashed=1;dashPattern=2 1;" + getFillColor(p, a) + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p.Text);
                v.value = convertText(p.Text);
                break;
            case 4:
                v.style += "shape=ext;strokeWidth=2;" + getFillColor(p, a) + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getLabelStyle(p.Text);
                v.value = convertText(p.Text);
                break
            }
            if (p.bpmnTaskType != 0) {
                switch (p.bpmnTaskType) {
                case 1:
                    var item1 = new mxCell("",new mxGeometry(0,0,19,12),"shape=message;");
                    item1.geometry.offset = new mxPoint(4,7);
                    break;
                case 2:
                    var item1 = new mxCell("",new mxGeometry(0,0,19,12),"shape=message;");
                    item1.geometry.offset = new mxPoint(4,7);
                    break;
                case 3:
                    var item1 = new mxCell("",new mxGeometry(0,0,15,15),"shape=mxgraph.bpmn.user_task;");
                    item1.geometry.offset = new mxPoint(4,5);
                    break;
                case 4:
                    var item1 = new mxCell("",new mxGeometry(0,0,15,10),"shape=mxgraph.bpmn.manual_task;");
                    item1.geometry.offset = new mxPoint(4,7);
                    break;
                case 5:
                    var item1 = new mxCell("",new mxGeometry(0,0,18,13),"shape=mxgraph.bpmn.business_rule_task;");
                    item1.geometry.offset = new mxPoint(4,7);
                    break;
                case 6:
                    var item1 = new mxCell("",new mxGeometry(0,0,15,15),"shape=mxgraph.bpmn.service_task;");
                    item1.geometry.offset = new mxPoint(4,5);
                    break;
                case 7:
                    var item1 = new mxCell("",new mxGeometry(0,0,15,15),"shape=mxgraph.bpmn.script_task;");
                    item1.geometry.offset = new mxPoint(4,5);
                    break
                }
                if (p.bpmnTaskType == 1) {
                    var sc = getFillColor(p, a);
                    var fc = getStrokeColor(p, a);
                    fc = fc.replace("strokeColor", "fillColor");
                    sc = sc.replace("fillColor", "strokeColor");
                    if (fc == "")
                        fc = "fillColor=#000000;";
                    if (sc == "")
                        sc = "strokeColor=#ffffff;";
                    item1.style += sc + fc + "part=1;"
                } else
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a) + "part=1;";
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1)
            }
            var numIcons = 0;
            if (p.bpmnActivityMarker1 != 0)
                numIcons++;
            if (p.bpmnActivityMarker2 != 0)
                numIcons++;
            var iconX = 0;
            var iconY = h - 20;
            if (numIcons == 1)
                iconX = -7.5;
            else if (numIcons == 2)
                iconX = -19;
            if (p.bpmnActivityMarker1 != 0) {
                switch (p.bpmnActivityMarker1) {
                case 1:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,15),"shape=plus;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-20);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break;
                case 2:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,15),"shape=mxgraph.bpmn.loop;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-20);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break;
                case 3:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,15),"shape=parallelMarker;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-20);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break;
                case 4:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,15),"shape=parallelMarker;direction=south;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-20);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break;
                case 5:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,10),"shape=mxgraph.bpmn.ad_hoc;strokeColor=none;flipH=1;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-17);
                    var fc = getStrokeColor(p, a);
                    fc = fc.replace("strokeColor", "fillColor");
                    if (fc == "")
                        fc = "fillColor=#000000;";
                    item1.style += fc;
                    break;
                case 6:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,11),"shape=mxgraph.bpmn.compensation;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-18);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break
                }
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1)
            }
            if (numIcons == 2)
                iconX = 5;
            if (p.bpmnActivityMarker2 != 0) {
                switch (p.bpmnActivityMarker2) {
                case 1:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,15),"shape=plus;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-20);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break;
                case 2:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,15),"shape=mxgraph.bpmn.loop;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-20);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break;
                case 3:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,15),"shape=parallelMarker;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-20);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break;
                case 4:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,15),"shape=parallelMarker;direction=south;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-20);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break;
                case 5:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,10),"shape=mxgraph.bpmn.ad_hoc;strokeColor=none;flipH=1;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-17);
                    var fc = getStrokeColor(p, a);
                    fc = fc.replace("strokeColor", "fillColor");
                    if (fc == "")
                        fc = "fillColor=#000000;";
                    item1.style += fc;
                    break;
                case 6:
                    var item1 = new mxCell("",new mxGeometry(.5,1,15,11),"shape=mxgraph.bpmn.compensation;part=1;");
                    item1.geometry.offset = new mxPoint(iconX,-18);
                    item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                    break
                }
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1)
            }
            break;
        case "BPMNEvent":
            v.style += "shape=mxgraph.bpmn.shape;verticalLabelPosition=bottom;verticalAlign=top;" + getFillColor(p, a) + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getStrokeWidth(p) + getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p) + getTextLeftSpacing(p) + getTextRightSpacing(p) + getTextTopSpacing(p) + getTextBottomSpacing(p) + getTextGlobalSpacing(p);
            v.value = convertText(p.Text);
            if (p.bpmnDashed == true)
                switch (p.bpmnEventGroup) {
                case 0:
                    v.style += "outline=eventNonint;";
                    break;
                case 1:
                    v.style += "outline=boundNonint;";
                    break;
                case 2:
                    v.style += "outline=end;";
                    break
                }
            else
                switch (p.bpmnEventGroup) {
                case 0:
                    v.style += "outline=standard;";
                    break;
                case 1:
                    v.style += "outline=throwing;";
                    break;
                case 2:
                    v.style += "outline=end;";
                    break
                }
            switch (p.bpmnEventType) {
            case 1:
                v.style += "symbol=message;";
                break;
            case 2:
                v.style += "symbol=timer;";
                break;
            case 3:
                v.style += "symbol=escalation;";
                break;
            case 4:
                v.style += "symbol=conditional;";
                break;
            case 5:
                v.style += "symbol=link;";
                break;
            case 6:
                v.style += "symbol=error;";
                break;
            case 7:
                v.style += "symbol=cancel;";
                break;
            case 8:
                v.style += "symbol=compensation;";
                break;
            case 9:
                v.style += "symbol=signal;";
                break;
            case 10:
                v.style += "symbol=multiple;";
                break;
            case 11:
                v.style += "symbol=parallelMultiple;";
                break;
            case 12:
                v.style += "symbol=terminate;";
                break
            }
            break;
        case "BPMNChoreography":
            break;
        case "BPMNConversation":
            v.style += "shape=hexagon;perimeter=hexagonPerimeter2;" + getFillColor(p, a) + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            if (p.bpmnConversationType == 0)
                v.style += getStrokeWidth(p);
            else
                v.style += "strokeWidth=2;";
            if (p.bpmnIsSubConversation) {
                var item1 = new mxCell("",new mxGeometry(.5,1,12,12),"shape=plus;part=1;");
                item1.geometry.offset = new mxPoint(-6,-17);
                item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1)
            }
            break;
        case "BPMNGateway":
            v.style += "shape=mxgraph.bpmn.shape;perimeter=rhombusPerimeter;background=gateway;" + getFillColor(p, a) + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getLabelStyle(p);
            switch (p.bpmnGatewayType) {
            case 0:
                v.style += "outline=none;symbol=general;";
                break;
            case 1:
                v.style += "outline=none;symbol=exclusiveGw;";
                break;
            case 2:
                v.style += "outline=catching;symbol=multiple;";
                break;
            case 3:
                v.style += "outline=none;symbol=parallelGw;";
                break;
            case 4:
                v.style += "outline=end;symbol=general;";
                break;
            case 5:
                v.style += "outline=standard;symbol=multiple;";
                break;
            case 6:
                v.style += "outline=none;symbol=complexGw;";
                break;
            case 7:
                v.style += "outline=standard;symbol=parallelMultiple;";
                break
            }
            break;
        case "BPMNData":
            v.style += "shape=note;size=14;" + getFillColor(p, a) + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getLabelStyle(p);
            switch (p.bpmnDataType) {
            case 0:
                break;
            case 1:
                var item1 = new mxCell("",new mxGeometry(.5,1,12,10),"shape=parallelMarker;part=1;");
                item1.geometry.offset = new mxPoint(-6,-15);
                item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                break;
            case 2:
                var item1 = new mxCell("",new mxGeometry(0,0,12,10),"shape=singleArrow;part=1;arrowWidth=0.4;arrowSize=0.4;");
                item1.geometry.offset = new mxPoint(3,3);
                item1.style += getFillColor(p, a) + getStrokeColor(p, a);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                v.style += "verticalLabelPosition=bottom;verticalAlign=top;";
                var text1 = new mxCell("",new mxGeometry(0,0,w,20),"strokeColor=none;fillColor=none;");
                text1.geometry.offset = new mxPoint(0,14);
                text1.geometry.relative = true;
                text1.vertex = true;
                v.insert(text1);
                text1.value = convertText(p.Text);
                text1.style += getLabelStyle(p);
                break;
            case 3:
                var item1 = new mxCell("",new mxGeometry(0,0,12,10),"shape=singleArrow;part=1;arrowWidth=0.4;arrowSize=0.4;");
                item1.geometry.offset = new mxPoint(3,3);
                item1.style += getStrokeColor(p, a);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                var fc = getStrokeColor(p, a);
                fc = fc.replace("strokeColor", "fillColor");
                if (fc == "")
                    fc = "fillColor=#000000;";
                item1.style += fc;
                var text1 = new mxCell("",new mxGeometry(0,0,w,20),"strokeColor=none;fillColor=none;");
                text1.geometry.offset = new mxPoint(0,14);
                text1.geometry.relative = true;
                text1.vertex = true;
                v.insert(text1);
                text1.value = convertText(p.Text);
                text1.style += getLabelStyle(p);
                break
            }
            break;
        case "BPMNAdvancedPoolBlock":
            break;
        case "BPMNAdvancedPoolBlockRotated":
            break;
        case "BPMNBlackPool":
            v.style += getFillColor(p, a) + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(0,0,w,h),"fillColor=#000000;strokeColor=none;opacity=30;");
            item1.vertex = true;
            v.insert(item1);
            break;
        case "DFDExternalEntityBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var item1 = new mxCell("",new mxGeometry(0,0,w * .95,h * .95),"part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p);
            var item2 = new mxCell("",new mxGeometry(w * .05,h * .05,w * .95,h * .95),"part=1;");
            item2.vertex = true;
            v.insert(item2);
            item2.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p.Text);
            item2.value = convertText(p.Text);
            break;
        case "GSDFDDataStoreBlock":
            v.style += "shape=partialRectangle;right=0;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p.Text);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(0,0,w * .2,h),"part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p.Number);
            item1.value = convertText(p.Number);
            break;
        case "DefaultTableBlock":
            break;
        case "VSMDedicatedProcessBlock":
        case "VSMProductionControlBlock":
            v.style += "shape=mxgraph.lean_mapping.manufacturing_process;spacingTop=15;";
            if (obj.Class == "VSMDedicatedProcessBlock")
                v.value = convertText(p.Text);
            else if (obj.Class == "VSMProductionControlBlock")
                v.value = convertText(p.Resources);
            v.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p) + getTextLeftSpacing(p) + getTextRightSpacing(p) + getTextBottomSpacing(p) + getTextGlobalSpacing(p) + getTextVerticalAlignment(p);
            if (obj.Class == "VSMDedicatedProcessBlock") {
                var item1 = new mxCell("",new mxGeometry(0,1,11,9),"part=1;shape=mxgraph.lean_mapping.operator;");
                item1.geometry.relative = true;
                item1.geometry.offset = new mxPoint(4,-13);
                item1.vertex = true;
                v.insert(item1);
                item1.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p)
            }
            var text1 = new mxCell("",new mxGeometry(0,0,w,15),"strokeColor=none;fillColor=none;part=1;");
            text1.vertex = true;
            v.insert(text1);
            text1.value = convertText(p.Title);
            text1.style += getLabelStyle(p.Title);
            break;
        case "VSMSharedProcessBlock":
            v.style += "shape=mxgraph.lean_mapping.manufacturing_process_shared;spacingTop=-5;verticalAlign=top;";
            v.value = convertText(p.Text);
            v.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p) + getTextLeftSpacing(p) + getTextRightSpacing(p) + getTextBottomSpacing(p) + getTextTopSpacing(p) + getTextGlobalSpacing(p);
            var text1 = new mxCell("",new mxGeometry(w * .1,h * .3,w * .8,h * .6),"part=1;");
            text1.vertex = true;
            v.insert(text1);
            text1.value = convertText(p.Resource);
            text1.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p.Resource);
            break;
        case "VSMWorkcellBlock":
            v.style += "shape=mxgraph.lean_mapping.work_cell;verticalAlign=top;spacingTop=-2;";
            v.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p) + getTextLeftSpacing(p) + getTextRightSpacing(p) + getTextBottomSpacing(p) + getTextGlobalSpacing(p);
            v.value = convertText(p.Text);
            break;
        case "VSMSafetyBufferStockBlock":
        case "VSMDatacellBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var itemFullH = h;
            var numItems = parseInt(p.Cells);
            var st = getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + "part=1;";
            if (numItems > 0)
                itemFullH = itemFullH / numItems;
            var item = new Array;
            var line = new Array;
            for (var i = 1; i <= numItems; i++) {
                item[i] = new mxCell("",new mxGeometry(0,(i - 1) * itemFullH,w,itemFullH),st);
                item[i].vertex = true;
                v.insert(item[i]);
                item[i].value = convertText(p["cell_" + i]);
                item[i].style += getLabelStyle(p["cell_" + i])
            }
            break;
        case "VSMInventoryBlock":
            v.style += "shape=mxgraph.lean_mapping.inventory_box;verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p) + getTextLeftSpacing(p) + getTextRightSpacing(p) + getTextTopSpacing(p) + getTextBottomSpacing(p) + getTextGlobalSpacing(p);
            v.value = convertText(p.Text);
            break;
        case "VSMSupermarketBlock":
            v.style += "strokeColor=none;" + getFillColor(p, a);
            var itemFullH = h;
            var numItems = parseInt(p.Cells);
            var st = getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p) + "part=1;fillColor=none;";
            if (numItems > 0)
                itemFullH = itemFullH / numItems;
            var item = new Array;
            var text = new Array;
            for (var i = 1; i <= numItems; i++) {
                item[i] = new mxCell("",new mxGeometry(w * .5,(i - 1) * itemFullH,w * .5,itemFullH),"shape=partialRectangle;left=0;" + st);
                item[i].vertex = true;
                v.insert(item[i]);
                text[i] = new mxCell("",new mxGeometry(0,(i - 1) * itemFullH,w,itemFullH),"strokeColor=none;fillColor=none;part=1;");
                text[i].vertex = true;
                v.insert(text[i]);
                text[i].value = convertText(p["cell_" + i]);
                text[i].style += getLabelStyle(p["cell_" + i])
            }
            break;
        case "VSMFIFOLaneBlock":
            v.style += "shape=mxgraph.lean_mapping.fifo_sequence_flow;fontStyle=0;fontSize=18";
            v.value = "FIFO";
            break;
        case "VSMGoSeeProductionBlock":
            v.style += "shape=ellipse;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(w * .17,h * .2,13,6),"shape=mxgraph.lean_mapping.go_see_production_scheduling;flipH=1;part=1;whiteSpace=wrap;html=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getStrokeWidth(p);
            break;
        case "VSMProductionKanbanBatchBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var st = "shape=card;size=18;flipH=1;part=1;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getStrokeWidth(p);
            var item1 = new mxCell("",new mxGeometry(w * .1,0,w * .9,h * .8),"shape=mxgraph.lean_mapping.go_see_production_scheduling;flipH=1;part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += st;
            var item2 = new mxCell("",new mxGeometry(w * .05,h * .1,w * .9,h * .8),"shape=mxgraph.lean_mapping.go_see_production_scheduling;flipH=1;part=1;");
            item2.vertex = true;
            v.insert(item2);
            item2.style += st;
            var item3 = new mxCell("",new mxGeometry(0,h * .2,w * .9,h * .8),"shape=mxgraph.lean_mapping.go_see_production_scheduling;flipH=1;part=1;whiteSpace=wrap;html=1;spacing=2;");
            item3.vertex = true;
            v.insert(item3);
            item3.style += st + getLabelStyle(p);
            item3.value = convertText(p.Text);
            break;
        case "VSMTimelineBlock":
            break;
        case "AWSRoundedRectangleContainerBlock2":
            v.style += "strokeColor=none;fillColor=none;";
            if (p.Spotfleet) {
                var item1 = new mxCell("",new mxGeometry(0,0,w,h - 20),"resizeWidth=1;resizeHeight=1;fillColor=none;align=center;verticalAlign=bottom;spacing=2;rounded=1;arcSize=10;");
                item1.geometry.offset = new mxPoint(0,20);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                item1.style += getStrokeColor(p, a) + getLabelStyle(p.Title) + getStrokeStyle(p) + getStrokeWidth(p);
                item1.value = convertText(p.Title);
                var item2 = new mxCell("",new mxGeometry(0,0,35,40),"strokeColor=none;shape=mxgraph.aws3.spot_instance;fillColor=#f58536;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(30,0);
                item2.vertex = true;
                v.insert(item2)
            } else if (p.Beanstalk) {
                var item1 = new mxCell("",new mxGeometry(0,0,w,h - 20),"resizeWidth=1;resizeHeight=1;fillColor=none;align=center;verticalAlign=bottom;spacing=2;rounded=1;arcSize=10;");
                item1.geometry.offset = new mxPoint(0,20);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                item1.style += getStrokeColor(p, a) + getLabelStyle(p.Title) + getStrokeStyle(p) + getStrokeWidth(p);
                item1.value = convertText(p.Title);
                var item2 = new mxCell("",new mxGeometry(0,0,30,40),"strokeColor=none;shape=mxgraph.aws3.elastic_beanstalk;fillColor=#759C3E;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(30,0);
                item2.vertex = true;
                v.insert(item2)
            } else if (p.EC2) {
                var item1 = new mxCell("",new mxGeometry(0,0,w,h - 20),"resizeWidth=1;resizeHeight=1;fillColor=none;align=center;verticalAlign=bottom;spacing=2;rounded=1;arcSize=10;");
                item1.geometry.offset = new mxPoint(0,20);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                item1.style += getStrokeColor(p, a) + getLabelStyle(p.Title) + getStrokeStyle(p) + getStrokeWidth(p);
                item1.value = convertText(p.Title);
                var item2 = new mxCell("",new mxGeometry(0,0,32,40),"strokeColor=none;shape=mxgraph.aws3.ec2;fillColor=#F58534;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(30,0);
                item2.vertex = true;
                v.insert(item2)
            } else if (p.Subnet) {
                var item1 = new mxCell("",new mxGeometry(0,0,w,h - 20),"resizeWidth=1;resizeHeight=1;fillColor=none;align=center;verticalAlign=bottom;spacing=2;rounded=1;arcSize=10;");
                item1.geometry.offset = new mxPoint(0,20);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                item1.style += getStrokeColor(p, a) + getLabelStyle(p.Title) + getStrokeStyle(p) + getStrokeWidth(p);
                item1.value = convertText(p.Title);
                var item2 = new mxCell("",new mxGeometry(0,0,32,40),"strokeColor=none;shape=mxgraph.aws3.permissions;fillColor=#146EB4;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(30,0);
                item2.vertex = true;
                v.insert(item2)
            } else if (p.VPC) {
                var item1 = new mxCell("",new mxGeometry(0,0,w,h - 20),"resizeWidth=1;resizeHeight=1;fillColor=none;align=center;verticalAlign=bottom;spacing=2;rounded=1;arcSize=10;");
                item1.geometry.offset = new mxPoint(0,20);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                item1.style += getStrokeColor(p, a) + getLabelStyle(p.Title) + getStrokeStyle(p) + getStrokeWidth(p);
                item1.value = convertText(p.Title);
                var item2 = new mxCell("",new mxGeometry(0,0,60,40),"strokeColor=none;shape=mxgraph.aws3.virtual_private_cloud;fillColor=#146EB4;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(30,0);
                item2.vertex = true;
                v.insert(item2)
            } else if (p.AWS) {
                var item1 = new mxCell("",new mxGeometry(0,0,w,h - 20),"resizeWidth=1;resizeHeight=1;fillColor=none;align=center;verticalAlign=bottom;spacing=2;rounded=1;arcSize=10;");
                item1.geometry.offset = new mxPoint(0,20);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                item1.style += getStrokeColor(p, a) + getLabelStyle(p.Title) + getStrokeStyle(p) + getStrokeWidth(p);
                item1.value = convertText(p.Title);
                var item2 = new mxCell("",new mxGeometry(0,0,60,40),"strokeColor=none;shape=mxgraph.aws3.cloud;fillColor=#F58534;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(30,0);
                item2.vertex = true;
                v.insert(item2)
            } else if (p.Corporate) {
                var item1 = new mxCell("",new mxGeometry(0,0,w,h - 20),"resizeWidth=1;resizeHeight=1;fillColor=none;align=center;verticalAlign=bottom;spacing=2;rounded=1;arcSize=10;");
                item1.geometry.offset = new mxPoint(0,20);
                item1.geometry.relative = true;
                item1.vertex = true;
                v.insert(item1);
                item1.style += getStrokeColor(p, a) + getLabelStyle(p.Title) + getStrokeStyle(p) + getStrokeWidth(p);
                item1.value = convertText(p.Title);
                var item2 = new mxCell("",new mxGeometry(0,0,25,40),"strokeColor=none;shape=mxgraph.aws3.corporate_data_center;fillColor=#7D7C7C;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(30,0);
                item2.vertex = true;
                v.insert(item2)
            } else {
                v.style = "resizeWidth=1;resizeHeight=1;fillColor=none;align=center;verticalAlign=bottom;spacing=2;rounded=1;arcSize=10;" + getStrokeColor(p, a) + getLabelStyle(p.Title) + getStrokeStyle(p) + getStrokeWidth(p);
                v.value = convertText(p.Title)
            }
            break;
        case "AWSElasticComputeCloudBlock2":
            v.style += "strokeColor=none;shape=mxgraph.aws3.ec2;verticalLabelPosition=bottom;align=center;verticalAlign=top;" + getLabelStyle(p.Title) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p);
            v.value = convertText(p.Title);
            break;
        case "AWSRoute53Block2":
            v.style += "strokeColor=none;shape=mxgraph.aws3.route_53;verticalLabelPosition=bottom;align=center;verticalAlign=top;" + getLabelStyle(p.Title) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p);
            v.value = convertText(p.Title);
            break;
        case "AWSRDBSBlock2":
            v.style += "strokeColor=none;shape=mxgraph.aws3.rds;verticalLabelPosition=bottom;align=center;verticalAlign=top;" + getLabelStyle(p.Title) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p);
            v.value = convertText(p.Title);
            break;
        case "NET_RingNetwork":
            v.style += "strokeColor=none;fillColor=none;";
            var cell = new mxCell("",new mxGeometry(w * .25,h * .25,w * .5,h * .5),"html=1;shape=ellipse;perimeter=ellipsePerimeter;strokeColor=#29AAE1;strokeWidth=2;");
            cell.vertex = true;
            v.insert(cell);
            var cells = [cell];
            cell.style += getFillColor(p, a);
            var edge = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=none;rounded=0;endArrow=none;dashed=0;html=1;strokeColor=#29AAE1;strokeWidth=2;");
            edge.geometry.relative = true;
            edge.edge = true;
            addRouterEdge(w * .5, 0, edge, select, graph, cells, v, cell);
            addRouterEdge(w * .855, h * .145, edge, select, graph, cells, v, cell);
            addRouterEdge(w, h * .5, edge, select, graph, cells, v, cell);
            addRouterEdge(w * .855, h * .855, edge, select, graph, cells, v, cell);
            addRouterEdge(w * .5, h, edge, select, graph, cells, v, cell);
            addRouterEdge(w * .145, h * .855, edge, select, graph, cells, v, cell);
            addRouterEdge(0, h * .5, edge, select, graph, cells, v, cell);
            addRouterEdge(w * .145, h * .145, edge, select, graph, cells, v, cell);
            break;
        case "NET_Ethernet":
            v.style += "strokeColor=none;fillColor=none;";
            var cell = new mxCell("",new mxGeometry(0,h * .5 - 10,w,20),"shape=mxgraph.networks.bus;gradientColor=none;gradientDirection=north;fontColor=#ffffff;perimeter=backbonePerimeter;backboneSize=20;fillColor=#29AAE1;strokeColor=#29AAE1;");
            cell.vertex = true;
            v.insert(cell);
            var cells = [cell];
            var edge = new mxCell("",new mxGeometry(0,0,0,0),"strokeColor=#29AAE1;edgeStyle=none;rounded=0;endArrow=none;html=1;strokeWidth=2;");
            edge.geometry.relative = true;
            edge.edge = true;
            var cells = [cell];
            var stepX = w / p.NumTopNodes;
            for (var i = 0; i < p.NumTopNodes; i++)
                addRouterEdge(stepX * .5 + i * stepX, 0, edge, select, graph, cells, v, cell);
            stepX = w / p.NumBottomNodes;
            for (var i = 0; i < p.NumBottomNodes; i++)
                addRouterEdge(stepX * .5 + i * stepX, h, edge, select, graph, cells, v, cell);
            break;
        case "EE_OpAmp":
            v.style += "shape=mxgraph.electrical.abstract.operational_amp_1;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getLabelStyle(p);
            v.value = convertText(p.Title);
            if (p.ToggleCharge)
                v.style += "flipV=1;";
            break;
        case "EIMessageChannelBlock":
        case "EIDatatypeChannelBlock":
        case "EIInvalidMessageChannelBlock":
        case "EIDeadLetterChannelBlock":
        case "EIGuaranteedDeliveryBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            if (obj.Class == "EIMessageChannelBlock") {
                var item1 = new mxCell("",new mxGeometry(.5,.5,w * .9,20),"shape=mxgraph.eip.messageChannel;fillColor=#818181;part=1;");
                item1.geometry.offset = new mxPoint(-w * .45,0)
            } else if (obj.Class == "EIDatatypeChannelBlock") {
                var item1 = new mxCell("",new mxGeometry(.5,.5,w * .9,20),"shape=mxgraph.eip.dataChannel;fillColor=#818181;part=1;");
                item1.geometry.offset = new mxPoint(-w * .45,0)
            } else if (obj.Class == "EIInvalidMessageChannelBlock") {
                var item1 = new mxCell("",new mxGeometry(.5,.5,w * .9,20),"shape=mxgraph.eip.invalidMessageChannel;fillColor=#818181;part=1;");
                item1.geometry.offset = new mxPoint(-w * .45,0)
            } else if (obj.Class == "EIDeadLetterChannelBlock") {
                var item1 = new mxCell("",new mxGeometry(.5,.5,w * .9,20),"shape=mxgraph.eip.deadLetterChannel;fillColor=#818181;part=1;");
                item1.geometry.offset = new mxPoint(-w * .45,0)
            } else if (obj.Class == "EIGuaranteedDeliveryBlock") {
                var item1 = new mxCell("",new mxGeometry(.5,.5,20,27),"shape=cylinder;fillColor=#818181;part=1;");
                item1.geometry.offset = new mxPoint(-10,-7)
            }
            item1.geometry.relative = true;
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p);
            var edge = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=none;rounded=0;endArrow=block;dashed=0;html=1;strokeColor=#818181;strokeWidth=1;endFill=1;endSize=6;");
            edge.geometry.relative = true;
            edge.edge = true;
            addFloatingEdge(w * .15, h * .25, w * .85, h * .25, edge, select, graph, cells, v, cell);
            break;
        case "EIChannelAdapterBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(0,h * .07,w * .21,h * .86),"fillColor=#FFFF33;part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p) + getStrokeStyle(p);
            var item2 = new mxCell("",new mxGeometry(w * .26,h * .09,w * .2,h * .82),"shape=mxgraph.eip.channel_adapter;fillColor=#4CA3D9;part=1;");
            item2.vertex = true;
            v.insert(item2);
            item2.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p) + getStrokeStyle(p);
            var item3 = new mxCell("",new mxGeometry(1,.5,w * .35,20),"shape=mxgraph.eip.messageChannel;fillColor=#818181;part=1;");
            item3.geometry.relative = true;
            item3.geometry.offset = new mxPoint(-w * .4,-10);
            item3.vertex = true;
            v.insert(item3);
            item3.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p) + getStrokeStyle(p);
            edge1 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;exitX=1;exitY=0.5;entryX=0;entryY=0.5;endArrow=none;dashed=0;html=1;strokeWidth=1;endFill=1;endSize=2;");
            edge1.geometry.relative = true;
            edge1.edge = true;
            item1.insertEdge(edge1, true);
            item2.insertEdge(edge1, false);
            edge1.style += getStrokeColor(p, a);
            select.push(graph.addCell(edge1, null, null, null, null));
            edge2 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;exitX=1;exitY=0.5;entryX=0;entryY=0.5;endArrow=block;startArrow=block;dashed=0;html=1;strokeColor=#818181;strokeWidth=1;endFill=1;endSize=2;startFill=1;startSize=2;");
            edge2.geometry.relative = true;
            edge2.edge = true;
            item2.insertEdge(edge2, true);
            item3.insertEdge(edge2, false);
            select.push(graph.addCell(edge2, null, null, null, null));
            break;
        case "EIMessageBlock":
        case "EICommandMessageBlock":
        case "EIDocumentMessageBlock":
        case "EIEventMessageBlock":
            v.style += "strokeColor=none;fillColor=none;verticalLabelPosition=bottom;verticalAlign=top;" + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(0,0,17,17),"shape=ellipse;fillColor=#808080;part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            var messagesNum = p.Messages;
            var oneH = (h - 17) / messagesNum;
            var item2 = new Array;
            var edge = new Array;
            for (var i = 0; i < messagesNum; i++) {
                var currY = oneH * (i + 1) - 3;
                item2[i] = new mxCell("",new mxGeometry(w - 20,currY,20,20),"part=1;");
                item2[i].vertex = true;
                v.insert(item2[i]);
                item2[i].style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p);
                switch (obj.Class) {
                case "EIMessageBlock":
                    item2[i].value = convertText(p["message_" + (i + 1)]);
                    item2.style += getLabelStyle(p["message_" + (i + 1)]);
                    break;
                case "EICommandMessageBlock":
                    item2[i].value = "C";
                    item2[i].style += "fontStyle=1;fontSize=" + defaultFontSize + ";";
                    break;
                case "EIDocumentMessageBlock":
                    item2[i].value = "D";
                    item2[i].style += "fontStyle=1;fontSize=" + defaultFontSize + ";";
                    break;
                case "EIEventMessageBlock":
                    item2[i].value = "E";
                    item2[i].style += "fontStyle=1;fontSize=" + defaultFontSize + ";";
                    break
                }
                edge[i] = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;exitX=0;exitY=0.5;endArrow=none;dashed=0;html=1;");
                edge[i].geometry.relative = true;
                edge[i].edge = true;
                item1.insertEdge(edge[i], false);
                item2[i].insertEdge(edge[i], true);
                edge[i].style += getStrokeColor(p, a) + getStrokeWidth(p);
                var wp = new Array;
                wp.push(new mxPoint(x + 8.5,y + currY + 10));
                edge[i].geometry.points = wp;
                select.push(graph.addCell(edge[i], null, null, null, null))
            }
            break;
        case "EIMessageEndpointBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(w * .45,h * .25,w * .3,h * .5),"part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p);
            var edge = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=none;rounded=0;endArrow=block;dashed=0;html=1;strokeColor=#818181;strokeWidth=1;endFill=1;endSize=6;");
            edge.geometry.relative = true;
            edge.edge = true;
            addFloatingEdge(0, h * .5, w * .4, h * .5, edge, select, graph, cells, v, cell);
            break;
        case "EIPublishSubscribeChannelBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var edge1 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=none;rounded=0;endArrow=block;dashed=0;html=1;strokeColor=#818181;strokeWidth=1;endFill=1;endSize=6;");
            edge1.geometry.relative = true;
            edge1.edge = true;
            addFloatingEdge(w * .05, h * .5, w * .85, h * .5, edge1, select, graph, cells, v, cell);
            var edge2 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=elbowEdgeStyle;rounded=0;endArrow=block;dashed=0;html=1;strokeColor=#818181;strokeWidth=1;endFill=1;endSize=6;");
            edge2.geometry.relative = true;
            edge2.edge = true;
            addFloatingEdge(w * .05, h * .5, w * .85, h * .15, edge2, select, graph, cells, v, cell);
            var edge3 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=elbowEdgeStyle;rounded=0;endArrow=block;dashed=0;html=1;strokeColor=#818181;strokeWidth=1;endFill=1;endSize=6;");
            edge3.geometry.relative = true;
            edge3.edge = true;
            addFloatingEdge(w * .05, h * .5, w * .85, h * .85, edge3, select, graph, cells, v, cell);
            break;
        case "EIMessageBusBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var edge1 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=none;rounded=0;endArrow=block;dashed=0;html=1;strokeWidth=1;endFill=1;endSize=4;startArrow=block;startFill=1;startSize=4;");
            edge1.geometry.relative = true;
            edge1.edge = true;
            edge1.style += getStrokeColor(p, a);
            addFloatingEdge(w * .05, h * .5, w * .95, h * .5, edge1, select, graph, cells, v, cell);
            var edge2 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=elbowEdgeStyle;rounded=0;endArrow=block;dashed=0;html=1;strokeWidth=1;endFill=1;endSize=4;startArrow=block;startFill=1;startSize=4;");
            edge2.geometry.relative = true;
            edge2.edge = true;
            edge2.style += getStrokeColor(p, a);
            addFloatingEdge(w * .3, h * .1, w * .3, h * .5, edge2, select, graph, cells, v, cell);
            var edge3 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=elbowEdgeStyle;rounded=0;endArrow=block;dashed=0;html=1;strokeWidth=1;endFill=1;endSize=4;startArrow=block;startFill=1;startSize=4;");
            edge3.geometry.relative = true;
            edge3.edge = true;
            edge3.style += getStrokeColor(p, a);
            addFloatingEdge(w * .7, h * .1, w * .7, h * .5, edge3, select, graph, cells, v, cell);
            var edge4 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=elbowEdgeStyle;rounded=0;endArrow=block;dashed=0;html=1;strokeWidth=1;endFill=1;endSize=4;startArrow=block;startFill=1;startSize=4;");
            edge4.geometry.relative = true;
            edge4.edge = true;
            edge4.style += getStrokeColor(p, a);
            addFloatingEdge(w * .5, h * .5, w * .5, h * .9, edge4, select, graph, cells, v, cell);
            break;
        case "EIRequestReplyBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(w * .2,h * .21,w * .16,h * .24),"part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p);
            var edge1 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=none;rounded=0;endArrow=block;dashed=0;html=1;strokeColor=#818181;strokeWidth=1;endFill=1;endSize=6;");
            edge1.geometry.relative = true;
            edge1.edge = true;
            addFloatingEdge(w * .45, h * .33, w * .8, h * .33, edge1, select, graph, cells, v, cell);
            var item2 = new mxCell("",new mxGeometry(w * .64,h * .55,w * .16,h * .24),"part=1;");
            item2.vertex = true;
            v.insert(item2);
            item2.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p);
            var edge2 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=none;rounded=0;endArrow=block;dashed=0;html=1;strokeColor=#818181;strokeWidth=1;endFill=1;endSize=6;");
            edge2.geometry.relative = true;
            edge2.edge = true;
            addFloatingEdge(w * .55, h * .67, w * .2, h * .67, edge2, select, graph, cells, v, cell);
            break;
        case "EIReturnAddressBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(w * .1,h * .15,w * .8,h * .7),"part=1;shape=mxgraph.eip.retAddr;fillColor=#FFE040;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p);
            break;
        case "EICorrelationIDBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(w * .04,h * .06,w * .18,h * .28),"shape=ellipse;fillColor=#808080;part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            item2 = new mxCell("",new mxGeometry(w * .2,h * .56,w * .2,h * .32),"part=1;");
            item2.vertex = true;
            v.insert(item2);
            item2.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p) + getStrokeStyle(p);
            item2.value = "A";
            item2.style += "fontStyle=1;fontSize=" + defaultFontSize + ";";
            edge1 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;exitX=0;exitY=0.5;endArrow=none;dashed=0;html=1;part=1;");
            edge1.geometry.relative = true;
            edge1.edge = true;
            item1.insertEdge(edge1, false);
            item2.insertEdge(edge1, true);
            edge1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            var wp = new Array;
            wp.push(new mxPoint(x + w * .13,y + h * .72));
            edge1.geometry.points = wp;
            select.push(graph.addCell(edge1, null, null, null, null));
            var item3 = new mxCell("",new mxGeometry(w * .6,h * .06,w * .18,h * .28),"shape=ellipse;fillColor=#808080;part=1;");
            item3.vertex = true;
            v.insert(item3);
            item3.style += getStrokeColor(p, a) + getStrokeWidth(p);
            item4 = new mxCell("",new mxGeometry(w * .76,h * .56,w * .2,h * .32),"part=1;");
            item4.vertex = true;
            v.insert(item4);
            item4.style += getStrokeColor(p, a) + getOpacity(p, a) + getStrokeWidth(p) + getStrokeStyle(p);
            item4.value = "B";
            item4.style += "fontStyle=1;fontSize=" + defaultFontSize + ";";
            edge2 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;exitX=0;exitY=0.5;endArrow=none;dashed=0;html=1;part=1;");
            edge2.geometry.relative = true;
            edge2.edge = true;
            item3.insertEdge(edge2, false);
            item4.insertEdge(edge2, true);
            edge2.style += getStrokeColor(p, a) + getStrokeWidth(p);
            var wp2 = new Array;
            wp2.push(new mxPoint(x + w * .69,y + h * .72));
            edge2.geometry.points = wp2;
            select.push(graph.addCell(edge2, null, null, null, null));
            edge3 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;endArrow=block;endFill=1;endSize=6;part=1;");
            edge3.geometry.relative = true;
            edge3.edge = true;
            item1.insertEdge(edge3, false);
            item3.insertEdge(edge3, true);
            edge3.style += getStrokeColor(p, a) + getStrokeWidth(p);
            select.push(graph.addCell(edge3, null, null, null, null));
            break;
        case "EIMessageSequenceBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("1",new mxGeometry(w * .2,h * .4,w * .1,h * .19),"fontStyle=1;fontSize=" + defaultFontSize + ";part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            var item2 = new mxCell("2",new mxGeometry(w * .45,h * .4,w * .1,h * .19),"fontStyle=1;fontSize=" + defaultFontSize + ";part=1;");
            item2.vertex = true;
            v.insert(item2);
            item2.style += getStrokeColor(p, a) + getStrokeWidth(p);
            var item3 = new mxCell("3",new mxGeometry(w * .7,h * .4,w * .1,h * .19),"fontStyle=1;fontSize=" + defaultFontSize + ";part=1;");
            item3.vertex = true;
            v.insert(item3);
            item3.style += getStrokeColor(p, a) + getStrokeWidth(p);
            var edge1 = new mxCell("",new mxGeometry(0,0,0,0),"curved=1;endArrow=block;html=1;endSize=3;part=1;");
            item1.insertEdge(edge1, false);
            item2.insertEdge(edge1, true);
            edge1.geometry.points = [new mxPoint(x + w * .375,y + h * .15)];
            edge1.geometry.relative = true;
            edge1.edge = true;
            edge1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            select.push(graph.addCell(edge1, null, null, null, null));
            var edge2 = new mxCell("",new mxGeometry(0,0,0,0),"curved=1;endArrow=block;html=1;endSize=3;part=1;");
            item2.insertEdge(edge2, false);
            item3.insertEdge(edge2, true);
            edge2.geometry.points = [new mxPoint(x + w * .675,y + h * .15)];
            edge2.geometry.relative = true;
            edge2.edge = true;
            edge2.style += getStrokeColor(p, a) + getStrokeWidth(p);
            select.push(graph.addCell(edge2, null, null, null, null));
            break;
        case "EIMessageExpirationBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(w * .3,h * .2,w * .4,h * .6),"shape=mxgraph.ios7.icons.clock;flipH=1;part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            break;
        case "EIMessageBrokerBlock":
            v.style += "strokeColor=none;fillColor=none;verticalLabelPosition=bottom;verticalAlign=top;" + getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(w * .38,h * .42,w * .24,h * .16),"part=1;fillColor=#aefe7d;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            var item2 = new mxCell("",new mxGeometry(w * .38,0,w * .24,h * .16),"part=1;");
            item2.vertex = true;
            v.insert(item2);
            item2.style += getFillColor(p, a) + getStrokeColor(p, a) + getStrokeWidth(p);
            var item3 = new mxCell("",new mxGeometry(w * .76,h * .23,w * .24,h * .16),"part=1;");
            item3.vertex = true;
            v.insert(item3);
            item3.style = item2.style;
            var item4 = new mxCell("",new mxGeometry(w * .76,h * .61,w * .24,h * .16),"part=1;");
            item4.vertex = true;
            v.insert(item4);
            item4.style = item2.style;
            var item5 = new mxCell("",new mxGeometry(w * .38,h * .84,w * .24,h * .16),"part=1;");
            item5.vertex = true;
            v.insert(item5);
            item5.style = item2.style;
            var item6 = new mxCell("",new mxGeometry(0,h * .61,w * .24,h * .16),"part=1;");
            item6.vertex = true;
            v.insert(item6);
            item6.style = item2.style;
            var item7 = new mxCell("",new mxGeometry(0,h * .23,w * .24,h * .16),"part=1;");
            item7.vertex = true;
            v.insert(item7);
            item7.style = item2.style;
            var edge1 = new mxCell("",new mxGeometry(0,0,0,0),"endArrow=none;part=1;");
            item1.insertEdge(edge1, false);
            item2.insertEdge(edge1, true);
            edge1.edge = true;
            edge1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            select.push(graph.addCell(edge1, null, null, null, null));
            var edge2 = new mxCell("",new mxGeometry(0,0,0,0),"endArrow=none;part=1;");
            item1.insertEdge(edge2, false);
            item3.insertEdge(edge2, true);
            edge2.edge = true;
            edge2.style += getStrokeColor(p, a) + getStrokeWidth(p);
            select.push(graph.addCell(edge2, null, null, null, null));
            var edge3 = new mxCell("",new mxGeometry(0,0,0,0),"endArrow=none;part=1;");
            item1.insertEdge(edge3, false);
            item4.insertEdge(edge3, true);
            edge3.edge = true;
            edge3.style += getStrokeColor(p, a) + getStrokeWidth(p);
            select.push(graph.addCell(edge3, null, null, null, null));
            var edge4 = new mxCell("",new mxGeometry(0,0,0,0),"endArrow=none;part=1;");
            item1.insertEdge(edge4, false);
            item5.insertEdge(edge4, true);
            edge4.edge = true;
            edge4.style += getStrokeColor(p, a) + getStrokeWidth(p);
            select.push(graph.addCell(edge4, null, null, null, null));
            var edge5 = new mxCell("",new mxGeometry(0,0,0,0),"endArrow=none;part=1;");
            item1.insertEdge(edge5, false);
            item6.insertEdge(edge5, true);
            edge5.edge = true;
            edge5.style += getStrokeColor(p, a) + getStrokeWidth(p);
            select.push(graph.addCell(edge5, null, null, null, null));
            var edge6 = new mxCell("",new mxGeometry(0,0,0,0),"endArrow=none;part=1;");
            item1.insertEdge(edge6, false);
            item7.insertEdge(edge6, true);
            edge6.edge = true;
            edge6.style += getStrokeColor(p, a) + getStrokeWidth(p);
            select.push(graph.addCell(edge6, null, null, null, null));
            break;
        case "EIDurableSubscriberBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var edge1 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=elbowEdgeStyle;rounded=0;endArrow=block;endFill=1;endSize=6;");
            edge1.geometry.relative = true;
            edge1.edge = true;
            addFloatingEdge(w * .05, h * .5, w * .6, h * .25, edge1, select, graph, cells, v, cell);
            var edge2 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=elbowEdgeStyle;rounded=0;endArrow=block;endFill=1;endSize=6;");
            edge2.geometry.relative = true;
            edge2.edge = true;
            addFloatingEdge(w * .05, h * .5, w * .6, h * .75, edge2, select, graph, cells, v, cell);
            var item1 = new mxCell("",new mxGeometry(w * .7,h * .1,w * .15,h * .32),"shape=mxgraph.eip.durable_subscriber;part=1;fillColor=#818181;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            break;
        case "EIControlBusBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(w * .25,h * .25,w * .5,h * .5),"shape=mxgraph.eip.control_bus;part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            break;
        case "EIMessageHistoryBlock":
            v.style += "strokeColor=none;fillColor=none;verticalLabelPosition=bottom;verticalAlign=top;" + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(0,0,17,17),"shape=ellipse;fillColor=#808080;part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            var item3 = new mxCell("",new mxGeometry(w - 45,30,30,20),"shape=mxgraph.mockup.misc.mail2;fillColor=#FFE040;part=1;");
            item3.vertex = true;
            v.insert(item3);
            item3.style += getStrokeColor(p, a) + getStrokeWidth(p);
            edge3 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;exitX=0;exitY=0.5;endArrow=none;dashed=0;html=1;");
            edge3.geometry.relative = true;
            edge3.edge = true;
            item1.insertEdge(edge3, false);
            item3.insertEdge(edge3, true);
            edge3.style += getStrokeColor(p, a) + getStrokeWidth(p);
            edge3.geometry.points = [new mxPoint(x + 8.5,y + 40)];
            select.push(graph.addCell(edge3, null, null, null, null));
            var item4 = new mxCell("",new mxGeometry(w - 45,h - 20,20,20),"part=1;");
            item4.vertex = true;
            v.insert(item4);
            item4.value = convertText(p.message_0);
            item4.style += getLabelStyle(p.message_0);
            item4.style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p);
            edge4 = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;exitX=0;exitY=0.5;endArrow=none;dashed=0;html=1;");
            edge4.geometry.relative = true;
            edge4.edge = true;
            item1.insertEdge(edge4, false);
            item4.insertEdge(edge4, true);
            edge4.style += getStrokeColor(p, a) + getStrokeWidth(p);
            edge4.geometry.points = [new mxPoint(x + 8.5,y + h - 10)];
            select.push(graph.addCell(edge4, null, null, null, null));
            var messagesNum = p.HistoryMessages;
            var oneH = (h - 75) / messagesNum;
            var item2 = new Array;
            var edge = new Array;
            for (var i = 0; i < messagesNum; i++) {
                var currY = oneH * (i + 1) + 30;
                item2[i] = new mxCell("",new mxGeometry(w - 20,currY,20,20),"part=1;");
                item2[i].vertex = true;
                item2[i].value = convertText(p["message_" + (i + 1)]);
                item2.style += getLabelStyle(p["message_" + (i + 1)]);
                v.insert(item2[i]);
                item2[i].style += getStrokeColor(p, a) + getFillColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getStrokeStyle(p);
                edge[i] = new mxCell("",new mxGeometry(0,0,0,0),"edgeStyle=orthogonalEdgeStyle;rounded=0;exitX=0;exitY=0.5;endArrow=none;dashed=0;html=1;");
                edge[i].geometry.relative = true;
                edge[i].edge = true;
                item3.insertEdge(edge[i], false);
                item2[i].insertEdge(edge[i], true);
                edge[i].style += getStrokeColor(p, a) + getStrokeWidth(p);
                var wp = new Array;
                wp.push(new mxPoint(x + w - 30,y + currY + 10));
                edge[i].geometry.points = wp;
                select.push(graph.addCell(edge[i], null, null, null, null))
            }
            break;
        case "Equation":
            break;
        case "fpDoor":
            v.style += "shape=mxgraph.floorplan.doorRight;" + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getRotation(p, a, v);
            getStrokeStyle(p);
            if (p.DoorAngle < 0)
                v.style += "flipV=1;";
            break;
        case "fpDoubleDoor":
            v.style += "shape=mxgraph.floorplan.doorDouble;" + getStrokeColor(p, a) + getOpacity(p, a) + getShadow(p) + getStrokeWidth(p) + getRotation(p, a, v) + getStrokeStyle(p);
            if (p.DoorAngle > 0)
                v.style += "flipV=1;";
            break;
        case "fpRestroomLights":
            v.style += "strokeColor=none;fillColor=none;" + getRotation(p, a, v);
            var item1 = new mxCell("",new mxGeometry(0,0,w,h * .25),"part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p);
            var item2 = new Array;
            var lightOffset = w * .02;
            var lightW = (w - lightOffset * 2) / p.LightCount;
            var trueW = lightW * .8;
            for (var i = 0; i < p.LightCount; i++) {
                item2[i] = new mxCell("",new mxGeometry(lightOffset + lightW * i + (lightW - trueW) / 2,h * .25,trueW,h * .75),"part=1;shape=ellipse;");
                item2[i].vertex = true;
                v.insert(item2[i]);
                item2[i].style += getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p)
            }
            break;
        case "fpRestroomSinks":
            v.style += "strokeColor=none;fillColor=none;" + getRotation(p, a, v);
            var item1 = new Array;
            var sinkW = w / p.SinkCount;
            for (var i = 0; i < p.SinkCount; i++) {
                item1[i] = new mxCell("",new mxGeometry(sinkW * i,0,sinkW,h),"part=1;shape=mxgraph.floorplan.sink_2;");
                item1[i].vertex = true;
                v.insert(item1[i]);
                item1[i].style += getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p)
            }
            break;
        case "fpRestroomStalls":
            v.style += "strokeColor=none;fillColor=none;";
            var wallW = w * .1 / p.StallCount;
            var item1 = new mxCell("",new mxGeometry(0,0,wallW,h),"fillColor=#000000;part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getStrokeColor(p, a) + getStrokeWidth(p);
            var stallW = (w - wallW) / p.StallCount;
            var wall = new Array;
            var toilet = new Array;
            var door = new Array;
            var paper = new Array;
            var fc = getStrokeColor(p, a);
            if (fc == "")
                fc = "#000000;";
            else
                fc = fc.replace("stokreColor=", "");
            var wallStyle = "part=1;fillColor=" + fc + getStrokeColor(p, a) + getStrokeWidth(p);
            var otherStyle = getFillColor(p, a) + getStrokeColor(p, a) + getStrokeWidth(p);
            for (var i = 0; i < p.StallCount; i++) {
                wall[i] = new mxCell("",new mxGeometry((i + 1) * stallW,0,wallW,h),wallStyle);
                wall[i].vertex = true;
                v.insert(wall[i]);
                door[i] = new mxCell("",new mxGeometry(wallW + i * stallW + (stallW - wallW) * .05,h - (stallW - wallW) * .92,(stallW - wallW) * .9,(stallW - wallW) * .92),"shape=mxgraph.floorplan.doorRight;flipV=1;part=1;");
                door[i].vertex = true;
                v.insert(door[i]);
                door[i].style += otherStyle;
                toilet[i] = new mxCell("",new mxGeometry(wallW + i * stallW + (stallW - wallW) * .2,0,(stallW - wallW) * .6,(stallW - wallW) * .8),"shape=mxgraph.floorplan.toilet;part=1;");
                toilet[i].vertex = true;
                v.insert(toilet[i]);
                toilet[i].style += otherStyle;
                paper[i] = new mxCell("",new mxGeometry(wallW + i * stallW,h * .42,(stallW - wallW) * .15,(stallW - wallW) * .12),"part=1;");
                paper[i].vertex = true;
                v.insert(paper[i]);
                paper[i].style += otherStyle
            }
            break;
        case "PEOneToMany":
            v.style += "strokeColor=none;fillColor=none;";
            var edgeStyle = "edgeStyle=none;endArrow=none;part=1;" + getStrokeColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p);
            var fc = getStrokeColor(p, a);
            if (fc == "")
                fc = "#000000;";
            else
                fc = fc.replace("stokreColor=", "");
            var endStyle = "shape=triangle;part=1;fillColor=" + fc + getStrokeColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p);
            var edge1 = new mxCell("",new mxGeometry(0,0,0,0),edgeStyle);
            edge1.geometry.relative = true;
            edge1.edge = true;
            addFloatingEdge(0, h * .5, w * .65, h * .5, edge1, select, graph, cells, v, cell);
            var itemH = h / p.numLines;
            var edge2 = new Array;
            var endArrow = new Array;
            for (var i = 0; i < p.numLines; i++) {
                edge2[i] = new mxCell("",new mxGeometry(0,0,0,0),edgeStyle);
                edge2[i].geometry.relative = true;
                edge2[i].edge = true;
                addFloatingEdge(w * .65, h * .5, w * .96, (i + .5) * itemH, edge2[i], select, graph, cells, v, cell);
                endArrow[i] = new mxCell("",new mxGeometry(w * .95,(i + .2) * itemH,w * .05,itemH * .6),endStyle);
                endArrow[i].vertex = true;
                v.insert(endArrow[i])
            }
            break;
        case "PEMultilines":
            v.style += "strokeColor=none;fillColor=none;";
            var edgeStyle = "edgeStyle=none;endArrow=none;part=1;" + getStrokeColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p);
            var fc = getStrokeColor(p, a);
            if (fc == "")
                fc = "#000000;";
            else
                fc = fc.replace("stokreColor=", "");
            var endStyle = "shape=triangle;part=1;fillColor=" + fc + getStrokeColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p);
            var itemH = h / p.numLines;
            var edge2 = new Array;
            var endArrow = new Array;
            for (var i = 0; i < p.numLines; i++) {
                edge2[i] = new mxCell("",new mxGeometry(0,0,0,0),edgeStyle);
                edge2[i].geometry.relative = true;
                edge2[i].edge = true;
                addFloatingEdge(0, (i + .5) * itemH, w * .96, (i + .5) * itemH, edge2[i], select, graph, cells, v, cell);
                endArrow[i] = new mxCell("",new mxGeometry(w * .95,(i + .2) * itemH,w * .05,itemH * .6),endStyle);
                endArrow[i].vertex = true;
                v.insert(endArrow[i])
            }
            break;
        case "PEVesselBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            switch (p.vesselType) {
            case 1:
                v.style += "shape=mxgraph.pid.vessels.pressurized_vessel;";
                break;
            case 2:
                v.style += "shape=hexagon;perimeter=hexagonPerimeter2;size=0.10;direction=south;";
                break
            }
            break;
        case "PEClosedTankBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            if (p.peakedRoof == 1 && p.stumpType == 0)
                v.style += "shape=mxgraph.pid.vessels.tank_(conical_roof);";
            else if (p.stumpType == 1)
                v.style += "shape=mxgraph.pid.vessels.tank_(boot);";
            break;
        case "PEColumnBlock":
            v.style += "verticalLabelPosition=bottom;verticalAlign=top;" + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p) + getLabelStyle(p);
            v.value = convertText(p.Text);
            if (p.columnType == 0)
                v.style += "shape=mxgraph.pid.vessels.pressurized_vessel;";
            else
                v.style += "shape=mxgraph.pid.vessels.tank;";
            break;
        case "PECompressorTurbineBlock":
            v.style += "strokeColor=none;fillColor=none;" + getRotation(p, a, v) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var st = getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getShadow(p) + getStrokeStyle(p);
            var item1 = new mxCell("",new mxGeometry(0,h * .2,w,h * .6),"part=1;shape=trapezoid;perimeter=trapezoidPerimeter;direction=south;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += st;
            st += "endSize=4;endArrow=block;endFill=1;";
            if (p.compressorType == 0) {
                var edge1 = new mxCell("",new mxGeometry(0,0,0,0),"");
                edge1.geometry.relative = true;
                edge1.edge = true;
                edge1.style += st;
                addFloatingEdge(0, 0, 0, h * .2, edge1, select, graph, cells, v, cell);
                var edge2 = new mxCell("",new mxGeometry(0,0,0,0),"");
                edge2.geometry.relative = true;
                edge2.edge = true;
                edge2.style += st;
                addFloatingEdge(w, h * .67, w, h, edge2, select, graph, cells, v, cell)
            } else {
                item1.style += "flipH=1;";
                var edge1 = new mxCell("",new mxGeometry(0,0,0,0),"");
                edge1.geometry.relative = true;
                edge1.edge = true;
                edge1.style += st;
                addFloatingEdge(0, 0, 0, h * .33, edge1, select, graph, cells, v, cell);
                var edge2 = new mxCell("",new mxGeometry(0,0,0,0),"");
                edge2.geometry.relative = true;
                edge2.edge = true;
                edge2.style += st;
                addFloatingEdge(w, h * .8, w, h, edge2, select, graph, cells, v, cell)
            }
            if (p.centerLineType == 1) {
                var edge3 = new mxCell("",new mxGeometry(0,0,0,0),"");
                edge3.geometry.relative = true;
                edge3.edge = true;
                edge3.style += st;
                addFloatingEdge(w * .2, h * .5, w * .8, h * .5, edge3, select, graph, cells, v, cell)
            }
            break;
        case "PEMotorDrivenTurbineBlock":
            var st = getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getOpacity(p, a) + getStrokeStyle(p);
            v.style += "shape=ellipse;" + getShadow(p) + getRotation(p, a, v) + getLabelStyle(p);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(w * .2,h * .2,w * .6,h * .6),"part=1;shape=trapezoid;perimeter=trapezoidPerimeter;direction=south;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += st;
            break;
        case "PEFanBlades2Block":
            break;
        case "PECentrifugalPumpBlock":
            break;
        case "PEIndicatorBlock":
        case "PEIndicator2Block":
        case "PESharedIndicatorBlock":
        case "PEComputerIndicatorBlock":
        case "PESharedIndicator2Block":
        case "PEProgrammableIndicatorBlock":
            var st = getOpacity(p, a);
            v.style += st + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v);
            switch (obj.Class) {
            case "PEIndicatorBlock":
                v.style += "shape=mxgraph.pid2inst.discInst;";
                break;
            case "PEIndicator2Block":
                v.style += "shape=mxgraph.pid2inst.indicator;indType=inst;";
                break;
            case "PESharedIndicatorBlock":
                v.style += "shape=mxgraph.pid2inst.sharedCont;";
                break;
            case "PEComputerIndicatorBlock":
                v.style += "shape=mxgraph.pid2inst.compFunc;";
                break;
            case "PESharedIndicator2Block":
                v.style += "shape=mxgraph.pid2inst.indicator;indType=ctrl;";
                break;
            case "PEProgrammableIndicatorBlock":
                v.style += "shape=mxgraph.pid2inst.progLogCont;";
                break
            }
            if (obj.Class == "PEIndicator2Block" || obj.Class == "PESharedIndicator2Block") {
                var item1 = new mxCell("",new mxGeometry(0,0,w,w * .5),"part=1;strokeColor=none;fillColor=none;");
                item1.vertex = true;
                v.insert(item1);
                item1.style += st + getLabelStyle(p.TopText);
                item1.value = convertText(p.TopText);
                var item2 = new mxCell("",new mxGeometry(0,w * .5,w,w * .5),"part=1;strokeColor=none;fillColor=none;");
                item2.vertex = true;
                v.insert(item2);
                item2.style += st;
                getLabelStyle(p.BotText);
                item2.value = convertText(p.BotText)
            } else {
                var item1 = new mxCell("",new mxGeometry(0,0,w,h * .5),"part=1;strokeColor=none;fillColor=none;");
                item1.vertex = true;
                v.insert(item1);
                item1.style += st + getLabelStyle(p.TopText);
                item1.value = convertText(p.TopText);
                var item2 = new mxCell("",new mxGeometry(0,h * .5,w,h * .5),"part=1;strokeColor=none;fillColor=none;");
                item2.vertex = true;
                v.insert(item2);
                item2.style += st;
                getLabelStyle(p.BotText);
                item2.value = convertText(p.BotText)
            }
            switch (p.instrumentLocation) {
            case 0:
                v.style += "mounting=field;";
                break;
            case 1:
                v.style += "mounting=inaccessible;";
                break;
            case 2:
                v.style += "mounting=room;";
                break;
            case 3:
                v.style += "mounting=local;";
                break
            }
            break;
        case "PEGateValveBlock":
        case "PEGlobeValveBlock":
        case "PEAngleValveBlock":
        case "PEAngleGlobeValveBlock":
        case "PEPoweredValveBlock":
            var actuator = false;
            if (obj.Class == "PEPoweredValveBlock") {
                if (p.poweredHandOperated != 1)
                    actuator = true
            } else if (p.handOperated != 1)
                actuator = true;
            if (actuator) {
                var p = getAction(obj).Properties;
                var b = p.BoundingBox;
                var oldH = b.h;
                if (obj.Class == "PEAngleValveBlock" || obj.Class == "PEAngleGlobeValveBlock")
                    b.h = b.h * .7;
                else
                    b.h = b.h * .6;
                v = new mxCell("",new mxGeometry(Math.round(b.x * scale + dx),Math.round((b.y + oldH - b.h) * scale + dy),Math.round(b.w * scale),Math.round(b.h * scale)),"");
                v.vertex = true;
                updateCell(v, obj)
            }
            if (obj.Class == "PEPoweredValveBlock") {
                v.style += "shape=mxgraph.pid2valves.valve;verticalLabelPosition=bottom;verticalAlign=top;" + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v);
                if (p.poweredHandOperated == 1) {
                    v.style += "valveType=gate;actuator=powered;";
                    var item1 = new mxCell("",new mxGeometry(w * .325,0,w * .35,h * .35),"part=1;strokeColor=none;fillColor=none;spacingTop=2;");
                    item1.vertex = true;
                    v.insert(item1);
                    item1.style += st + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + "fontSize=6;" + getFontColor(p.PoweredText) + getFontStyle(p.PoweredText) + getTextAlignment(p.PoweredText) + getTextLeftSpacing(p.PoweredText) + getTextRightSpacing(p.PoweredText) + getTextBottomSpacing(p.PoweredText) + getTextGlobalSpacing(p.PoweredText) + getTextVerticalAlignment(p.PoweredText);
                    item1.value = convertText(p.PoweredText)
                } else
                    v.style += "valveType=gate;"
            } else {
                v.style += "verticalLabelPosition=bottom;verticalAlign=top;shape=mxgraph.pid2valves.valve;" + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v) + getFontSize(p) + getFontColor(p) + getFontStyle(p) + getTextAlignment(p);
                v.value = convertText(p.Text);
                switch (obj.Class) {
                case "PEGateValveBlock":
                    v.style += "valveType=gate;";
                    break;
                case "PEGlobeValveBlock":
                    v.style += "valveType=globe;";
                    break;
                case "PEAngleValveBlock":
                    v.style += "valveType=angle;";
                    break;
                case "PEAngleGlobeValveBlock":
                    v.style += "valveType=angleGlobe;flipH=1;";
                    break
                }
                if (p.handOperated == 1)
                    v.style += "actuator=man;"
            }
            break;
        case "UI2BrowserBlock":
            v.style += "shape=mxgraph.mockup.containers.browserWindow;mainText=;" + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v);
            if (p.vScroll == 1) {
                if (p.hScroll == 1)
                    var item3 = new mxCell("",new mxGeometry(1,0,20,h - 130),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                else
                    var item3 = new mxCell("",new mxGeometry(1,0,20,h - 110),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                item3.geometry.relative = true;
                item3.geometry.offset = new mxPoint(-20,110);
                item3.vertex = true;
                v.insert(item3);
                v.style += "spacingRight=20;"
            }
            if (p.hScroll == 1) {
                if (p.vScroll == 1)
                    var item4 = new mxCell("",new mxGeometry(0,1,w - 20,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                else
                    var item4 = new mxCell("",new mxGeometry(0,1,w,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                item4.geometry.relative = true;
                item4.geometry.offset = new mxPoint(0,-20);
                item4.vertex = true;
                v.insert(item4)
            }
            break;
        case "UI2WindowBlock":
            v.style += "shape=mxgraph.mockup.containers.window;mainText=;align=center;verticalAlign=top;spacing=5;" + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v) + getFontSize(p.Title) + getFontColor(p.Title) + getFontStyle(p.Title);
            v.value = convertText(p.Title);
            if (p.vScroll == 1) {
                if (p.hScroll == 1)
                    var item3 = new mxCell("",new mxGeometry(1,0,20,h - 50),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                else
                    var item3 = new mxCell("",new mxGeometry(1,0,20,h - 30),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                item3.geometry.relative = true;
                item3.geometry.offset = new mxPoint(-20,30);
                item3.vertex = true;
                v.insert(item3);
                v.style += "spacingRight=20;"
            }
            if (p.hScroll == 1) {
                if (p.vScroll == 1)
                    var item4 = new mxCell("",new mxGeometry(0,1,w - 20,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                else
                    var item4 = new mxCell("",new mxGeometry(0,1,w,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                item4.geometry.relative = true;
                item4.geometry.offset = new mxPoint(0,-20);
                item4.vertex = true;
                v.insert(item4)
            }
            break;
        case "UI2DialogBlock":
            v.style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v) + getLabelStyle(p.Text);
            v.value = convertText(p.Text);
            var item1 = new mxCell("",new mxGeometry(0,0,w,30),"part=1;resizeHeight=0;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += st + getLabelStyle(p.Title);
            item1.value = convertText(p.Title);
            var item2 = new mxCell("",new mxGeometry(1,.5,20,20),"part=1;shape=ellipse;strokeColor=#008cff;resizable=0;fillColor=none;html=1;");
            item2.geometry.relative = true;
            item2.geometry.offset = new mxPoint(-25,-10);
            item2.vertex = true;
            item1.insert(item2);
            if (p.vScroll == 1) {
                if (p.hScroll == 1)
                    var item3 = new mxCell("",new mxGeometry(1,0,20,h - 50),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                else
                    var item3 = new mxCell("",new mxGeometry(1,0,20,h - 30),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                item3.geometry.relative = true;
                item3.geometry.offset = new mxPoint(-20,30);
                item3.vertex = true;
                v.insert(item3);
                v.style += "spacingRight=20;"
            }
            if (p.hScroll == 1) {
                if (p.vScroll == 1)
                    var item4 = new mxCell("",new mxGeometry(0,1,w - 20,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                else
                    var item4 = new mxCell("",new mxGeometry(0,1,w,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                item4.geometry.relative = true;
                item4.geometry.offset = new mxPoint(0,-20);
                item4.vertex = true;
                v.insert(item4)
            }
            break;
        case "UI2AccordionBlock":
            v.style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v);
            var item1 = new Array;
            var itemH = 25;
            for (var i = 0; i <= p.Panels - 1; i++) {
                if (i < p.Selected - 1) {
                    item1[i] = new mxCell("",new mxGeometry(0,i * itemH,w,itemH),"part=1;fillColor=#000000;fillOpacity=25;");
                    item1[i].vertex = true;
                    v.insert(item1[i]);
                    item1[i].style += getLabelStyle(p["Panel_" + (i + 1)]);
                    item1[i].value = convertText(p["Panel_" + (i + 1)])
                } else if (i == p.Selected - 1) {
                    item1[i] = new mxCell("",new mxGeometry(0,i * itemH,w,itemH),"part=1;fillColor=none;");
                    item1[i].vertex = true;
                    v.insert(item1[i]);
                    item1[i].style += getLabelStyle(p["Panel_" + (i + 1)]);
                    item1[i].value = convertText(p["Panel_" + (i + 1)])
                } else {
                    item1[i] = new mxCell("",new mxGeometry(0,h - (p.Panels - p.Selected) * itemH + (i - p.Selected) * itemH,w,itemH),"part=1;fillColor=#000000;fillOpacity=25;");
                    item1[i].vertex = true;
                    v.insert(item1[i]);
                    item1[i].style += getLabelStyle(p["Panel_" + (i + 1)]);
                    item1[i].value = convertText(p["Panel_" + (i + 1)])
                }
                if (item1[i].style.indexOf(";align=") < 0)
                    item1[i].style += "align=left;spacingLeft=5;"
            }
            var fc2 = getStrokeColor(p, a);
            fc2 = fc2.replace("strokeColor", "fillColor2");
            if (fc2 == "")
                fc2 = "fillColor2=#000000;";
            if (p.vScroll == 1) {
                if (p.hScroll == 1)
                    var item2 = new mxCell("",new mxGeometry(1,0,20,h - p.Selected * itemH - 20 - (p.Panels - p.Selected) * itemH),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                else
                    var item2 = new mxCell("",new mxGeometry(1,0,20,h - p.Selected * itemH - (p.Panels - p.Selected) * itemH),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(-20,p.Selected * itemH);
                item2.vertex = true;
                v.insert(item2);
                v.style += "spacingRight=20;";
                item2.style += fc2 + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
            }
            if (p.hScroll == 1) {
                if (p.vScroll == 1)
                    var item3 = new mxCell("",new mxGeometry(0,1,w - 20,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                else
                    var item3 = new mxCell("",new mxGeometry(0,1,w,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                item3.geometry.relative = true;
                item3.geometry.offset = new mxPoint(0,-20 - (p.Panels - p.Selected) * itemH);
                item3.vertex = true;
                v.insert(item3);
                item3.style += fc2 + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
            }
            if (p.vScroll == 1)
                item4 = new mxCell("",new mxGeometry(0,p.Selected * itemH,w - 20,h - p.Selected * itemH - 20 - (p.Panels - p.Selected) * itemH),"part=1;fillColor=none;strokeColor=none;");
            else
                item4 = new mxCell("",new mxGeometry(0,p.Selected * itemH,w - 20,h - p.Selected * itemH - (p.Panels - p.Selected) * itemH),"part=1;fillColor=none;strokeColor=none;");
            item4.vertex = true;
            v.insert(item4);
            item4.style += getLabelStyle(p["Content_1"]);
            if (item4.style.indexOf(";align=") < 0)
                item4.style += "align=left;spacingLeft=5;";
            item4.value = convertText(p["Content_1"]);
            break;
        case "UI2TabBarContainerBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var item1 = new Array;
            var item2 = new Array;
            var itemH = 25;
            var itemS = 3;
            var itemW = (w + itemS) / (p.Tabs + 1);
            var startW = 10;
            var bg = new mxCell("",new mxGeometry(0,itemH,w,h - itemH),"part=1;");
            bg.vertex = true;
            v.insert(bg);
            bg.style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v);
            for (var i = 0; i <= p.Tabs - 1; i++) {
                if (i == p.Selected - 1) {
                    item2[i] = new mxCell("",new mxGeometry(startW + i * itemW,0,itemW - itemS,itemH),"");
                    item2[i].vertex = true;
                    v.insert(item2[i]);
                    item2[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p["Tab_" + (i + 1)]);
                    item2[i].value = convertText(p["Tab_" + (i + 1)])
                } else {
                    item1[i] = new mxCell("",new mxGeometry(startW + i * itemW,0,itemW - itemS,itemH),"strokeColor=none;");
                    item1[i].vertex = true;
                    v.insert(item1[i]);
                    item1[i].style += getOpacity(p, a) + getFillColor(p, a) + getShadow(p);
                    item2[i] = new mxCell("",new mxGeometry(0,0,itemW - itemS,itemH),"fillColor=#000000;fillOpacity=25;");
                    item2[i].vertex = true;
                    item1[i].insert(item2[i]);
                    item2[i].style += getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p["Tab_" + (i + 1)]);
                    item2[i].value = convertText(p["Tab_" + (i + 1)])
                }
                if (item2[i].style.indexOf(";align=") < 0)
                    item2[i].style += "align=left;spacingLeft=2;"
            }
            var fc2 = getStrokeColor(p, a);
            fc2 = fc2.replace("strokeColor", "fillColor2");
            if (fc2 == "")
                fc2 = "fillColor2=#000000;";
            if (p.vScroll == 1) {
                if (p.hScroll == 1)
                    var item2 = new mxCell("",new mxGeometry(1,0,20,h - 20 - itemH),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                else
                    var item2 = new mxCell("",new mxGeometry(1,0,20,h - itemH),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(-20,itemH);
                item2.vertex = true;
                v.insert(item2);
                v.style += "spacingRight=20;";
                item2.style += fc2 + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
            }
            if (p.hScroll == 1) {
                if (p.vScroll == 1)
                    var item3 = new mxCell("",new mxGeometry(0,1,w - 20,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                else
                    var item3 = new mxCell("",new mxGeometry(0,1,w,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                item3.geometry.relative = true;
                item3.geometry.offset = new mxPoint(0,-20);
                item3.vertex = true;
                v.insert(item3);
                item3.style += fc2 + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
            }
            break;
        case "UI2TabBar2ContainerBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var item1 = new Array;
            var item2 = new Array;
            var itemH = 25;
            var itemS = 3;
            var itemW = (w + itemS) / p.Tabs;
            var bg = new mxCell("",new mxGeometry(0,itemH,w,h - itemH),"part=1;");
            bg.vertex = true;
            v.insert(bg);
            bg.style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v);
            for (var i = 0; i <= p.Tabs - 1; i++) {
                if (i == p.Selected - 1) {
                    item2[i] = new mxCell("",new mxGeometry(i * itemW,0,itemW - itemS,itemH),"");
                    item2[i].vertex = true;
                    v.insert(item2[i]);
                    item2[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p["Tab_" + (i + 1)]);
                    item2[i].value = convertText(p["Tab_" + (i + 1)])
                } else {
                    item1[i] = new mxCell("",new mxGeometry(i * itemW,0,itemW - itemS,itemH),"strokeColor=none;");
                    item1[i].vertex = true;
                    v.insert(item1[i]);
                    item1[i].style += getOpacity(p, a) + getFillColor(p, a) + getShadow(p);
                    item2[i] = new mxCell("",new mxGeometry(0,0,itemW - itemS,itemH),"fillColor=#000000;fillOpacity=25;");
                    item2[i].vertex = true;
                    item1[i].insert(item2[i]);
                    item2[i].style += getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p["Tab_" + (i + 1)]);
                    item2[i].value = convertText(p["Tab_" + (i + 1)])
                }
                if (item2[i].style.indexOf(";align=") < 0)
                    item2[i].style += "align=left;spacingLeft=2;"
            }
            var fc2 = getStrokeColor(p, a);
            fc2 = fc2.replace("strokeColor", "fillColor2");
            if (fc2 == "")
                fc2 = "fillColor2=#000000;";
            if (p.vScroll == 1) {
                if (p.hScroll == 1)
                    var item2 = new mxCell("",new mxGeometry(1,0,20,h - 20 - itemH),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                else
                    var item2 = new mxCell("",new mxGeometry(1,0,20,h - itemH),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(-20,itemH);
                item2.vertex = true;
                v.insert(item2);
                v.style += "spacingRight=20;";
                item2.style += fc2 + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
            }
            if (p.hScroll == 1) {
                if (p.vScroll == 1)
                    var item3 = new mxCell("",new mxGeometry(0,1,w - 20,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                else
                    var item3 = new mxCell("",new mxGeometry(0,1,w,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                item3.geometry.relative = true;
                item3.geometry.offset = new mxPoint(0,-20);
                item3.vertex = true;
                v.insert(item3);
                item3.style += fc2 + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
            }
            break;
        case "UI2VTabBarContainerBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var item1 = new Array;
            var item2 = new Array;
            var itemS = 3;
            var itemH = 25 + itemS;
            var itemW = 80;
            var startH = 10;
            var bg = new mxCell("",new mxGeometry(itemW,0,w - itemW,h),"part=1;");
            bg.vertex = true;
            v.insert(bg);
            bg.style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v);
            for (var i = 0; i <= p.Tabs - 1; i++) {
                if (i == p.Selected - 1) {
                    item2[i] = new mxCell("",new mxGeometry(0,startH + i * itemH,itemW,itemH - itemS),"");
                    item2[i].vertex = true;
                    v.insert(item2[i]);
                    item2[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p["Tab_" + (i + 1)]);
                    item2[i].value = convertText(p["Tab_" + (i + 1)])
                } else {
                    item1[i] = new mxCell("",new mxGeometry(0,startH + i * itemH,itemW,itemH - itemS),"strokeColor=none;");
                    item1[i].vertex = true;
                    v.insert(item1[i]);
                    item1[i].style += getOpacity(p, a) + getFillColor(p, a) + getShadow(p);
                    item2[i] = new mxCell("",new mxGeometry(0,0,itemW,itemH - itemS),"fillColor=#000000;fillOpacity=25;");
                    item2[i].vertex = true;
                    item1[i].insert(item2[i]);
                    item2[i].style += getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p["Tab_" + (i + 1)]);
                    item2[i].value = convertText(p["Tab_" + (i + 1)])
                }
                if (item2[i].style.indexOf(";align=") < 0)
                    item2[i].style += "align=left;spacingLeft=2;"
            }
            var fc2 = getStrokeColor(p, a);
            fc2 = fc2.replace("strokeColor", "fillColor2");
            if (fc2 == "")
                fc2 = "fillColor2=#000000;";
            if (p.vScroll == 1) {
                if (p.hScroll == 1)
                    var item2 = new mxCell("",new mxGeometry(1,0,20,h - 20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                else
                    var item2 = new mxCell("",new mxGeometry(1,0,20,h),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=95;direction=north;resizeHeight=1;");
                item2.geometry.relative = true;
                item2.geometry.offset = new mxPoint(-20,0);
                item2.vertex = true;
                v.insert(item2);
                v.style += "spacingRight=20;";
                item2.style += fc2 + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
            }
            if (p.hScroll == 1) {
                if (p.vScroll == 1)
                    var item3 = new mxCell("",new mxGeometry(itemW,1,w - 20 - itemW,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                else
                    var item3 = new mxCell("",new mxGeometry(itemW,1,w - itemW,20),"part=1;shape=mxgraph.mockup.navigation.scrollBar;barPos=5;resizeWidth=1;");
                item3.geometry.relative = true;
                item3.geometry.offset = new mxPoint(0,-20);
                item3.vertex = true;
                v.insert(item3);
                item3.style += fc2 + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
            }
            break;
        case "UI2CheckBoxBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var itemH = h / p.Options;
            var item1 = new Array;
            var item2 = new Array;
            for (var i = 0; i < p.Options; i++) {
                item1[i] = new mxCell("",new mxGeometry(0,i * itemH + itemH * .5 - 5,10,10),"labelPosition=right;part=1;verticalLabelPosition=middle;align=left;verticalAlign=middle;spacingLeft=3;");
                item1[i].vertex = true;
                v.insert(item1[i]);
                item1[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p["Option_" + (i + 1)]);
                if (p.Selected[i + 1] != null)
                    if (p.Selected[i + 1] == 1) {
                        var fc = getStrokeColor(p, a);
                        fc = fc.replace("strokeColor", "fillColor");
                        if (fc == "")
                            fc = "fillColor=#000000;";
                        item2[i] = new mxCell("",new mxGeometry(2,2,6,6),"shape=mxgraph.mscae.general.checkmark;part=1;");
                        item2[i].vertex = true;
                        item1[i].insert(item2[i]);
                        item2[i].style += fc + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
                    }
                item1[i].value = convertText(p["Option_" + (i + 1)])
            }
            break;
        case "UI2HorizontalCheckBoxBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var itemW = w / p.Options;
            var item1 = new Array;
            var item2 = new Array;
            for (var i = 0; i < p.Options; i++) {
                item1[i] = new mxCell("",new mxGeometry(i * itemW,h * .5 - 5,10,10),"labelPosition=right;part=1;verticalLabelPosition=middle;align=left;verticalAlign=middle;spacingLeft=3;");
                item1[i].vertex = true;
                v.insert(item1[i]);
                item1[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p["Option_" + (i + 1)]);
                if (p.Selected[i + 1] != null)
                    if (p.Selected[i + 1] == 1) {
                        var fc = getStrokeColor(p, a);
                        fc = fc.replace("strokeColor", "fillColor");
                        if (fc == "")
                            fc = "fillColor=#000000;";
                        item2[i] = new mxCell("",new mxGeometry(2,2,6,6),"shape=mxgraph.mscae.general.checkmark;part=1;");
                        item2[i].vertex = true;
                        item1[i].insert(item2[i]);
                        item2[i].style += fc + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
                    }
                item1[i].value = convertText(p["Option_" + (i + 1)])
            }
            break;
        case "UI2RadioBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var itemH = h / p.Options;
            var item1 = new Array;
            var item2 = new Array;
            for (var i = 0; i < p.Options; i++) {
                item1[i] = new mxCell("",new mxGeometry(0,i * itemH + itemH * .5 - 5,10,10),"shape=ellipse;labelPosition=right;part=1;verticalLabelPosition=middle;align=left;verticalAlign=middle;spacingLeft=3;");
                item1[i].vertex = true;
                v.insert(item1[i]);
                item1[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p["Option_" + (i + 1)]);
                if (p.Selected != null)
                    if (p.Selected == i + 1) {
                        var fc = getStrokeColor(p, a);
                        fc = fc.replace("strokeColor", "fillColor");
                        if (fc == "")
                            fc = "fillColor=#000000;";
                        item2[i] = new mxCell("",new mxGeometry(2.5,2.5,5,5),"shape=ellipse;");
                        item2[i].vertex = true;
                        item1[i].insert(item2[i]);
                        item2[i].style += fc + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
                    }
                item1[i].value = convertText(p["Option_" + (i + 1)])
            }
            break;
        case "UI2HorizontalRadioBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var itemW = w / p.Options;
            var item1 = new Array;
            var item2 = new Array;
            for (var i = 0; i < p.Options; i++) {
                item1[i] = new mxCell("",new mxGeometry(i * itemW,h * .5 - 5,10,10),"shape=ellipse;labelPosition=right;part=1;verticalLabelPosition=middle;align=left;verticalAlign=middle;spacingLeft=3;");
                item1[i].vertex = true;
                v.insert(item1[i]);
                item1[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p["Option_" + (i + 1)]);
                if (p.Selected != null)
                    if (p.Selected == i + 1) {
                        var fc = getStrokeColor(p, a);
                        fc = fc.replace("strokeColor", "fillColor");
                        if (fc == "")
                            fc = "fillColor=#000000;";
                        item2[i] = new mxCell("",new mxGeometry(2,2,6,6),"shape=ellipse;part=1;");
                        item2[i].vertex = true;
                        item1[i].insert(item2[i]);
                        item2[i].style += fc + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
                    }
                item1[i].value = convertText(p["Option_" + (i + 1)])
            }
            break;
        case "UI2HSliderBlock":
        case "UI2VSliderBlock":
            v.style += "shape=mxgraph.mockup.forms.horSlider;sliderStyle=basic;handleStyle=handle;" + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p);
            if (obj.Class == "UI2VSliderBlock")
                v.style += "direction=south;";
            v.style += "sliderPos=" + p.ScrollVal * 100 + ";";
            break;
        case "UI2DatePickerBlock":
            v.style += "strokeColor=none;fillColor=none;";
            var item1 = new mxCell("",new mxGeometry(0,0,w * .6,h),"part=1;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p.Date);
            item1.value = convertText(p.Date);
            var fc = getStrokeColor(p, a);
            fc = fc.replace("strokeColor", "fillColor");
            if (fc == "")
                fc = "fillColor=#000000;";
            var item2 = new mxCell("",new mxGeometry(w * .75,0,w * .25,h),"part=1;shape=mxgraph.gmdl.calendar;");
            item2.vertex = true;
            v.insert(item2);
            item2.style += fc + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p);
            break;
        case "UI2SearchBlock":
            v.style += "shape=mxgraph.mockup.forms.searchBox;mainText=;flipH=1;align=left;spacingLeft=26;" + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getFontSize(p.Search) + getFontColor(p.Search) + getFontStyle(p.Search);
            v.value = convertText(p.Search);
            break;
        case "UI2NumericStepperBlock":
            var fc = getStrokeColor(p, a);
            fc = fc.replace("strokeColor", "fillColor");
            if (fc == "")
                fc = "fillColor=#000000;";
            v.style += "shape=mxgraph.mockup.forms.spinner;spinLayout=right;spinStyle=normal;adjStyle=triangle;mainText=;align=left;spacingLeft=8;" + fc + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getFontSize(p.Number) + getFontColor(p.Number) + getFontStyle(p.Number);
            v.value = convertText(p.Number);
            break;
        case "UI2TableBlock":
            break;
        case "UI2ButtonBarBlock":
            v.style += getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p);
            var item1 = new Array;
            var item2 = new Array;
            var itemW = w / p.Buttons;
            for (var i = 0; i <= p.Buttons - 1; i++)
                if (i == p.Selected - 1) {
                    item2[i] = new mxCell("",new mxGeometry(i * itemW,0,itemW,h),"");
                    item2[i].vertex = true;
                    v.insert(item2[i]);
                    item2[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p["Button_" + (i + 1)]);
                    item2[i].value = convertText(p["Button_" + (i + 1)])
                } else {
                    item1[i] = new mxCell("",new mxGeometry(i * itemW,0,itemW,h),"strokeColor=none;");
                    item1[i].vertex = true;
                    v.insert(item1[i]);
                    item1[i].style += getOpacity(p, a) + getFillColor(p, a) + getShadow(p);
                    item2[i] = new mxCell("",new mxGeometry(0,0,itemW,h),"fillColor=#000000;fillOpacity=25;");
                    item2[i].vertex = true;
                    item1[i].insert(item2[i]);
                    item2[i].style += getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p["Button_" + (i + 1)]);
                    item2[i].value = convertText(p["Button_" + (i + 1)])
                }
            break;
        case "UI2VerticalButtonBarBlock":
            v.style += getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p);
            var item1 = new Array;
            var item2 = new Array;
            var itemH = h / p.Buttons;
            for (var i = 0; i <= p.Buttons - 1; i++)
                if (i == p.Selected - 1) {
                    item2[i] = new mxCell("",new mxGeometry(0,i * itemH,w,itemH),"");
                    item2[i].vertex = true;
                    v.insert(item2[i]);
                    item2[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p["Button_" + (i + 1)]);
                    item2[i].value = convertText(p["Button_" + (i + 1)])
                } else {
                    item1[i] = new mxCell("",new mxGeometry(0,i * itemH,w,itemH),"strokeColor=none;");
                    item1[i].vertex = true;
                    v.insert(item1[i]);
                    item1[i].style += getOpacity(p, a) + getFillColor(p, a) + getShadow(p);
                    item2[i] = new mxCell("",new mxGeometry(0,0,w,itemH),"fillColor=#000000;fillOpacity=25;");
                    item2[i].vertex = true;
                    item1[i].insert(item2[i]);
                    item2[i].style += getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p["Button_" + (i + 1)]);
                    item2[i].value = convertText(p["Button_" + (i + 1)])
                }
            break;
        case "UI2LinkBarBlock":
            v.style += "strokeColor=none;fillColor=none;" + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p);
            var item1 = new Array;
            var item2 = new Array;
            var itemW = w / p.Links;
            for (var i = 0; i < p.Links; i++) {
                if (i != 0) {
                    item2[i] = new mxCell("",new mxGeometry(i * itemW,0,itemW,h),"shape=partialRectangle;top=0;bottom=0;right=0;fillColor=none;");
                    item2[i].style += getOpacity(p, a) + getShadow(p) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p)
                } else
                    item2[i] = new mxCell("",new mxGeometry(i * itemW,0,itemW,h),"fillColor=none;strokeColor=none;");
                item2[i].vertex = true;
                v.insert(item2[i]);
                item2[i].style += getLabelStyle(p["Link_" + (i + 1)]);
                item2[i].value = convertText(p["Link_" + (i + 1)])
            }
            break;
        case "UI2BreadCrumbsBlock":
            v.style += "strokeColor=none;fillColor=none;" + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p);
            var item1 = new Array;
            var item2 = new Array;
            var itemW = w / p.Links;
            for (var i = 0; i < p.Links; i++) {
                item1[i] = new mxCell("",new mxGeometry(i * itemW,0,itemW,h),"fillColor=none;strokeColor=none;");
                item1[i].vertex = true;
                v.insert(item1[i]);
                item1[i].style += getLabelStyle(p["Link_" + (i + 1)]);
                item1[i].value = convertText(p["Link_" + (i + 1)])
            }
            for (var i = 1; i < p.Links; i++) {
                item2[i] = new mxCell("",new mxGeometry(i / p.Links,.5,6,10),"shape=mxgraph.ios7.misc.right;");
                item2[i].geometry.relative = true;
                item2[i].geometry.offset = new mxPoint(-3,-5);
                item2[i].vertex = true;
                v.insert(item2[i])
            }
            break;
        case "UI2MenuBarBlock":
            v.style += "strokeColor=none;" + getOpacity(p, a) + getFillColor(p, a) + getShadow(p);
            var item1 = new Array;
            var itemW = w / (p.Buttons + 1);
            for (var i = 0; i <= p.Buttons - 1; i++) {
                if (i != p.Selected - 1)
                    item1[i] = new mxCell("",new mxGeometry(0,0,itemW,h),"strokeColor=none;fillColor=none;resizeHeight=1;");
                else
                    item1[i] = new mxCell("",new mxGeometry(0,0,itemW,h),"fillColor=#000000;fillOpacity=25;strokeColor=none;resizeHeight=1;");
                item1[i].geometry.relative = true;
                item1[i].geometry.offset = new mxPoint(i * itemW,0);
                item1[i].vertex = true;
                v.insert(item1[i]);
                item1[i].style += getLabelStyle(p["MenuItem_" + (i + 1)]);
                item1[i].value = convertText(p["MenuItem_" + (i + 1)])
            }
            break;
        case "UI2AtoZBlock":
            v.style += "fillColor=none;strokeColor=none;" + getLabelStyle(p["Text_0"]);
            v.value = "0-9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z";
            break;
        case "UI2PaginationBlock":
            v.style += "fillColor=none;strokeColor=none;" + getLabelStyle(p.Text_prev);
            v.value = convertText(p.Text_prev) + " ";
            for (var i = 0; i < p.Links; i++)
                v.value += convertText(p["Link_" + (i + 1)]) + " ";
            v.value += convertText(p.Text_next);
            break;
        case "UI2ContextMenuBlock":
            v.style += getOpacity(p, a) + getFillColor(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p);
            var item = new Array;
            var icon = new Array;
            var shortcut = new Array;
            var itemH = h / p.Lines;
            var st = null;
            for (var i = 0; i < p.Lines; i++) {
                if (p["Item_" + (i + 1)] != null) {
                    if (st == null)
                        st = "" + getFontSize(p["Item_" + (i + 1)]) + getFontColor(p["Item_" + (i + 1)]) + getFontStyle(p["Item_" + (i + 1)]);
                    item[i] = new mxCell("",new mxGeometry(0,i * h / p.Lines,w,itemH),"strokeColor=none;fillColor=none;spacingLeft=20;align=left;html=1;");
                    item[i].vertex = true;
                    v.insert(item[i]);
                    item[i].style += st;
                    item[i].value = convertText(p["Item_" + (i + 1)])
                }
                if (p.Icons[i + 1] != null && item[i] != null) {
                    if (p.Icons[i + 1] == "dot") {
                        icon[i] = new mxCell("",new mxGeometry(0,.5,8,8),"shape=ellipse;strokeColor=none;");
                        icon[i].geometry.offset = new mxPoint(6,-4)
                    } else if (p.Icons[i + 1] == "check") {
                        icon[i] = new mxCell("",new mxGeometry(0,.5,7,8),"shape=mxgraph.mscae.general.checkmark;strokeColor=none;");
                        icon[i].geometry.offset = new mxPoint(6.5,-4)
                    }
                    if (icon[i] != null) {
                        icon[i].geometry.relative = true;
                        icon[i].vertex = true;
                        item[i].insert(icon[i]);
                        var fc = getStrokeColor(p, a);
                        fc = fc.replace("strokeColor", "fillColor");
                        if (fc == "")
                            fc = "fillColor=#000000;";
                        icon[i].style += fc
                    }
                }
                if (p["Shortcut_" + (i + 1)] != null) {
                    if (st == null)
                        st = "" + getFontSize(p["Shortcut_" + (i + 1)]) + getFontColor(p["Shortcut_" + (i + 1)]) + getFontStyle(p["Shortcut_" + (i + 1)]);
                    shortcut[i] = new mxCell("",new mxGeometry(w * .6,i * h / p.Lines,w * .4,itemH),"strokeColor=none;fillColor=none;spacingRight=3;align=right;html=1;");
                    shortcut[i].vertex = true;
                    v.insert(shortcut[i]);
                    shortcut[i].style += st;
                    shortcut[i].value = convertText(p["Shortcut_" + (i + 1)])
                }
                if (p.Dividers[i + 1] != null) {
                    item[i] = new mxCell("",new mxGeometry(w * .05,i * h / p.Lines,w * .9,itemH),"shape=line;strokeWidth=0.25;");
                    item[i].vertex = true;
                    v.insert(item[i]);
                    item[i].style += getStrokeColor(p, a)
                }
            }
            break;
        case "UI2TreePaneBlock":
            break;
        case "UI2ProgressBarBlock":
            v.style += "shape=mxgraph.mockup.misc.progressBar;fillColor2=#888888;barPos=" + p.ScrollVal * 100 + ";";
            break;
        case "UI2TooltipSquareBlock":
            v.style += "html=1;shape=callout;flipV=1;base=13;size=7;position=0.5;position2=0.66;rounded=1;arcSize=" + p.RoundCorners + ";" + getOpacity(p, a) + getFillColor(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p.Tip);
            v.value = convertText(p.Tip);
            break;
        case "UI2CalloutBlock":
            v.style += "shape=ellipse;" + getOpacity(p, a) + getFillColor(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getLabelStyle(p.Txt);
            v.value = convertText(p.Txt);
            break;
        case "UI2AlertBlock":
            v.style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getShadow(p) + getRotation(p, a, v) + getLabelStyle(p.Txt);
            v.value = convertText(p.Txt);
            var item1 = new mxCell("",new mxGeometry(0,0,w,30),"part=1;resizeHeight=0;");
            item1.vertex = true;
            v.insert(item1);
            item1.style += st + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p.Title);
            item1.value = convertText(p.Title);
            var item2 = new mxCell("",new mxGeometry(1,.5,20,20),"part=1;shape=ellipse;strokeColor=#008cff;resizable=0;fillColor=none;html=1;");
            item2.geometry.relative = true;
            item2.geometry.offset = new mxPoint(-25,-10);
            item2.vertex = true;
            item1.insert(item2);
            var bw = 45;
            var bh = 20;
            var bs = 10;
            var totalW = bw * p.Buttons + (bs * p.Buttons - 1);
            item3 = new Array;
            for (var i = 0; i < p.Buttons; i++) {
                item3[i] = new mxCell("",new mxGeometry(.5,1,bw,bh),"part=1;html=1;");
                item3[i].geometry.relative = true;
                item3[i].geometry.offset = new mxPoint(-totalW * .5 + i * (bw + bs),-40);
                item3[i].vertex = true;
                v.insert(item3[i]);
                item3[i].style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p["Button_" + (i + 1)]);
                item3[i].value = convertText(p["Button_" + (i + 1)])
            }
            break;
        case "UMLClassBlock":
            if (p.Simple == 0) {
                var st = getFillColor(p, a);
                var th = Math.round(p.TitleHeight * scale);
                st = st.replace("fillColor", "swimlaneFillColor");
                if (st == "")
                    st = "swimlaneFillColor=#ffffff;";
                v.style += "swimlane;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;" + st + "startSize=" + th + ";" + getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p.Title);
                v.value = convertText(p.Title);
                var item = new Array;
                var divider = new Array;
                var currH = th / h;
                for (var i = 0; i <= p.Attributes; i++) {
                    if (i > 0) {
                        divider[i] = new mxCell("",new mxGeometry(0,0,40,8),"line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;");
                        divider[i].vertex = true;
                        v.insert(divider[i])
                    }
                    var itemH = 0;
                    if (i < p.Attributes) {
                        itemH = p["Text" + (i + 1) + "Percent"];
                        currH += itemH
                    } else
                        itemH = 1 - currH;
                    item[i] = new mxCell("",new mxGeometry(0,0,w,Math.round((h - th) * itemH)),"part=1;resizeHeight=0;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;");
                    item[i].vertex = true;
                    v.insert(item[i]);
                    item[i].style += st + getOpacity(p, a) + getFontSize(p["Text" + (i + 1)]) + getFontColor(p["Text" + (i + 1)]) + getFontStyle(p["Text" + (i + 1)]);
                    item[i].value = convertText(p["Text" + (i + 1)])
                }
            } else {
                v.style += getOpacity(p, a) + getStrokeColor(p, a) + getFillColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p.Title);
                v.value = convertText(p.Title)
            }
            break;
        case "ERDEntityBlock":
            var st = getFillColor(p, a);
            var th = p.Name_h * scale;
            st = st.replace("fillColor", "swimlaneFillColor");
            if (st == "")
                st = "swimlaneFillColor=#ffffff;";
            v.style += "swimlane;childLayout=stackLayout;horizontal=1;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;" + st + "startSize=" + th + ";" + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p.Name);
            if (p.ShadedHeader)
                v.style += "fillColor=#e0e0e0;";
            else
                v.style += getFillColor(p, a);
            v.value = convertText(p.Name);
            var item = new Array;
            var currH = th / h;
            for (var i = 0; i < p.Fields; i++) {
                var itemH = 0;
                item[i] = new mxCell("",new mxGeometry(0,0,w,p["Field" + (i + 1) + "_h"] * scale),"part=1;resizeHeight=0;strokeColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;");
                item[i].vertex = true;
                v.insert(item[i]);
                item[i].style += st + getFontSize(p["Field" + (i + 1)]) + getFontColor(p["Field" + (i + 1)]) + getFontStyle(p["Field" + (i + 1)]);
                if (p.AltRows == 1 && i % 2 != 0)
                    item[i].style += "fillColor=#000000;opacity=5;";
                else
                    item[i].style += "fillColor=none;" + getOpacity(p, a);
                item[i].value = convertText(p["Field" + (i + 1)])
            }
            break;
        case "ERDEntityBlock2":
            var st = getFillColor(p, a);
            var th = p.Name_h * scale;
            st = st.replace("fillColor", "swimlaneFillColor");
            if (st == "")
                st = "swimlaneFillColor=#ffffff;";
            v.style += "swimlane;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;" + st + "startSize=" + th + ";" + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p.Name);
            if (p.ShadedHeader)
                v.style += "fillColor=#e0e0e0;";
            else
                v.style += getFillColor(p, a);
            v.value = convertText(p.Name);
            var item = new Array;
            var key = new Array;
            var currH = th;
            var keyW = 30;
            if (p.Column1 != null)
                keyW = p.Column1 * scale;
            for (var i = 0; i < p.Fields; i++) {
                var itemH = 0;
                key[i] = new mxCell("",new mxGeometry(0,currH,keyW,p["Key" + (i + 1) + "_h"] * scale),"strokeColor=none;part=1;resizeHeight=0;align=center;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;");
                key[i].vertex = true;
                v.insert(key[i]);
                key[i].style += st + getFontSize(p["Key" + (i + 1)]) + getFontColor(p["Key" + (i + 1)]) + getFontStyle(p["Key" + (i + 1)]);
                if (p.AltRows == 1 && i % 2 != 0)
                    key[i].style += "fillColor=#000000;fillOpacity=5;";
                else
                    key[i].style += "fillColor=none;" + getOpacity(p, a);
                key[i].value = convertText(p["Key" + (i + 1)]);
                item[i] = new mxCell("",new mxGeometry(keyW,currH,w - keyW,p["Field" + (i + 1) + "_h"] * scale),"shape=partialRectangle;top=0;right=0;bottom=0;part=1;resizeHeight=0;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;");
                item[i].vertex = true;
                v.insert(item[i]);
                item[i].style += st + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getFontSize(p["Field" + (i + 1)]) + getFontColor(p["Field" + (i + 1)]) + getFontStyle(p["Field" + (i + 1)]);
                if (p.AltRows == 1 && i % 2 != 0)
                    item[i].style += "fillColor=#000000;fillOpacity=5;";
                else
                    item[i].style += "fillColor=none;" + getOpacity(p, a);
                item[i].value = convertText(p["Field" + (i + 1)]);
                currH += p["Key" + (i + 1) + "_h"] * scale
            }
            break;
        case "ERDEntityBlock3":
            var st = getFillColor(p, a);
            var th = p.Name_h * scale;
            st = st.replace("fillColor", "swimlaneFillColor");
            if (st == "")
                st = "swimlaneFillColor=#ffffff;";
            v.style += "swimlane;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;" + st + "startSize=" + th + ";" + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p.Name);
            if (p.ShadedHeader)
                v.style += "fillColor=#e0e0e0;";
            else
                v.style += getFillColor(p, a);
            v.value = convertText(p.Name);
            var item = new Array;
            var key = new Array;
            var currH = th;
            var keyW = 30;
            if (p.Column1 != null)
                keyW = p.Column1 * scale;
            for (var i = 0; i < p.Fields; i++) {
                var itemH = 0;
                key[i] = new mxCell("",new mxGeometry(0,currH,keyW,p["Field" + (i + 1) + "_h"] * scale),"strokeColor=none;part=1;resizeHeight=0;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;");
                key[i].vertex = true;
                v.insert(key[i]);
                key[i].style += st + getFontSize(p["Field" + (i + 1)]) + getFontColor(p["Field" + (i + 1)]) + getFontStyle(p["Field" + (i + 1)]);
                if (p.AltRows == 1 && i % 2 != 0)
                    key[i].style += "fillColor=#000000;fillOpacity=5;";
                else
                    key[i].style += "fillColor=none;" + getOpacity(p, a);
                key[i].value = convertText(p["Field" + (i + 1)]);
                item[i] = new mxCell("",new mxGeometry(keyW,currH,w - keyW,p["Type" + (i + 1) + "_h"] * scale),"shape=partialRectangle;top=0;right=0;bottom=0;part=1;resizeHeight=0;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;");
                item[i].vertex = true;
                v.insert(item[i]);
                item[i].style += st + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getFontSize(p["Type" + (i + 1)]) + getFontColor(p["Type" + (i + 1)]) + getFontStyle(p["Type" + (i + 1)]);
                if (p.AltRows == 1 && i % 2 != 0)
                    item[i].style += "fillColor=#000000;fillOpacity=5;";
                else
                    item[i].style += "fillColor=none;" + getOpacity(p, a);
                item[i].value = convertText(p["Type" + (i + 1)]);
                currH += p["Field" + (i + 1) + "_h"] * scale
            }
            break;
        case "ERDEntityBlock4":
            var st = getFillColor(p, a);
            var th = p.Name_h * scale;
            st = st.replace("fillColor", "swimlaneFillColor");
            if (st == "")
                st = "swimlaneFillColor=#ffffff;";
            v.style += "swimlane;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;" + st + "startSize=" + th + ";" + getOpacity(p, a) + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getLabelStyle(p.Name);
            if (p.ShadedHeader)
                v.style += "fillColor=#e0e0e0;";
            else
                v.style += getFillColor(p, a);
            v.value = convertText(p.Name);
            var item = new Array;
            var key = new Array;
            var type = new Array;
            var currH = th;
            var keyW = 30;
            var typeW = 40;
            if (p.Column1 != null)
                keyW = p.Column1 * scale;
            if (p.Column2 != null)
                typeW = p.Column2 * scale;
            for (var i = 0; i < p.Fields; i++) {
                var itemH = 0;
                key[i] = new mxCell("",new mxGeometry(0,currH,keyW,p["Key" + (i + 1) + "_h"] * scale),"strokeColor=none;part=1;resizeHeight=0;align=center;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;");
                key[i].vertex = true;
                v.insert(key[i]);
                key[i].style += st + getFontSize(p["Key" + (i + 1)]) + getFontColor(p["Key" + (i + 1)]) + getFontStyle(p["Key" + (i + 1)]);
                if (p.AltRows == 1 && i % 2 != 0)
                    key[i].style += "fillColor=#000000;fillOpacity=5;";
                else
                    key[i].style += "fillColor=none;" + getOpacity(p, a);
                key[i].value = convertText(p["Key" + (i + 1)]);
                item[i] = new mxCell("",new mxGeometry(keyW,currH,w - keyW - typeW,p["Field" + (i + 1) + "_h"] * scale),"shape=partialRectangle;top=0;right=0;bottom=0;part=1;resizeHeight=0;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;");
                item[i].vertex = true;
                v.insert(item[i]);
                item[i].style += st + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getFontSize(p["Field" + (i + 1)]) + getFontColor(p["Field" + (i + 1)]) + getFontStyle(p["Field" + (i + 1)]);
                if (p.AltRows == 1 && i % 2 != 0)
                    item[i].style += "fillColor=#000000;fillOpacity=5;";
                else
                    item[i].style += "fillColor=none;" + getOpacity(p, a);
                item[i].value = convertText(p["Field" + (i + 1)]);
                type[i] = new mxCell("",new mxGeometry(w - typeW,currH,typeW,p["Type" + (i + 1) + "_h"] * scale),"shape=partialRectangle;top=0;right=0;bottom=0;part=1;resizeHeight=0;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;");
                type[i].vertex = true;
                v.insert(type[i]);
                type[i].style += st + getStrokeColor(p, a) + getStrokeWidth(p) + getStrokeStyle(p) + getFontSize(p["Type" + (i + 1)]) + getFontColor(p["Type" + (i + 1)]) + getFontStyle(p["Type" + (i + 1)]);
                if (p.AltRows == 1 && i % 2 != 0)
                    type[i].style += "fillColor=#000000;fillOpacity=5;";
                else
                    type[i].style += "fillColor=none;" + getOpacity(p, a);
                type[i].value = convertText(p["Type" + (i + 1)]);
                currH += p["Key" + (i + 1) + "_h"] * scale
            }
            break
        }
        return v
    }
}
)();
function VsdxExport(editorUi) {
    var that = this;
    var vsdxCanvas = new mxVsdxCanvas2D;
    var idsMap = {};
    var idsCounter = 1;
    function createVsdxSkeleton(zip, pageCount) {
        var files = {
            "[Content_Types].xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Types xmlns='http://schemas.openxmlformats.org/package/2006/content-types'><Default Extension='png' ContentType='image/png'/><Default Extension='jpg' ContentType='image/jpeg'/><Default Extension='jpeg' ContentType='image/jpeg'/><Default Extension='svg' ContentType='image/svg+xml'/><Default Extension='bmp' ContentType='image/bmp'/><Default Extension='gif' ContentType='image/gif'/><Default Extension='emf' ContentType='image/x-emf' /><Default Extension='rels' ContentType='application/vnd.openxmlformats-package.relationships+xml' /><Default Extension='xml' ContentType='application/xml' /><Override PartName='/docProps/app.xml' ContentType='application/vnd.openxmlformats-officedocument.extended-properties+xml' /><Override PartName='/docProps/core.xml' ContentType='application/vnd.openxmlformats-package.core-properties+xml' /><Override PartName='/docProps/custom.xml' ContentType='application/vnd.openxmlformats-officedocument.custom-properties+xml' /><Override PartName='/visio/document.xml' ContentType='application/vnd.ms-visio.drawing.main+xml' /><Override PartName='/visio/masters/masters.xml' ContentType='application/vnd.ms-visio.masters+xml' /><Override PartName='/visio/masters/master1.xml' ContentType='application/vnd.ms-visio.master+xml'/><Override PartName='/visio/pages/page1.xml' ContentType='application/vnd.ms-visio.page+xml' /><Override PartName='/visio/pages/pages.xml' ContentType='application/vnd.ms-visio.pages+xml' /><Override PartName='/visio/windows.xml' ContentType='application/vnd.ms-visio.windows+xml' /></Types>",
            "_rels/.rels": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties' Target='docProps/core.xml' /><Relationship Id='rId2' Type='http://schemas.microsoft.com/visio/2010/relationships/document' Target='visio/document.xml' /><Relationship Id='rId3' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties' Target='docProps/custom.xml' /><Relationship Id='rId4' Type='http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties' Target='docProps/app.xml' /></Relationships>",
            "docProps/app.xml": '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Properties xmlns=\'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\' xmlns:vt=\'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\'><Application>Microsoft Visio</Application><AppVersion>15.0000</AppVersion><Template /><Manager /><Company /><HyperlinkBase /></Properties>',
            "docProps/core.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><cp:coreProperties xmlns:cp='http://schemas.openxmlformats.org/package/2006/metadata/core-properties' xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:dcterms='http://purl.org/dc/terms/' xmlns:dcmitype='http://purl.org/dc/dcmitype/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'><dc:title /><dc:subject /><dc:creator /><cp:keywords /><dc:description /><cp:category /><dc:language>en-US</dc:language></cp:coreProperties>",
            "docProps/custom.xml": '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Properties xmlns=\'http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\' xmlns:vt=\'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\' />',
            "visio/document.xml": "<?xml version='1.0' encoding='utf-8' ?><VisioDocument xmlns='http://schemas.microsoft.com/office/visio/2012/main' xmlns:r='http://schemas.openxmlformats.org/officeDocument/2006/relationships' xml:space='preserve'><DocumentSettings TopPage='0' DefaultTextStyle='3' DefaultLineStyle='3' DefaultFillStyle='3' DefaultGuideStyle='4'><GlueSettings>9</GlueSettings><SnapSettings>65847</SnapSettings><SnapExtensions>34</SnapExtensions><SnapAngles/><DynamicGridEnabled>1</DynamicGridEnabled><ProtectStyles>0</ProtectStyles><ProtectShapes>0</ProtectShapes><ProtectMasters>0</ProtectMasters><ProtectBkgnds>0</ProtectBkgnds></DocumentSettings><Colors><ColorEntry IX='24' RGB='#000000'/><ColorEntry IX='25' RGB='#FFFFFF'/><ColorEntry IX='26' RGB='#FF0000'/><ColorEntry IX='27' RGB='#00FF00'/><ColorEntry IX='28' RGB='#0000FF'/><ColorEntry IX='29' RGB='#FFFF00'/><ColorEntry IX='30' RGB='#FF00FF'/><ColorEntry IX='31' RGB='#00FFFF'/><ColorEntry IX='32' RGB='#800000'/><ColorEntry IX='33' RGB='#008000'/><ColorEntry IX='34' RGB='#000080'/><ColorEntry IX='35' RGB='#808000'/><ColorEntry IX='36' RGB='#800080'/><ColorEntry IX='37' RGB='#008080'/><ColorEntry IX='38' RGB='#C0C0C0'/><ColorEntry IX='39' RGB='#E6E6E6'/><ColorEntry IX='40' RGB='#CDCDCD'/><ColorEntry IX='41' RGB='#B3B3B3'/><ColorEntry IX='42' RGB='#9A9A9A'/><ColorEntry IX='43' RGB='#808080'/><ColorEntry IX='44' RGB='#666666'/><ColorEntry IX='45' RGB='#4D4D4D'/><ColorEntry IX='46' RGB='#333333'/><ColorEntry IX='47' RGB='#1A1A1A'/><ColorEntry IX='48' RGB='#7F7F7F'/><ColorEntry IX='49' RGB='#99004D'/><ColorEntry IX='50' RGB='#FF0080'/><ColorEntry IX='51' RGB='#CC0066'/></Colors><FaceNames><FaceName NameU='Calibri' UnicodeRanges='-536859905 -1073732485 9 0' CharSets='536871423 0' Panose='2 15 5 2 2 2 4 3 2 4' Flags='325'/></FaceNames><StyleSheets><StyleSheet ID='0' NameU='No Style' IsCustomNameU='1' Name='No Style' IsCustomName='1'><Cell N='EnableLineProps' V='1'/><Cell N='EnableFillProps' V='1'/><Cell N='EnableTextProps' V='1'/><Cell N='HideForApply' V='0'/><Cell N='LineWeight' V='0.01041666666666667'/><Cell N='LineColor' V='0'/><Cell N='LinePattern' V='1'/><Cell N='Rounding' V='0'/><Cell N='EndArrowSize' V='2'/><Cell N='BeginArrow' V='0'/><Cell N='EndArrow' V='0'/><Cell N='LineCap' V='0'/><Cell N='BeginArrowSize' V='2'/><Cell N='LineColorTrans' V='0'/><Cell N='CompoundType' V='0'/><Cell N='FillForegnd' V='1'/><Cell N='FillBkgnd' V='0'/><Cell N='FillPattern' V='1'/><Cell N='ShdwForegnd' V='0'/><Cell N='ShdwPattern' V='0'/><Cell N='FillForegndTrans' V='0'/><Cell N='FillBkgndTrans' V='0'/><Cell N='ShdwForegndTrans' V='0'/><Cell N='ShapeShdwType' V='0'/><Cell N='ShapeShdwOffsetX' V='0'/><Cell N='ShapeShdwOffsetY' V='0'/><Cell N='ShapeShdwObliqueAngle' V='0'/><Cell N='ShapeShdwScaleFactor' V='1'/><Cell N='ShapeShdwBlur' V='0'/><Cell N='ShapeShdwShow' V='0'/><Cell N='LeftMargin' V='0'/><Cell N='RightMargin' V='0'/><Cell N='TopMargin' V='0'/><Cell N='BottomMargin' V='0'/><Cell N='VerticalAlign' V='1'/><Cell N='TextBkgnd' V='0'/><Cell N='DefaultTabStop' V='0.5'/><Cell N='TextDirection' V='0'/><Cell N='TextBkgndTrans' V='0'/><Cell N='LockWidth' V='0'/><Cell N='LockHeight' V='0'/><Cell N='LockMoveX' V='0'/><Cell N='LockMoveY' V='0'/><Cell N='LockAspect' V='0'/><Cell N='LockDelete' V='0'/><Cell N='LockBegin' V='0'/><Cell N='LockEnd' V='0'/><Cell N='LockRotate' V='0'/><Cell N='LockCrop' V='0'/><Cell N='LockVtxEdit' V='0'/><Cell N='LockTextEdit' V='0'/><Cell N='LockFormat' V='0'/><Cell N='LockGroup' V='0'/><Cell N='LockCalcWH' V='0'/><Cell N='LockSelect' V='0'/><Cell N='LockCustProp' V='0'/><Cell N='LockFromGroupFormat' V='0'/><Cell N='LockThemeColors' V='0'/><Cell N='LockThemeEffects' V='0'/><Cell N='LockThemeConnectors' V='0'/><Cell N='LockThemeFonts' V='0'/><Cell N='LockThemeIndex' V='0'/><Cell N='LockReplace' V='0'/><Cell N='LockVariation' V='0'/><Cell N='NoObjHandles' V='0'/><Cell N='NonPrinting' V='0'/><Cell N='NoCtlHandles' V='0'/><Cell N='NoAlignBox' V='0'/><Cell N='UpdateAlignBox' V='0'/><Cell N='HideText' V='0'/><Cell N='DynFeedback' V='0'/><Cell N='GlueType' V='0'/><Cell N='WalkPreference' V='0'/><Cell N='BegTrigger' V='0' F='No Formula'/><Cell N='EndTrigger' V='0' F='No Formula'/><Cell N='ObjType' V='0'/><Cell N='Comment' V=''/><Cell N='IsDropSource' V='0'/><Cell N='NoLiveDynamics' V='0'/><Cell N='LocalizeMerge' V='0'/><Cell N='NoProofing' V='0'/><Cell N='Calendar' V='0'/><Cell N='LangID' V='en-US'/><Cell N='ShapeKeywords' V=''/><Cell N='DropOnPageScale' V='1'/><Cell N='TheData' V='0' F='No Formula'/><Cell N='TheText' V='0' F='No Formula'/><Cell N='EventDblClick' V='0' F='No Formula'/><Cell N='EventXFMod' V='0' F='No Formula'/><Cell N='EventDrop' V='0' F='No Formula'/><Cell N='EventMultiDrop' V='0' F='No Formula'/><Cell N='HelpTopic' V=''/><Cell N='Copyright' V=''/><Cell N='LayerMember' V=''/><Cell N='XRulerDensity' V='32'/><Cell N='YRulerDensity' V='32'/><Cell N='XRulerOrigin' V='0'/><Cell N='YRulerOrigin' V='0'/><Cell N='XGridDensity' V='8'/><Cell N='YGridDensity' V='8'/><Cell N='XGridSpacing' V='0'/><Cell N='YGridSpacing' V='0'/><Cell N='XGridOrigin' V='0'/><Cell N='YGridOrigin' V='0'/><Cell N='Gamma' V='1'/><Cell N='Contrast' V='0.5'/><Cell N='Brightness' V='0.5'/><Cell N='Sharpen' V='0'/><Cell N='Blur' V='0'/><Cell N='Denoise' V='0'/><Cell N='Transparency' V='0'/><Cell N='SelectMode' V='1'/><Cell N='DisplayMode' V='2'/><Cell N='IsDropTarget' V='0'/><Cell N='IsSnapTarget' V='1'/><Cell N='IsTextEditTarget' V='1'/><Cell N='DontMoveChildren' V='0'/><Cell N='ShapePermeableX' V='0'/><Cell N='ShapePermeableY' V='0'/><Cell N='ShapePermeablePlace' V='0'/><Cell N='Relationships' V='0'/><Cell N='ShapeFixedCode' V='0'/><Cell N='ShapePlowCode' V='0'/><Cell N='ShapeRouteStyle' V='0'/><Cell N='ShapePlaceStyle' V='0'/><Cell N='ConFixedCode' V='0'/><Cell N='ConLineJumpCode' V='0'/><Cell N='ConLineJumpStyle' V='0'/><Cell N='ConLineJumpDirX' V='0'/><Cell N='ConLineJumpDirY' V='0'/><Cell N='ShapePlaceFlip' V='0'/><Cell N='ConLineRouteExt' V='0'/><Cell N='ShapeSplit' V='0'/><Cell N='ShapeSplittable' V='0'/><Cell N='DisplayLevel' V='0'/><Cell N='ResizePage' V='0'/><Cell N='EnableGrid' V='0'/><Cell N='DynamicsOff' V='0'/><Cell N='CtrlAsInput' V='0'/><Cell N='AvoidPageBreaks' V='0'/><Cell N='PlaceStyle' V='0'/><Cell N='RouteStyle' V='0'/><Cell N='PlaceDepth' V='0'/><Cell N='PlowCode' V='0'/><Cell N='LineJumpCode' V='1'/><Cell N='LineJumpStyle' V='0'/><Cell N='PageLineJumpDirX' V='0'/><Cell N='PageLineJumpDirY' V='0'/><Cell N='LineToNodeX' V='0.125'/><Cell N='LineToNodeY' V='0.125'/><Cell N='BlockSizeX' V='0.25'/><Cell N='BlockSizeY' V='0.25'/><Cell N='AvenueSizeX' V='0.375'/><Cell N='AvenueSizeY' V='0.375'/><Cell N='LineToLineX' V='0.125'/><Cell N='LineToLineY' V='0.125'/><Cell N='LineJumpFactorX' V='0.66666666666667'/><Cell N='LineJumpFactorY' V='0.66666666666667'/><Cell N='LineAdjustFrom' V='0'/><Cell N='LineAdjustTo' V='0'/><Cell N='PlaceFlip' V='0'/><Cell N='LineRouteExt' V='0'/><Cell N='PageShapeSplit' V='0'/><Cell N='PageLeftMargin' V='0.25'/><Cell N='PageRightMargin' V='0.25'/><Cell N='PageTopMargin' V='0.25'/><Cell N='PageBottomMargin' V='0.25'/><Cell N='ScaleX' V='1'/><Cell N='ScaleY' V='1'/><Cell N='PagesX' V='1'/><Cell N='PagesY' V='1'/><Cell N='CenterX' V='0'/><Cell N='CenterY' V='0'/><Cell N='OnPage' V='0'/><Cell N='PrintGrid' V='0'/><Cell N='PrintPageOrientation' V='1'/><Cell N='PaperKind' V='1'/><Cell N='PaperSource' V='7'/><Cell N='QuickStyleLineColor' V='100'/><Cell N='QuickStyleFillColor' V='100'/><Cell N='QuickStyleShadowColor' V='100'/><Cell N='QuickStyleFontColor' V='100'/><Cell N='QuickStyleLineMatrix' V='100'/><Cell N='QuickStyleFillMatrix' V='100'/><Cell N='QuickStyleEffectsMatrix' V='100'/><Cell N='QuickStyleFontMatrix' V='100'/><Cell N='QuickStyleType' V='0'/><Cell N='QuickStyleVariation' V='0'/><Cell N='LineGradientDir' V='0'/><Cell N='LineGradientAngle' V='1.5707963267949'/><Cell N='FillGradientDir' V='0'/><Cell N='FillGradientAngle' V='1.5707963267949'/><Cell N='LineGradientEnabled' V='0'/><Cell N='FillGradientEnabled' V='0'/><Cell N='RotateGradientWithShape' V='1'/><Cell N='UseGroupGradient' V='0'/><Cell N='BevelTopType' V='0'/><Cell N='BevelTopWidth' V='0'/><Cell N='BevelTopHeight' V='0'/><Cell N='BevelBottomType' V='0'/><Cell N='BevelBottomWidth' V='0'/><Cell N='BevelBottomHeight' V='0'/><Cell N='BevelDepthColor' V='1'/><Cell N='BevelDepthSize' V='0'/><Cell N='BevelContourColor' V='0'/><Cell N='BevelContourSize' V='0'/><Cell N='BevelMaterialType' V='0'/><Cell N='BevelLightingType' V='0'/><Cell N='BevelLightingAngle' V='0'/><Cell N='RotationXAngle' V='0'/><Cell N='RotationYAngle' V='0'/><Cell N='RotationZAngle' V='0'/><Cell N='RotationType' V='0'/><Cell N='Perspective' V='0'/><Cell N='DistanceFromGround' V='0'/><Cell N='KeepTextFlat' V='0'/><Cell N='ReflectionTrans' V='0'/><Cell N='ReflectionSize' V='0'/><Cell N='ReflectionDist' V='0'/><Cell N='ReflectionBlur' V='0'/><Cell N='GlowColor' V='1'/><Cell N='GlowColorTrans' V='0'/><Cell N='GlowSize' V='0'/><Cell N='SoftEdgesSize' V='0'/><Cell N='SketchSeed' V='0'/><Cell N='SketchEnabled' V='0'/><Cell N='SketchAmount' V='5'/><Cell N='SketchLineWeight' V='0.04166666666666666' U='PT'/><Cell N='SketchLineChange' V='0.14'/><Cell N='SketchFillChange' V='0.1'/><Cell N='ColorSchemeIndex' V='0'/><Cell N='EffectSchemeIndex' V='0'/><Cell N='ConnectorSchemeIndex' V='0'/><Cell N='FontSchemeIndex' V='0'/><Cell N='ThemeIndex' V='0'/><Cell N='VariationColorIndex' V='0'/><Cell N='VariationStyleIndex' V='0'/><Cell N='EmbellishmentIndex' V='0'/><Cell N='ReplaceLockShapeData' V='0'/><Cell N='ReplaceLockText' V='0'/><Cell N='ReplaceLockFormat' V='0'/><Cell N='ReplaceCopyCells' V='0' U='BOOL' F='No Formula'/><Cell N='PageWidth' V='0' F='No Formula'/><Cell N='PageHeight' V='0' F='No Formula'/><Cell N='ShdwOffsetX' V='0' F='No Formula'/><Cell N='ShdwOffsetY' V='0' F='No Formula'/><Cell N='PageScale' V='0' U='IN_F' F='No Formula'/><Cell N='DrawingScale' V='0' U='IN_F' F='No Formula'/><Cell N='DrawingSizeType' V='0' F='No Formula'/><Cell N='DrawingScaleType' V='0' F='No Formula'/><Cell N='InhibitSnap' V='0' F='No Formula'/><Cell N='PageLockReplace' V='0' U='BOOL' F='No Formula'/><Cell N='PageLockDuplicate' V='0' U='BOOL' F='No Formula'/><Cell N='UIVisibility' V='0' F='No Formula'/><Cell N='ShdwType' V='0' F='No Formula'/><Cell N='ShdwObliqueAngle' V='0' F='No Formula'/><Cell N='ShdwScaleFactor' V='0' F='No Formula'/><Cell N='DrawingResizeType' V='0' F='No Formula'/><Section N='Character'><Row IX='0'><Cell N='Font' V='Calibri'/><Cell N='Color' V='0'/><Cell N='Style' V='0'/><Cell N='Case' V='0'/><Cell N='Pos' V='0'/><Cell N='FontScale' V='1'/><Cell N='Size' V='0.1666666666666667'/><Cell N='DblUnderline' V='0'/><Cell N='Overline' V='0'/><Cell N='Strikethru' V='0'/><Cell N='DoubleStrikethrough' V='0'/><Cell N='Letterspace' V='0'/><Cell N='ColorTrans' V='0'/><Cell N='AsianFont' V='0'/><Cell N='ComplexScriptFont' V='0'/><Cell N='ComplexScriptSize' V='-1'/><Cell N='LangID' V='en-US'/></Row></Section><Section N='Paragraph'><Row IX='0'><Cell N='IndFirst' V='0'/><Cell N='IndLeft' V='0'/><Cell N='IndRight' V='0'/><Cell N='SpLine' V='-1.2'/><Cell N='SpBefore' V='0'/><Cell N='SpAfter' V='0'/><Cell N='HorzAlign' V='1'/><Cell N='Bullet' V='0'/><Cell N='BulletStr' V=''/><Cell N='BulletFont' V='0'/><Cell N='BulletFontSize' V='-1'/><Cell N='TextPosAfterBullet' V='0'/><Cell N='Flags' V='0'/></Row></Section><Section N='Tabs'><Row IX='0'/></Section><Section N='LineGradient'><Row IX='0'><Cell N='GradientStopColor' V='1'/><Cell N='GradientStopColorTrans' V='0'/><Cell N='GradientStopPosition' V='0'/></Row></Section><Section N='FillGradient'><Row IX='0'><Cell N='GradientStopColor' V='1'/><Cell N='GradientStopColorTrans' V='0'/><Cell N='GradientStopPosition' V='0'/></Row></Section></StyleSheet><StyleSheet ID='1' NameU='Text Only' IsCustomNameU='1' Name='Text Only' IsCustomName='1' LineStyle='3' FillStyle='3' TextStyle='3'><Cell N='EnableLineProps' V='1'/><Cell N='EnableFillProps' V='1'/><Cell N='EnableTextProps' V='1'/><Cell N='HideForApply' V='0'/><Cell N='LineWeight' V='Themed' F='Inh'/><Cell N='LineColor' V='Themed' F='Inh'/><Cell N='LinePattern' V='Themed' F='Inh'/><Cell N='Rounding' V='Themed' F='Inh'/><Cell N='EndArrowSize' V='2' F='Inh'/><Cell N='BeginArrow' V='0' F='Inh'/><Cell N='EndArrow' V='0' F='Inh'/><Cell N='LineCap' V='Themed' F='Inh'/><Cell N='BeginArrowSize' V='2' F='Inh'/><Cell N='LineColorTrans' V='Themed' F='Inh'/><Cell N='CompoundType' V='Themed' F='Inh'/><Cell N='FillForegnd' V='Themed' F='Inh'/><Cell N='FillBkgnd' V='Themed' F='Inh'/><Cell N='FillPattern' V='Themed' F='Inh'/><Cell N='ShdwForegnd' V='Themed' F='Inh'/><Cell N='ShdwPattern' V='Themed' F='Inh'/><Cell N='FillForegndTrans' V='Themed' F='Inh'/><Cell N='FillBkgndTrans' V='Themed' F='Inh'/><Cell N='ShdwForegndTrans' V='Themed' F='Inh'/><Cell N='ShapeShdwType' V='Themed' F='Inh'/><Cell N='ShapeShdwOffsetX' V='Themed' F='Inh'/><Cell N='ShapeShdwOffsetY' V='Themed' F='Inh'/><Cell N='ShapeShdwObliqueAngle' V='Themed' F='Inh'/><Cell N='ShapeShdwScaleFactor' V='Themed' F='Inh'/><Cell N='ShapeShdwBlur' V='Themed' F='Inh'/><Cell N='ShapeShdwShow' V='0' F='Inh'/><Cell N='LeftMargin' V='0'/><Cell N='RightMargin' V='0'/><Cell N='TopMargin' V='0'/><Cell N='BottomMargin' V='0'/><Cell N='VerticalAlign' V='0'/><Cell N='TextBkgnd' V='0'/><Cell N='DefaultTabStop' V='0.5' F='Inh'/><Cell N='TextDirection' V='0' F='Inh'/><Cell N='TextBkgndTrans' V='0' F='Inh'/><Cell N='LineGradientDir' V='Themed' F='Inh'/><Cell N='LineGradientAngle' V='Themed' F='Inh'/><Cell N='FillGradientDir' V='Themed' F='Inh'/><Cell N='FillGradientAngle' V='Themed' F='Inh'/><Cell N='LineGradientEnabled' V='Themed' F='Inh'/><Cell N='FillGradientEnabled' V='Themed' F='Inh'/><Cell N='RotateGradientWithShape' V='Themed' F='Inh'/><Cell N='UseGroupGradient' V='Themed' F='Inh'/><Section N='Paragraph'><Row IX='0'><Cell N='IndFirst' V='0' F='Inh'/><Cell N='IndLeft' V='0' F='Inh'/><Cell N='IndRight' V='0' F='Inh'/><Cell N='SpLine' V='-1.2' F='Inh'/><Cell N='SpBefore' V='0' F='Inh'/><Cell N='SpAfter' V='0' F='Inh'/><Cell N='HorzAlign' V='0'/><Cell N='Bullet' V='0' F='Inh'/><Cell N='BulletStr' V='' F='Inh'/><Cell N='BulletFont' V='0' F='Inh'/><Cell N='BulletFontSize' V='-1' F='Inh'/><Cell N='TextPosAfterBullet' V='0' F='Inh'/><Cell N='Flags' V='0' F='Inh'/></Row></Section></StyleSheet><StyleSheet ID='2' NameU='None' IsCustomNameU='1' Name='None' IsCustomName='1' LineStyle='3' FillStyle='3' TextStyle='3'><Cell N='EnableLineProps' V='1'/><Cell N='EnableFillProps' V='1'/><Cell N='EnableTextProps' V='1'/><Cell N='HideForApply' V='0'/><Cell N='LineWeight' V='Themed' F='Inh'/><Cell N='LineColor' V='Themed' F='Inh'/><Cell N='LinePattern' V='0'/><Cell N='Rounding' V='Themed' F='Inh'/><Cell N='EndArrowSize' V='2' F='Inh'/><Cell N='BeginArrow' V='0' F='Inh'/><Cell N='EndArrow' V='0' F='Inh'/><Cell N='LineCap' V='Themed' F='Inh'/><Cell N='BeginArrowSize' V='2' F='Inh'/><Cell N='LineColorTrans' V='Themed' F='Inh'/><Cell N='CompoundType' V='Themed' F='Inh'/><Cell N='FillForegnd' V='Themed' F='Inh'/><Cell N='FillBkgnd' V='Themed' F='Inh'/><Cell N='FillPattern' V='0'/><Cell N='ShdwForegnd' V='Themed' F='Inh'/><Cell N='ShdwPattern' V='Themed' F='Inh'/><Cell N='FillForegndTrans' V='Themed' F='Inh'/><Cell N='FillBkgndTrans' V='Themed' F='Inh'/><Cell N='ShdwForegndTrans' V='Themed' F='Inh'/><Cell N='ShapeShdwType' V='Themed' F='Inh'/><Cell N='ShapeShdwOffsetX' V='Themed' F='Inh'/><Cell N='ShapeShdwOffsetY' V='Themed' F='Inh'/><Cell N='ShapeShdwObliqueAngle' V='Themed' F='Inh'/><Cell N='ShapeShdwScaleFactor' V='Themed' F='Inh'/><Cell N='ShapeShdwBlur' V='Themed' F='Inh'/><Cell N='ShapeShdwShow' V='0' F='Inh'/><Cell N='LineGradientDir' V='Themed' F='Inh'/><Cell N='LineGradientAngle' V='Themed' F='Inh'/><Cell N='FillGradientDir' V='Themed' F='Inh'/><Cell N='FillGradientAngle' V='Themed' F='Inh'/><Cell N='LineGradientEnabled' V='0'/><Cell N='FillGradientEnabled' V='0'/><Cell N='RotateGradientWithShape' V='Themed' F='Inh'/><Cell N='UseGroupGradient' V='Themed' F='Inh'/><Cell N='QuickStyleLineColor' V='100' F='Inh'/><Cell N='QuickStyleFillColor' V='100' F='Inh'/><Cell N='QuickStyleShadowColor' V='100' F='Inh'/><Cell N='QuickStyleFontColor' V='100' F='Inh'/><Cell N='QuickStyleLineMatrix' V='100' F='Inh'/><Cell N='QuickStyleFillMatrix' V='100' F='Inh'/><Cell N='QuickStyleEffectsMatrix' V='0' F='GUARD(0)'/><Cell N='QuickStyleFontMatrix' V='100' F='Inh'/><Cell N='QuickStyleType' V='0' F='Inh'/><Cell N='QuickStyleVariation' V='2'/></StyleSheet><StyleSheet ID='3' NameU='Normal' IsCustomNameU='1' Name='Normal' IsCustomName='1' LineStyle='6' FillStyle='6' TextStyle='6'><Cell N='EnableLineProps' V='1'/><Cell N='EnableFillProps' V='1'/><Cell N='EnableTextProps' V='1'/><Cell N='HideForApply' V='0'/><Cell N='LeftMargin' V='0.05555555555555555' U='PT'/><Cell N='RightMargin' V='0.05555555555555555' U='PT'/><Cell N='TopMargin' V='0.05555555555555555' U='PT'/><Cell N='BottomMargin' V='0.05555555555555555' U='PT'/><Cell N='VerticalAlign' V='1' F='Inh'/><Cell N='TextBkgnd' V='0' F='Inh'/><Cell N='DefaultTabStop' V='0.5' F='Inh'/><Cell N='TextDirection' V='0' F='Inh'/><Cell N='TextBkgndTrans' V='0' F='Inh'/></StyleSheet><StyleSheet ID='4' NameU='Guide' IsCustomNameU='1' Name='Guide' IsCustomName='1' LineStyle='3' FillStyle='3' TextStyle='3'><Cell N='EnableLineProps' V='1'/><Cell N='EnableFillProps' V='1'/><Cell N='EnableTextProps' V='1'/><Cell N='HideForApply' V='0'/><Cell N='LineWeight' V='0' U='PT'/><Cell N='LineColor' V='#7f7f7f'/><Cell N='LinePattern' V='23'/><Cell N='Rounding' V='Themed' F='Inh'/><Cell N='EndArrowSize' V='2' F='Inh'/><Cell N='BeginArrow' V='0' F='Inh'/><Cell N='EndArrow' V='0' F='Inh'/><Cell N='LineCap' V='Themed' F='Inh'/><Cell N='BeginArrowSize' V='2' F='Inh'/><Cell N='LineColorTrans' V='Themed' F='Inh'/><Cell N='CompoundType' V='Themed' F='Inh'/><Cell N='FillForegnd' V='Themed' F='Inh'/><Cell N='FillBkgnd' V='Themed' F='Inh'/><Cell N='FillPattern' V='0'/><Cell N='ShdwForegnd' V='Themed' F='Inh'/><Cell N='ShdwPattern' V='Themed' F='Inh'/><Cell N='FillForegndTrans' V='Themed' F='Inh'/><Cell N='FillBkgndTrans' V='Themed' F='Inh'/><Cell N='ShdwForegndTrans' V='Themed' F='Inh'/><Cell N='ShapeShdwType' V='Themed' F='Inh'/><Cell N='ShapeShdwOffsetX' V='Themed' F='Inh'/><Cell N='ShapeShdwOffsetY' V='Themed' F='Inh'/><Cell N='ShapeShdwObliqueAngle' V='Themed' F='Inh'/><Cell N='ShapeShdwScaleFactor' V='Themed' F='Inh'/><Cell N='ShapeShdwBlur' V='Themed' F='Inh'/><Cell N='ShapeShdwShow' V='0' F='Inh'/><Cell N='LineGradientDir' V='Themed' F='Inh'/><Cell N='LineGradientAngle' V='Themed' F='Inh'/><Cell N='FillGradientDir' V='Themed' F='Inh'/><Cell N='FillGradientAngle' V='Themed' F='Inh'/><Cell N='LineGradientEnabled' V='0'/><Cell N='FillGradientEnabled' V='0'/><Cell N='RotateGradientWithShape' V='Themed' F='Inh'/><Cell N='UseGroupGradient' V='Themed' F='Inh'/><Cell N='LeftMargin' V='0.05555555555555555' U='PT' F='Inh'/><Cell N='RightMargin' V='0.05555555555555555' U='PT' F='Inh'/><Cell N='TopMargin' V='0'/><Cell N='BottomMargin' V='0'/><Cell N='VerticalAlign' V='2'/><Cell N='TextBkgnd' V='0' F='Inh'/><Cell N='DefaultTabStop' V='0.5' F='Inh'/><Cell N='TextDirection' V='0' F='Inh'/><Cell N='TextBkgndTrans' V='0' F='Inh'/><Cell N='NoObjHandles' V='0' F='Inh'/><Cell N='NonPrinting' V='1'/><Cell N='NoCtlHandles' V='0' F='Inh'/><Cell N='NoAlignBox' V='0' F='Inh'/><Cell N='UpdateAlignBox' V='0' F='Inh'/><Cell N='HideText' V='0' F='Inh'/><Cell N='DynFeedback' V='0' F='Inh'/><Cell N='GlueType' V='0' F='Inh'/><Cell N='WalkPreference' V='0' F='Inh'/><Cell N='BegTrigger' V='0' F='No Formula'/><Cell N='EndTrigger' V='0' F='No Formula'/><Cell N='ObjType' V='0' F='Inh'/><Cell N='Comment' V='' F='Inh'/><Cell N='IsDropSource' V='0' F='Inh'/><Cell N='NoLiveDynamics' V='0' F='Inh'/><Cell N='LocalizeMerge' V='0' F='Inh'/><Cell N='NoProofing' V='0' F='Inh'/><Cell N='Calendar' V='0' F='Inh'/><Cell N='LangID' V='en-US' F='Inh'/><Cell N='ShapeKeywords' V='' F='Inh'/><Cell N='DropOnPageScale' V='1' F='Inh'/><Cell N='ShapePermeableX' V='1'/><Cell N='ShapePermeableY' V='1'/><Cell N='ShapePermeablePlace' V='1'/><Cell N='Relationships' V='0' F='Inh'/><Cell N='ShapeFixedCode' V='0' F='Inh'/><Cell N='ShapePlowCode' V='0' F='Inh'/><Cell N='ShapeRouteStyle' V='0' F='Inh'/><Cell N='ShapePlaceStyle' V='0' F='Inh'/><Cell N='ConFixedCode' V='0' F='Inh'/><Cell N='ConLineJumpCode' V='0' F='Inh'/><Cell N='ConLineJumpStyle' V='0' F='Inh'/><Cell N='ConLineJumpDirX' V='0' F='Inh'/><Cell N='ConLineJumpDirY' V='0' F='Inh'/><Cell N='ShapePlaceFlip' V='0' F='Inh'/><Cell N='ConLineRouteExt' V='0' F='Inh'/><Cell N='ShapeSplit' V='0' F='Inh'/><Cell N='ShapeSplittable' V='0' F='Inh'/><Cell N='DisplayLevel' V='0' F='Inh'/><Section N='Character'><Row IX='0'><Cell N='Font' V='Themed' F='Inh'/><Cell N='Color' V='4'/><Cell N='Style' V='Themed' F='Inh'/><Cell N='Case' V='0' F='Inh'/><Cell N='Pos' V='0' F='Inh'/><Cell N='FontScale' V='1' F='Inh'/><Cell N='Size' V='0.125'/><Cell N='DblUnderline' V='0' F='Inh'/><Cell N='Overline' V='0' F='Inh'/><Cell N='Strikethru' V='0' F='Inh'/><Cell N='DoubleStrikethrough' V='0' F='Inh'/><Cell N='Letterspace' V='0' F='Inh'/><Cell N='ColorTrans' V='0' F='Inh'/><Cell N='AsianFont' V='Themed' F='Inh'/><Cell N='ComplexScriptFont' V='Themed' F='Inh'/><Cell N='ComplexScriptSize' V='-1' F='Inh'/><Cell N='LangID' V='en-US' F='Inh'/></Row></Section></StyleSheet><StyleSheet ID='6' NameU='Theme' IsCustomNameU='1' Name='Theme' IsCustomName='1' LineStyle='0' FillStyle='0' TextStyle='0'><Cell N='EnableLineProps' V='1'/><Cell N='EnableFillProps' V='1'/><Cell N='EnableTextProps' V='1'/><Cell N='HideForApply' V='0'/><Cell N='LineWeight' V='Themed' F='THEMEVAL()'/><Cell N='LineColor' V='Themed' F='THEMEVAL()'/><Cell N='LinePattern' V='Themed' F='THEMEVAL()'/><Cell N='Rounding' V='Themed' F='THEMEVAL()'/><Cell N='EndArrowSize' V='2' F='Inh'/><Cell N='BeginArrow' V='0' F='Inh'/><Cell N='EndArrow' V='0' F='Inh'/><Cell N='LineCap' V='Themed' F='THEMEVAL()'/><Cell N='BeginArrowSize' V='2' F='Inh'/><Cell N='LineColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='CompoundType' V='Themed' F='THEMEVAL()'/><Cell N='FillForegnd' V='Themed' F='THEMEVAL()'/><Cell N='FillBkgnd' V='Themed' F='THEMEVAL()'/><Cell N='FillPattern' V='Themed' F='THEMEVAL()'/><Cell N='ShdwForegnd' V='Themed' F='THEMEVAL()'/><Cell N='ShdwPattern' V='Themed' F='THEMEVAL()'/><Cell N='FillForegndTrans' V='Themed' F='THEMEVAL()'/><Cell N='FillBkgndTrans' V='Themed' F='THEMEVAL()'/><Cell N='ShdwForegndTrans' V='Themed' F='THEMEVAL()'/><Cell N='ShapeShdwType' V='Themed' F='THEMEVAL()'/><Cell N='ShapeShdwOffsetX' V='Themed' F='THEMEVAL()'/><Cell N='ShapeShdwOffsetY' V='Themed' F='THEMEVAL()'/><Cell N='ShapeShdwObliqueAngle' V='Themed' F='THEMEVAL()'/><Cell N='ShapeShdwScaleFactor' V='Themed' F='THEMEVAL()'/><Cell N='ShapeShdwBlur' V='Themed' F='THEMEVAL()'/><Cell N='ShapeShdwShow' V='0' F='Inh'/><Cell N='LineGradientDir' V='Themed' F='THEMEVAL()'/><Cell N='LineGradientAngle' V='Themed' F='THEMEVAL()'/><Cell N='FillGradientDir' V='Themed' F='THEMEVAL()'/><Cell N='FillGradientAngle' V='Themed' F='THEMEVAL()'/><Cell N='LineGradientEnabled' V='Themed' F='THEMEVAL()'/><Cell N='FillGradientEnabled' V='Themed' F='THEMEVAL()'/><Cell N='RotateGradientWithShape' V='Themed' F='THEMEVAL()'/><Cell N='UseGroupGradient' V='Themed' F='THEMEVAL()'/><Cell N='BevelTopType' V='Themed' F='THEMEVAL()'/><Cell N='BevelTopWidth' V='Themed' F='THEMEVAL()'/><Cell N='BevelTopHeight' V='Themed' F='THEMEVAL()'/><Cell N='BevelBottomType' V='0' F='Inh'/><Cell N='BevelBottomWidth' V='0' F='Inh'/><Cell N='BevelBottomHeight' V='0' F='Inh'/><Cell N='BevelDepthColor' V='1' F='Inh'/><Cell N='BevelDepthSize' V='0' F='Inh'/><Cell N='BevelContourColor' V='Themed' F='THEMEVAL()'/><Cell N='BevelContourSize' V='Themed' F='THEMEVAL()'/><Cell N='BevelMaterialType' V='Themed' F='THEMEVAL()'/><Cell N='BevelLightingType' V='Themed' F='THEMEVAL()'/><Cell N='BevelLightingAngle' V='Themed' F='THEMEVAL()'/><Cell N='ReflectionTrans' V='Themed' F='THEMEVAL()'/><Cell N='ReflectionSize' V='Themed' F='THEMEVAL()'/><Cell N='ReflectionDist' V='Themed' F='THEMEVAL()'/><Cell N='ReflectionBlur' V='Themed' F='THEMEVAL()'/><Cell N='GlowColor' V='Themed' F='THEMEVAL()'/><Cell N='GlowColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GlowSize' V='Themed' F='THEMEVAL()'/><Cell N='SoftEdgesSize' V='Themed' F='THEMEVAL()'/><Cell N='SketchSeed' V='0' F='Inh'/><Cell N='SketchEnabled' V='Themed' F='THEMEVAL()'/><Cell N='SketchAmount' V='Themed' F='THEMEVAL()'/><Cell N='SketchLineWeight' V='Themed' F='THEMEVAL()'/><Cell N='SketchLineChange' V='Themed' F='THEMEVAL()'/><Cell N='SketchFillChange' V='Themed' F='THEMEVAL()'/><Cell N='QuickStyleLineColor' V='100'/><Cell N='QuickStyleFillColor' V='100'/><Cell N='QuickStyleShadowColor' V='100'/><Cell N='QuickStyleFontColor' V='100'/><Cell N='QuickStyleLineMatrix' V='100'/><Cell N='QuickStyleFillMatrix' V='100'/><Cell N='QuickStyleEffectsMatrix' V='100'/><Cell N='QuickStyleFontMatrix' V='100'/><Cell N='QuickStyleType' V='0' F='Inh'/><Cell N='QuickStyleVariation' V='0' F='Inh'/><Cell N='ColorSchemeIndex' V='65534'/><Cell N='EffectSchemeIndex' V='65534'/><Cell N='ConnectorSchemeIndex' V='65534'/><Cell N='FontSchemeIndex' V='65534'/><Cell N='ThemeIndex' V='65534'/><Cell N='VariationColorIndex' V='65534'/><Cell N='VariationStyleIndex' V='65534'/><Cell N='EmbellishmentIndex' V='65534'/><Section N='Character'><Row IX='0'><Cell N='Font' V='Themed' F='THEMEVAL()'/><Cell N='Color' V='Themed' F='THEMEVAL()'/><Cell N='Style' V='Themed' F='THEMEVAL()'/><Cell N='Case' V='0' F='Inh'/><Cell N='Pos' V='0' F='Inh'/><Cell N='FontScale' V='1' F='Inh'/><Cell N='Size' V='0.1666666666666667' F='Inh'/><Cell N='DblUnderline' V='0' F='Inh'/><Cell N='Overline' V='0' F='Inh'/><Cell N='Strikethru' V='0' F='Inh'/><Cell N='DoubleStrikethrough' V='0' F='Inh'/><Cell N='Letterspace' V='0' F='Inh'/><Cell N='ColorTrans' V='0' F='Inh'/><Cell N='AsianFont' V='Themed' F='THEMEVAL()'/><Cell N='ComplexScriptFont' V='Themed' F='THEMEVAL()'/><Cell N='ComplexScriptSize' V='-1' F='Inh'/><Cell N='LangID' V='en-US' F='Inh'/></Row></Section><Section N='FillGradient'><Row IX='0'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='1'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='2'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='3'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='4'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='5'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='6'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='7'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='8'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='9'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row></Section><Section N='LineGradient'><Row IX='0'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='1'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='2'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='3'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='4'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='5'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='6'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='7'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='8'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row><Row IX='9'><Cell N='GradientStopColor' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopColorTrans' V='Themed' F='THEMEVAL()'/><Cell N='GradientStopPosition' V='Themed' F='THEMEVAL()'/></Row></Section></StyleSheet><StyleSheet ID='7' NameU='Connector' IsCustomNameU='1' Name='Connector' IsCustomName='1' LineStyle='3' FillStyle='3' TextStyle='3'><Cell N='EnableLineProps' V='1'/><Cell N='EnableFillProps' V='1'/><Cell N='EnableTextProps' V='1'/><Cell N='HideForApply' V='0'/><Cell N='LeftMargin' V='0.05555555555555555' U='PT' F='Inh'/><Cell N='RightMargin' V='0.05555555555555555' U='PT' F='Inh'/><Cell N='TopMargin' V='0.05555555555555555' U='PT' F='Inh'/><Cell N='BottomMargin' V='0.05555555555555555' U='PT' F='Inh'/><Cell N='VerticalAlign' V='1' F='Inh'/><Cell N='TextBkgnd' V='#ffffff' F='THEMEGUARD(THEMEVAL(\"BackgroundColor\")+1)'/><Cell N='DefaultTabStop' V='0.5' F='Inh'/><Cell N='TextDirection' V='0' F='Inh'/><Cell N='TextBkgndTrans' V='0' F='Inh'/><Cell N='NoObjHandles' V='0' F='Inh'/><Cell N='NonPrinting' V='0' F='Inh'/><Cell N='NoCtlHandles' V='0' F='Inh'/><Cell N='NoAlignBox' V='0' F='Inh'/><Cell N='UpdateAlignBox' V='0' F='Inh'/><Cell N='HideText' V='0' F='Inh'/><Cell N='DynFeedback' V='0' F='Inh'/><Cell N='GlueType' V='0' F='Inh'/><Cell N='WalkPreference' V='0' F='Inh'/><Cell N='BegTrigger' V='0' F='No Formula'/><Cell N='EndTrigger' V='0' F='No Formula'/><Cell N='ObjType' V='0' F='Inh'/><Cell N='Comment' V='' F='Inh'/><Cell N='IsDropSource' V='0' F='Inh'/><Cell N='NoLiveDynamics' V='0' F='Inh'/><Cell N='LocalizeMerge' V='0' F='Inh'/><Cell N='NoProofing' V='0' F='Inh'/><Cell N='Calendar' V='0' F='Inh'/><Cell N='LangID' V='en-US' F='Inh'/><Cell N='ShapeKeywords' V='' F='Inh'/><Cell N='DropOnPageScale' V='1' F='Inh'/><Cell N='QuickStyleLineColor' V='100'/><Cell N='QuickStyleFillColor' V='100'/><Cell N='QuickStyleShadowColor' V='100'/><Cell N='QuickStyleFontColor' V='100'/><Cell N='QuickStyleLineMatrix' V='1'/><Cell N='QuickStyleFillMatrix' V='1'/><Cell N='QuickStyleEffectsMatrix' V='1'/><Cell N='QuickStyleFontMatrix' V='1'/><Cell N='QuickStyleType' V='0'/><Cell N='QuickStyleVariation' V='0'/><Cell N='LineWeight' V='Themed' F='Inh'/><Cell N='LineColor' V='Themed' F='Inh'/><Cell N='LinePattern' V='Themed' F='Inh'/><Cell N='Rounding' V='Themed' F='Inh'/><Cell N='EndArrowSize' V='Themed' F='THEMEVAL()'/><Cell N='BeginArrow' V='Themed' F='THEMEVAL()'/><Cell N='EndArrow' V='Themed' F='THEMEVAL()'/><Cell N='LineCap' V='Themed' F='Inh'/><Cell N='BeginArrowSize' V='Themed' F='THEMEVAL()'/><Cell N='LineColorTrans' V='Themed' F='Inh'/><Cell N='CompoundType' V='Themed' F='Inh'/><Section N='Character'><Row IX='0'><Cell N='Font' V='Themed' F='Inh'/><Cell N='Color' V='Themed' F='Inh'/><Cell N='Style' V='Themed' F='Inh'/><Cell N='Case' V='0' F='Inh'/><Cell N='Pos' V='0' F='Inh'/><Cell N='FontScale' V='1' F='Inh'/><Cell N='Size' V='0.1111111111111111'/><Cell N='DblUnderline' V='0' F='Inh'/><Cell N='Overline' V='0' F='Inh'/><Cell N='Strikethru' V='0' F='Inh'/><Cell N='DoubleStrikethrough' V='0' F='Inh'/><Cell N='Letterspace' V='0' F='Inh'/><Cell N='ColorTrans' V='0' F='Inh'/><Cell N='AsianFont' V='Themed' F='Inh'/><Cell N='ComplexScriptFont' V='Themed' F='Inh'/><Cell N='ComplexScriptSize' V='-1' F='Inh'/><Cell N='LangID' V='en-US' F='Inh'/></Row></Section></StyleSheet></StyleSheets><DocumentSheet NameU='TheDoc' IsCustomNameU='1' Name='TheDoc' IsCustomName='1' LineStyle='0' FillStyle='0' TextStyle='0'><Cell N='OutputFormat' V='0'/><Cell N='LockPreview' V='0'/><Cell N='AddMarkup' V='0'/><Cell N='ViewMarkup' V='0'/><Cell N='DocLockReplace' V='0' U='BOOL'/><Cell N='NoCoauth' V='0' U='BOOL'/><Cell N='DocLockDuplicatePage' V='0' U='BOOL'/><Cell N='PreviewQuality' V='0'/><Cell N='PreviewScope' V='0'/><Cell N='DocLangID' V='en-US'/><Section N='User'><Row N='msvNoAutoConnect'><Cell N='Value' V='1'/><Cell N='Prompt' V='' F='No Formula'/></Row></Section></DocumentSheet></VisioDocument>",
            "visio/windows.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Windows ClientWidth='0' ClientHeight='0' xmlns='http://schemas.microsoft.com/office/visio/2012/main' xmlns:r='http://schemas.openxmlformats.org/officeDocument/2006/relationships' xml:space='preserve' />",
            "visio/_rels/document.xml.rels": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns='http://schemas.openxmlformats.org/package/2006/relationships'><Relationship Id='rId1' Type='http://schemas.microsoft.com/visio/2010/relationships/masters' Target='masters/masters.xml' /><Relationship Id='rId2' Type='http://schemas.microsoft.com/visio/2010/relationships/pages' Target='pages/pages.xml' /><Relationship Id='rId3' Type='http://schemas.microsoft.com/visio/2010/relationships/windows' Target='windows.xml' /></Relationships>",
            "visio/masters/_rels/masters.xml.rels": '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.microsoft.com/visio/2010/relationships/master" Target="master1.xml"/></Relationships>',
            "visio/masters/masters.xml": "<?xml version='1.0' encoding='utf-8' ?><Masters xmlns='http://schemas.microsoft.com/office/visio/2012/main' xmlns:r='http://schemas.openxmlformats.org/officeDocument/2006/relationships' xml:space='preserve'><Master ID='4' NameU='Dynamic connector' IsCustomNameU='1' Name='Dynamic connector' IsCustomName='1' Prompt='This connector automatically routes between the shapes it connects.' IconSize='1' AlignName='2' MatchByName='1' IconUpdate='0' UniqueID='{002A9108-0000-0000-8E40-00608CF305B2}' BaseID='{F7290A45-E3AD-11D2-AE4F-006008C9F5A9}' PatternFlags='0' Hidden='0' MasterType='0'><PageSheet LineStyle='0' FillStyle='0' TextStyle='0'><Cell N='PageWidth' V='3'/><Cell N='PageHeight' V='3'/><Cell N='ShdwOffsetX' V='0.125'/><Cell N='ShdwOffsetY' V='-0.125'/><Cell N='PageScale' V='1' U='IN_F'/><Cell N='DrawingScale' V='1' U='IN_F'/><Cell N='DrawingSizeType' V='4'/><Cell N='DrawingScaleType' V='0'/><Cell N='InhibitSnap' V='0'/><Cell N='PageLockReplace' V='0' U='BOOL'/><Cell N='PageLockDuplicate' V='0' U='BOOL'/><Cell N='UIVisibility' V='0'/><Cell N='ShdwType' V='0'/><Cell N='ShdwObliqueAngle' V='0'/><Cell N='ShdwScaleFactor' V='1'/><Cell N='DrawingResizeType' V='0'/><Section N='Layer'><Row IX='0'><Cell N='Name' V='Connector'/><Cell N='Color' V='255'/><Cell N='Status' V='0'/><Cell N='Visible' V='1'/><Cell N='Print' V='1'/><Cell N='Active' V='0'/><Cell N='Lock' V='0'/><Cell N='Snap' V='1'/><Cell N='Glue' V='1'/><Cell N='NameUniv' V='Connector'/><Cell N='ColorTrans' V='0'/></Row></Section></PageSheet><Rel r:id='rId1'/></Master></Masters>",
            "visio/masters/master1.xml": "<?xml version='1.0' encoding='utf-8' ?><MasterContents xmlns='http://schemas.microsoft.com/office/visio/2012/main' xmlns:r='http://schemas.openxmlformats.org/officeDocument/2006/relationships' xml:space='preserve'><Shapes><Shape ID='5' OriginalID='0' Type='Shape' LineStyle='7' FillStyle='7' TextStyle='7'><Cell N='PinX' V='1.5' F='GUARD((BeginX+EndX)/2)'/><Cell N='PinY' V='1.5' F='GUARD((BeginY+EndY)/2)'/><Cell N='Width' V='1' F='GUARD(EndX-BeginX)'/><Cell N='Height' V='-1' F='GUARD(EndY-BeginY)'/><Cell N='LocPinX' V='0.5' F='GUARD(Width*0.5)'/><Cell N='LocPinY' V='-0.5' F='GUARD(Height*0.5)'/><Cell N='Angle' V='0' F='GUARD(0DA)'/><Cell N='FlipX' V='0' F='GUARD(FALSE)'/><Cell N='FlipY' V='0' F='GUARD(FALSE)'/><Cell N='ResizeMode' V='0'/><Cell N='BeginX' V='1'/><Cell N='BeginY' V='2'/><Cell N='EndX' V='2'/><Cell N='EndY' V='1'/><Cell N='TxtPinX' V='0' F='SETATREF(Controls.TextPosition)'/><Cell N='TxtPinY' V='-1' F='SETATREF(Controls.TextPosition.Y)'/><Cell N='TxtWidth' V='0.5555555555555556' F='MAX(TEXTWIDTH(TheText),5*Char.Size)'/><Cell N='TxtHeight' V='0.2444444444444444' F='TEXTHEIGHT(TheText,TxtWidth)'/><Cell N='TxtLocPinX' V='0.2777777777777778' F='TxtWidth*0.5'/><Cell N='TxtLocPinY' V='0.1222222222222222' F='TxtHeight*0.5'/><Cell N='TxtAngle' V='0'/><Cell N='LockHeight' V='1'/><Cell N='LockCalcWH' V='1'/><Cell N='HelpTopic' V='Vis_SE.chm!#20000'/><Cell N='Copyright' V='Copyright 2001 Microsoft Corporation.  All rights reserved.'/><Cell N='NoAlignBox' V='1'/><Cell N='DynFeedback' V='2'/><Cell N='GlueType' V='2'/><Cell N='ObjType' V='2'/><Cell N='NoLiveDynamics' V='1'/><Cell N='ShapeSplittable' V='1'/><Cell N='LayerMember' V='0'/><Section N='Control'><Row N='TextPosition'><Cell N='X' V='0'/><Cell N='Y' V='-1'/><Cell N='XDyn' V='0' F='Controls.TextPosition'/><Cell N='YDyn' V='-1' F='Controls.TextPosition.Y'/><Cell N='XCon' V='5' F='IF(OR(STRSAME(SHAPETEXT(TheText),\"\"),HideText),5,0)'/><Cell N='YCon' V='0'/><Cell N='CanGlue' V='0'/><Cell N='Prompt' V='Reposition Text'/></Row></Section><Section N='Geometry' IX='0'><Cell N='NoFill' V='1'/><Cell N='NoLine' V='0'/><Cell N='NoShow' V='0'/><Cell N='NoSnap' V='0'/><Cell N='NoQuickDrag' V='0'/><Row T='MoveTo' IX='1'><Cell N='X' V='0'/><Cell N='Y' V='0'/></Row><Row T='LineTo' IX='2'><Cell N='X' V='0'/><Cell N='Y' V='-1'/></Row></Section></Shape></Shapes></MasterContents>"
        };
        for (var id in files)
            if (pageCount > 1 && id == that.CONTENT_TYPES_XML) {
                var doc = mxUtils.parseXml(files[id]);
                var root = doc.documentElement;
                var children = root.children;
                var page1 = null;
                for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    if ("/visio/pages/page1.xml" == child.getAttribute(that.PART_NAME))
                        page1 = child
                }
                for (var i = 2; i <= pageCount; i++) {
                    var newPage = page1.cloneNode();
                    newPage.setAttribute(that.PART_NAME, "/visio/pages/page" + i + ".xml");
                    root.appendChild(newPage)
                }
                writeXmlDoc2Zip(zip, id, doc, true)
            } else
                zip.file(id, files[id])
    }
    function createElt(doc, ns, name) {
        return doc.createElementNS != null ? doc.createElementNS(ns, name) : doc.createElement(name)
    }
    function getCellVsdxId(cellId) {
        var vsdxId = idsMap[cellId];
        if (vsdxId == null) {
            vsdxId = idsCounter++;
            idsMap[cellId] = vsdxId
        }
        return vsdxId
    }
    function getGraphAttributes(graph) {
        var attr = {};
        try {
            var bounds = graph.getGraphBounds().clone();
            var sc = graph.view.scale;
            var tr = graph.view.translate;
            var x0 = Math.round(bounds.x / sc) - tr.x;
            var y0 = Math.round(bounds.y / sc) - tr.y;
            var availableWidth = graph.pageFormat.width;
            var availableHeight = graph.pageFormat.height;
            if (x0 < 0)
                x0 += Math.ceil((tr.x - bounds.x / sc) / availableWidth) * availableWidth;
            if (y0 < 0)
                y0 += Math.ceil((tr.y - bounds.y / sc) / availableHeight) * availableHeight;
            var hpages = Math.max(1, Math.ceil((bounds.width / sc + x0) / availableWidth));
            var vpages = Math.max(1, Math.ceil((bounds.height / sc + y0) / availableHeight));
            attr["gridEnabled"] = graph.gridEnabled;
            attr["gridSize"] = graph.gridSize;
            attr["guidesEnabled"] = graph.graphHandler.guidesEnabled;
            attr["pageVisible"] = graph.pageVisible;
            attr["pageScale"] = graph.pageScale;
            attr["pageWidth"] = graph.pageFormat.width * hpages;
            attr["pageHeight"] = graph.pageFormat.height * vpages;
            attr["backgroundClr"] = graph.background;
            attr["mathEnabled"] = graph.mathEnabled;
            attr["shadowVisible"] = graph.shadowVisible
        } catch (e) {}
        return attr
    }
    function createCellElemScaled(name, val, xmlDoc, formula) {
        return createCellElem(name, val / that.CONVERSION_FACTOR, xmlDoc, formula)
    }
    function createCellElem(name, val, xmlDoc, formula) {
        var cell = createElt(xmlDoc, that.XMLNS, "Cell");
        cell.setAttribute("N", name);
        cell.setAttribute("V", val);
        if (formula)
            cell.setAttribute("F", formula);
        return cell
    }
    function createRow(type, index, x, y, xmlDoc) {
        var row = createElt(xmlDoc, that.XMLNS, "Row");
        row.setAttribute("T", type);
        row.setAttribute("IX", index);
        row.appendChild(createCellElemScaled("X", x, xmlDoc));
        row.appendChild(createCellElemScaled("Y", y, xmlDoc));
        return row
    }
    function applyMxCellStyle(state, shape, xmlDoc) {
        var fillClr = state.style[mxConstants.STYLE_FILLCOLOR];
        if (!fillClr || fillClr == "none")
            shape.appendChild(createCellElem("FillPattern", 0, xmlDoc));
        else {
            shape.appendChild(createCellElem("FillForegnd", fillClr, xmlDoc));
            var gradClr = state.style[mxConstants.STYLE_GRADIENTCOLOR];
            if (gradClr && gradClr != "none") {
                shape.appendChild(createCellElem("FillBkgnd", gradClr, xmlDoc));
                var gradDir = state.style[mxConstants.STYLE_GRADIENT_DIRECTION];
                var dir = 28;
                if (gradDir)
                    switch (gradDir) {
                    case mxConstants.DIRECTION_EAST:
                        dir = 25;
                        break;
                    case mxConstants.DIRECTION_WEST:
                        dir = 27;
                        break;
                    case mxConstants.DIRECTION_NORTH:
                        dir = 30;
                        break
                    }
                shape.appendChild(createCellElem("FillPattern", dir, xmlDoc))
            }
        }
        var strokeClr = state.style[mxConstants.STYLE_STROKECOLOR];
        if (!strokeClr || strokeClr == "none")
            shape.appendChild(createCellElem("LinePattern", 0, xmlDoc));
        else
            shape.appendChild(createCellElem("LineColor", strokeClr, xmlDoc));
        var strokeW = state.style[mxConstants.STYLE_STROKEWIDTH];
        if (strokeW)
            shape.appendChild(createCellElemScaled("LineWeight", strokeW, xmlDoc));
        var opacity = state.style[mxConstants.STYLE_OPACITY];
        var fillOpaq;
        var strkOpaq;
        if (opacity) {
            fillOpaq = opacity;
            strkOpaq = opacity
        } else {
            fillOpaq = state.style[mxConstants.STYLE_FILL_OPACITY];
            strkOpaq = state.style[mxConstants.STYLE_STROKE_OPACITY]
        }
        if (fillOpaq)
            shape.appendChild(createCellElem("FillForegndTrans", 1 - parseInt(fillOpaq) / 100, xmlDoc));
        if (strkOpaq)
            shape.appendChild(createCellElem("LineColorTrans", 1 - parseInt(strkOpaq) / 100, xmlDoc));
        var isDashed = state.style[mxConstants.STYLE_DASHED];
        if (isDashed == 1) {
            var dashPatrn = state.style[mxConstants.STYLE_DASH_PATTERN];
            var pattern = 9;
            if (dashPatrn)
                switch (dashPatrn) {
                case "1 1":
                    pattern = 10;
                    break;
                case "1 2":
                    pattern = 3;
                    break;
                case "1 4":
                    pattern = 17;
                    break
                }
            shape.appendChild(createCellElem("LinePattern", pattern, xmlDoc))
        }
        var hasShadow = state.style[mxConstants.STYLE_SHADOW];
        if (hasShadow == 1) {
            shape.appendChild(createCellElem("ShdwPattern", 1, xmlDoc));
            shape.appendChild(createCellElem("ShdwForegnd", "#000000", xmlDoc));
            shape.appendChild(createCellElem("ShdwForegndTrans", .6, xmlDoc));
            shape.appendChild(createCellElem("ShapeShdwType", 1, xmlDoc));
            shape.appendChild(createCellElem("ShapeShdwOffsetX", "0.02946278254943948", xmlDoc));
            shape.appendChild(createCellElem("ShapeShdwOffsetY", "-0.02946278254943948", xmlDoc));
            shape.appendChild(createCellElem("ShapeShdwScaleFactor", "1", xmlDoc));
            shape.appendChild(createCellElem("ShapeShdwBlur", "0.05555555555555555", xmlDoc));
            shape.appendChild(createCellElem("ShapeShdwShow", 2, xmlDoc))
        }
        var flibX = state.style[mxConstants.STYLE_FLIPH];
        if (flibX == 1)
            shape.appendChild(createCellElem("FlipX", 1, xmlDoc));
        var flibY = state.style[mxConstants.STYLE_FLIPV];
        if (flibY == 1)
            shape.appendChild(createCellElem("FlipY", 1, xmlDoc));
        var rounded = state.style[mxConstants.STYLE_ROUNDED];
        if (rounded == 1)
            shape.appendChild(createCellElemScaled("Rounding", state.cell.geometry.width * .1, xmlDoc));
        var lbkgnd = state.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR];
        if (lbkgnd)
            shape.appendChild(createCellElem("TextBkgnd", lbkgnd, xmlDoc))
    }
    function createShape(id, geo, xmlDoc, parentHeight, isChild) {
        var shape = createElt(xmlDoc, that.XMLNS, "Shape");
        shape.setAttribute("ID", id);
        shape.setAttribute("NameU", "Shape" + id);
        shape.setAttribute("LineStyle", "0");
        shape.setAttribute("FillStyle", "0");
        shape.setAttribute("TextStyle", "0");
        var hw = geo.width / 2
          , hh = geo.height / 2;
        shape.appendChild(createCellElemScaled("PinX", geo.x + hw + (isChild ? 0 : vsdxCanvas.shiftX), xmlDoc));
        shape.appendChild(createCellElemScaled("PinY", parentHeight - geo.y - hh - (isChild ? 0 : vsdxCanvas.shiftY), xmlDoc));
        shape.appendChild(createCellElemScaled("Width", geo.width, xmlDoc));
        shape.appendChild(createCellElemScaled("Height", geo.height, xmlDoc));
        shape.appendChild(createCellElemScaled("LocPinX", hw, xmlDoc));
        shape.appendChild(createCellElemScaled("LocPinY", hh, xmlDoc));
        return shape
    }
    function getArrowType(arrow, isFilled) {
        isFilled = isFilled == null ? "1" : isFilled;
        arrow = arrow == null ? "none" : arrow;
        var key = arrow + "|" + isFilled;
        var type = that.ARROWS_MAP[key];
        if (type != null)
            return type;
        else
            return 1
    }
    function getArrowSize(size) {
        if (size == null)
            return 2;
        if (size <= 2)
            return 0;
        else if (size <= 3)
            return 1;
        else if (size <= 5)
            return 2;
        else if (size <= 7)
            return 3;
        else if (size <= 9)
            return 4;
        else if (size <= 22)
            return 5;
        else
            return 6
    }
    function createEdge(cell, graph, xmlDoc, parentHeight, isChild) {
        var state = graph.view.getState(cell, true);
        if (state == null)
            return null;
        var shape = createElt(xmlDoc, that.XMLNS, "Shape");
        var vsdxId = getCellVsdxId(cell.id);
        shape.setAttribute("ID", vsdxId);
        shape.setAttribute("NameU", "Dynamic connector." + vsdxId);
        shape.setAttribute("Name", "Dynamic connector." + vsdxId);
        shape.setAttribute("Type", "Shape");
        shape.setAttribute("Master", "4");
        var s = vsdxCanvas.state;
        var points = state.absolutePoints;
        var bounds = state.cellBounds;
        var hw = bounds.width / 2
          , hh = bounds.height / 2;
        shape.appendChild(createCellElemScaled("PinX", bounds.x + hw, xmlDoc));
        shape.appendChild(createCellElemScaled("PinY", parentHeight - bounds.y - hh, xmlDoc));
        shape.appendChild(createCellElemScaled("Width", bounds.width, xmlDoc));
        shape.appendChild(createCellElemScaled("Height", bounds.height, xmlDoc));
        shape.appendChild(createCellElemScaled("LocPinX", hw, xmlDoc));
        shape.appendChild(createCellElemScaled("LocPinY", hh, xmlDoc));
        vsdxCanvas.newEdge(shape, state, xmlDoc);
        var calcVsdxPoint = function(p, noHeight) {
            var x = p.x
              , y = p.y;
            x = x * s.scale - bounds.x + s.dx + (isChild ? 0 : vsdxCanvas.shiftX);
            y = (noHeight ? 0 : bounds.height) - y * s.scale + bounds.y - s.dy - (isChild ? 0 : vsdxCanvas.shiftY);
            return {
                x: x,
                y: y
            }
        };
        var p0 = calcVsdxPoint(points[0], true);
        shape.appendChild(createCellElemScaled("BeginX", bounds.x + p0.x, xmlDoc, "_WALKGLUE(BegTrigger,EndTrigger,WalkPreference)"));
        shape.appendChild(createCellElemScaled("BeginY", parentHeight - bounds.y + p0.y, xmlDoc, "_WALKGLUE(BegTrigger,EndTrigger,WalkPreference)"));
        var pe = calcVsdxPoint(points[points.length - 1], true);
        shape.appendChild(createCellElemScaled("EndX", bounds.x + pe.x, xmlDoc, "_WALKGLUE(EndTrigger,BegTrigger,WalkPreference)"));
        shape.appendChild(createCellElemScaled("EndY", parentHeight - bounds.y + pe.y, xmlDoc, "_WALKGLUE(EndTrigger,BegTrigger,WalkPreference)"));
        shape.appendChild(createCellElem("BegTrigger", "2", xmlDoc, cell.source ? "_XFTRIGGER(Sheet." + getCellVsdxId(cell.source.id) + "!EventXFMod)" : null));
        shape.appendChild(createCellElem("EndTrigger", "2", xmlDoc, cell.target ? "_XFTRIGGER(Sheet." + getCellVsdxId(cell.target.id) + "!EventXFMod)" : null));
        shape.appendChild(createCellElem("ConFixedCode", "6", xmlDoc));
        shape.appendChild(createCellElem("LayerMember", "0", xmlDoc));
        applyMxCellStyle(state, shape, xmlDoc);
        var startFill = state.style[mxConstants.STYLE_STARTFILL];
        var startArrow = state.style[mxConstants.STYLE_STARTARROW];
        var startSize = state.style[mxConstants.STYLE_STARTSIZE];
        var type = getArrowType(startArrow, startFill);
        shape.appendChild(createCellElem("BeginArrow", type, xmlDoc));
        shape.appendChild(createCellElem("BeginArrowSize", getArrowSize(startSize), xmlDoc));
        var endFill = state.style[mxConstants.STYLE_ENDFILL];
        var endArrow = state.style[mxConstants.STYLE_ENDARROW];
        var endSize = state.style[mxConstants.STYLE_ENDSIZE];
        var type = getArrowType(endArrow, endFill);
        shape.appendChild(createCellElem("EndArrow", type, xmlDoc));
        shape.appendChild(createCellElem("EndArrowSize", getArrowSize(endSize), xmlDoc));
        if (state.text != null && state.text.checkBounds()) {
            vsdxCanvas.save();
            state.text.paint(vsdxCanvas);
            vsdxCanvas.restore()
        }
        var geoSec = createElt(xmlDoc, that.XMLNS, "Section");
        geoSec.setAttribute("N", "Geometry");
        geoSec.setAttribute("IX", "0");
        for (var i = 0; i < points.length; i++) {
            var p = calcVsdxPoint(points[i]);
            geoSec.appendChild(createRow(i == 0 ? "MoveTo" : "LineTo", i + 1, p.x, p.y, xmlDoc))
        }
        geoSec.appendChild(createCellElem("NoFill", "1", xmlDoc));
        geoSec.appendChild(createCellElem("NoLine", "0", xmlDoc));
        shape.appendChild(geoSec);
        return shape
    }
    function convertMxCell2Shape(cell, graph, xmlDoc, parentHeight, parentGeo, isChild) {
        var geo = cell.geometry;
        if (geo != null) {
            if (geo.relative && parentGeo) {
                geo = geo.clone();
                geo.x *= parentGeo.width;
                geo.y *= parentGeo.height;
                geo.relative = 0
            }
            var vsdxId = getCellVsdxId(cell.id);
            if (!cell.treatAsSingle && cell.getChildCount() > 0) {
                var shape = createShape(vsdxId + "10000", geo, xmlDoc, parentHeight, isChild);
                shape.setAttribute("Type", "Group");
                var gShapes = createElt(xmlDoc, that.XMLNS, "Shapes");
                vsdxCanvas.save();
                vsdxCanvas.translate(-geo.x, -geo.y);
                var newGeo = geo.clone();
                newGeo.x = 0;
                newGeo.y = 0;
                cell.setGeometry(newGeo);
                cell.treatAsSingle = true;
                var subShape = convertMxCell2Shape(cell, graph, xmlDoc, geo.height, geo, true);
                cell.treatAsSingle = false;
                cell.setGeometry(geo);
                gShapes.appendChild(subShape);
                for (var i = 0; i < cell.children.length; i++) {
                    var child = cell.children[i];
                    var subShape = convertMxCell2Shape(child, graph, xmlDoc, geo.height, geo, true);
                    gShapes.appendChild(subShape)
                }
                shape.appendChild(gShapes);
                vsdxCanvas.restore();
                return shape
            } else if (cell.vertex) {
                var shape = createShape(vsdxId, geo, xmlDoc, parentHeight, isChild);
                var state = graph.view.getState(cell, true);
                applyMxCellStyle(state, shape, xmlDoc);
                vsdxCanvas.newShape(shape, state, xmlDoc);
                if (state.text != null && state.text.checkBounds()) {
                    vsdxCanvas.save();
                    state.text.paint(vsdxCanvas);
                    vsdxCanvas.restore()
                }
                if (state.shape != null && state.shape.checkBounds()) {
                    vsdxCanvas.save();
                    state.shape.paint(vsdxCanvas);
                    vsdxCanvas.restore()
                }
                shape.appendChild(vsdxCanvas.getShapeGeo());
                vsdxCanvas.endShape();
                shape.setAttribute("Type", vsdxCanvas.getShapeType());
                return shape
            } else
                return createEdge(cell, graph, xmlDoc, parentHeight, isChild)
        } else
            return null
    }
    function convertMxModel2Page(graph, modelAttrib) {
        var xmlDoc = mxUtils.createXmlDocument();
        var root = createElt(xmlDoc, that.XMLNS, "PageContents");
        root.setAttribute("xmlns:r", that.XMLNS_R);
        root.setAttribute("xml:space", that.XML_SPACE);
        var shapes = createElt(xmlDoc, that.XMLNS, "Shapes");
        root.appendChild(shapes);
        var model = graph.model;
        var t = graph.view.translate;
        var s = graph.view.scale;
        var bounds = graph.getGraphBounds();
        vsdxCanvas.shiftX = 0;
        vsdxCanvas.shiftY = 0;
        if (bounds.x / s < t.x || bounds.y / s < t.y) {
            vsdxCanvas.shiftX = Math.ceil((t.x - bounds.x / s) / graph.pageFormat.width) * graph.pageFormat.width;
            vsdxCanvas.shiftY = Math.ceil((t.y - bounds.y / s) / graph.pageFormat.height) * graph.pageFormat.height
        }
        vsdxCanvas.save();
        vsdxCanvas.translate(-t.x, -t.y);
        vsdxCanvas.scale(1 / s);
        vsdxCanvas.newPage();
        var defParent = graph.getDefaultParent();
        for (var id in model.cells) {
            var cell = model.cells[id];
            if (cell.parent == defParent) {
                var shape = convertMxCell2Shape(cell, graph, xmlDoc, modelAttrib.pageHeight);
                if (shape != null)
                    shapes.appendChild(shape)
            }
        }
        var connects = createElt(xmlDoc, that.XMLNS, "Connects");
        root.appendChild(connects);
        for (var id in model.cells) {
            var cell = model.cells[id];
            if (cell.edge) {
                if (cell.source) {
                    var connect = createElt(xmlDoc, that.XMLNS, "Connect");
                    connect.setAttribute("FromSheet", getCellVsdxId(cell.id));
                    connect.setAttribute("FromCell", "BeginX");
                    connect.setAttribute("ToSheet", getCellVsdxId(cell.source.id));
                    connects.appendChild(connect)
                }
                if (cell.target) {
                    var connect = createElt(xmlDoc, that.XMLNS, "Connect");
                    connect.setAttribute("FromSheet", getCellVsdxId(cell.id));
                    connect.setAttribute("FromCell", "EndX");
                    connect.setAttribute("ToSheet", getCellVsdxId(cell.target.id));
                    connects.appendChild(connect)
                }
            }
        }
        xmlDoc.appendChild(root);
        vsdxCanvas.restore();
        return xmlDoc
    }
    function writeXmlDoc2Zip(zip, name, xmlDoc, noHeader) {
        zip.file(name, (noHeader ? "" : '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>') + mxUtils.getXml(xmlDoc))
    }
    function addPagesXML(zip, pages, modelsAttr) {
        var pagesXmlDoc = mxUtils.createXmlDocument();
        var pagesRelsXmlDoc = mxUtils.createXmlDocument();
        var pagesRoot = createElt(pagesXmlDoc, that.XMLNS, "Pages");
        pagesRoot.setAttribute("xmlns:r", that.XMLNS_R);
        pagesRoot.setAttribute("xml:space", that.XML_SPACE);
        var pagesRelsRoot = createElt(pagesRelsXmlDoc, that.RELS_XMLNS, "Relationships");
        var i = 1;
        for (var name in pages) {
            var pageName = "page" + i + ".xml";
            var pageE = createElt(pagesXmlDoc, that.XMLNS, "Page");
            pageE.setAttribute("ID", i - 1);
            pageE.setAttribute("NameU", name);
            pageE.setAttribute("Name", name);
            var pageSheet = createElt(pagesXmlDoc, that.XMLNS, "PageSheet");
            var modelAttr = modelsAttr[name];
            pageSheet.appendChild(createCellElemScaled("PageWidth", modelAttr["pageWidth"], pagesXmlDoc));
            pageSheet.appendChild(createCellElemScaled("PageHeight", modelAttr["pageHeight"], pagesXmlDoc));
            pageSheet.appendChild(createCellElem("PageScale", modelAttr["pageScale"], pagesXmlDoc));
            pageSheet.appendChild(createCellElem("DrawingScale", 1, pagesXmlDoc));
            var relE = createElt(pagesXmlDoc, that.XMLNS, "Rel");
            relE.setAttribute("r:id", "rId" + i);
            var layerSec = createElt(pagesXmlDoc, that.XMLNS, "Section");
            layerSec.setAttribute("N", "Layer");
            var layerRow = createElt(pagesXmlDoc, that.XMLNS, "Row");
            layerRow.setAttribute("IX", "0");
            layerSec.appendChild(layerRow);
            layerRow.appendChild(createCellElem("Name", "Connector", pagesXmlDoc));
            layerRow.appendChild(createCellElem("Color", "255", pagesXmlDoc));
            layerRow.appendChild(createCellElem("Status", "0", pagesXmlDoc));
            layerRow.appendChild(createCellElem("Visible", "1", pagesXmlDoc));
            layerRow.appendChild(createCellElem("Print", "1", pagesXmlDoc));
            layerRow.appendChild(createCellElem("Active", "0", pagesXmlDoc));
            layerRow.appendChild(createCellElem("Lock", "0", pagesXmlDoc));
            layerRow.appendChild(createCellElem("Snap", "1", pagesXmlDoc));
            layerRow.appendChild(createCellElem("Glue", "1", pagesXmlDoc));
            layerRow.appendChild(createCellElem("NameUniv", "Connector", pagesXmlDoc));
            layerRow.appendChild(createCellElem("ColorTrans", "0", pagesXmlDoc));
            pageSheet.appendChild(layerSec);
            pageE.appendChild(pageSheet);
            pageE.appendChild(relE);
            pagesRoot.appendChild(pageE);
            var relationship = createElt(pagesRelsXmlDoc, that.RELS_XMLNS, "Relationship");
            relationship.setAttribute("Id", "rId" + i);
            relationship.setAttribute("Type", that.PAGES_TYPE);
            relationship.setAttribute("Target", pageName);
            pagesRelsRoot.appendChild(relationship);
            var xmlDoc = pages[name];
            writeXmlDoc2Zip(zip, that.VISIO_PAGES + pageName, xmlDoc);
            i++
        }
        pagesXmlDoc.appendChild(pagesRoot);
        pagesRelsXmlDoc.appendChild(pagesRelsRoot);
        writeXmlDoc2Zip(zip, that.VISIO_PAGES + "pages.xml", pagesXmlDoc);
        writeXmlDoc2Zip(zip, that.VISIO_PAGES + "_rels/pages.xml.rels", pagesRelsXmlDoc)
    }
    function addImagesRels(zip, pIndex) {
        var fId = that.VISIO_PAGES_RELS + "page" + pIndex + ".xml.rels";
        var pageRelDoc = mxUtils.createXmlDocument();
        var relationships = createElt(pageRelDoc, that.RELS_XMLNS, "Relationships");
        var relationship = createElt(pageRelDoc, that.RELS_XMLNS, "Relationship");
        relationship.setAttribute("Type", "http://schemas.microsoft.com/visio/2010/relationships/master");
        relationship.setAttribute("Id", "rId1");
        relationship.setAttribute("Target", "../masters/master1.xml");
        relationships.appendChild(relationship);
        var imgs = vsdxCanvas.images;
        if (imgs.length > 0)
            for (var i = 0; i < imgs.length; i++) {
                var relationship = createElt(pageRelDoc, that.RELS_XMLNS, "Relationship");
                relationship.setAttribute("Type", that.XMLNS_R + "/image");
                relationship.setAttribute("Id", "rId" + (i + 2));
                relationship.setAttribute("Target", "../media/" + imgs[i]);
                relationships.appendChild(relationship)
            }
        pageRelDoc.appendChild(relationships);
        writeXmlDoc2Zip(zip, fId, pageRelDoc)
    }
    this.exportCurrentDiagrams = function() {
        try {
            if (editorUi.spinner.spin(document.body, mxResources.get("exporting"))) {
                var zip = new JSZip;
                vsdxCanvas.init(zip);
                idsMap = {};
                idsCounter = 1;
                var pages = {};
                var modelsAttr = {};
                var pagesCount = editorUi.pages != null ? editorUi.pages.length : 1;
                if (editorUi.pages != null) {
                    var selectedCells = editorUi.editor.graph.getSelectionCells();
                    var currentPage = editorUi.currentPage;
                    for (var i = 0; i < editorUi.pages.length; i++) {
                        var page = editorUi.pages[i];
                        if (editorUi.currentPage != page)
                            editorUi.selectPage(page, true);
                        var diagramName = page.getName();
                        var graph = editorUi.editor.graph;
                        var modelAttrib = getGraphAttributes(graph);
                        pages[diagramName] = convertMxModel2Page(graph, modelAttrib);
                        addImagesRels(zip, i + 1);
                        modelsAttr[diagramName] = modelAttrib
                    }
                    if (currentPage != editorUi.currentPage)
                        editorUi.selectPage(currentPage, true);
                    editorUi.editor.graph.setSelectionCells(selectedCells)
                } else {
                    var graph = editorUi.editor.graph;
                    var modelAttrib = getGraphAttributes(graph);
                    var diagramName = "Page1";
                    pages[diagramName] = convertMxModel2Page(graph, modelAttrib);
                    addImagesRels(zip, 1);
                    modelsAttr[diagramName] = modelAttrib
                }
                createVsdxSkeleton(zip, pagesCount);
                addPagesXML(zip, pages, modelsAttr);
                var createZipFile = function() {
                    zip.generateAsync({
                        type: "base64"
                    }).then(function(content) {
                        editorUi.spinner.stop();
                        var basename = editorUi.getBaseFilename();
                        editorUi.saveData(basename + ".vsdx", "vsdx", content, "application/vnd.visio2013", true)
                    })
                };
                if (vsdxCanvas.filesLoading > 0)
                    vsdxCanvas.onFilesLoaded = createZipFile;
                else
                    createZipFile()
            }
            return true
        } catch (e) {
            console.log(e);
            return false
        }
    }
}
VsdxExport.prototype.CONVERSION_FACTOR = 40 * 2.54;
VsdxExport.prototype.PAGES_TYPE = "http://schemas.microsoft.com/visio/2010/relationships/page";
VsdxExport.prototype.RELS_XMLNS = "http://schemas.openxmlformats.org/package/2006/relationships";
VsdxExport.prototype.XML_SPACE = "preserve";
VsdxExport.prototype.XMLNS_R = "http://schemas.openxmlformats.org/officeDocument/2006/relationships";
VsdxExport.prototype.XMLNS = "http://schemas.microsoft.com/office/visio/2012/main";
VsdxExport.prototype.VISIO_PAGES = "visio/pages/";
VsdxExport.prototype.PREFEX = "com/mxgraph/io/vsdx/resources/export/";
VsdxExport.prototype.VSDX_ENC = "ISO-8859-1";
VsdxExport.prototype.PART_NAME = "PartName";
VsdxExport.prototype.CONTENT_TYPES_XML = "[Content_Types].xml";
VsdxExport.prototype.VISIO_PAGES_RELS = "visio/pages/_rels/";
VsdxExport.prototype.ARROWS_MAP = {
    "none|1": 0,
    "none|0": 0,
    "open|1": 1,
    "open|0": 1,
    "block|1": 4,
    "block|0": 14,
    "classic|1": 5,
    "classic|0": 17,
    "oval|1": 10,
    "oval|0": 20,
    "diamond|1": 11,
    "diamond|0": 22,
    "blockThin|1": 2,
    "blockThin|0": 15,
    "dash|1": 23,
    "dash|0": 23,
    "ERone|1": 24,
    "ERone|0": 24,
    "ERmandOne|1": 25,
    "ERmandOne|0": 25,
    "ERmany|1": 27,
    "ERmany|0": 27,
    "ERoneToMany|1": 28,
    "ERoneToMany|0": 28,
    "ERzeroToMany|1": 29,
    "ERzeroToMany|0": 29,
    "ERzeroToOne|1": 30,
    "ERzeroToOne|0": 30,
    "openAsync|1": 9,
    "openAsync|0": 9
};
function mxVsdxCanvas2D() {
    mxAbstractCanvas2D.call(this)
}
mxUtils.extend(mxVsdxCanvas2D, mxAbstractCanvas2D);
mxVsdxCanvas2D.prototype.textEnabled = true;
mxVsdxCanvas2D.prototype.init = function(zip) {
    this.filesLoading = 0;
    this.zip = zip
}
;
mxVsdxCanvas2D.prototype.onFilesLoaded = function() {}
;
mxVsdxCanvas2D.prototype.createElt = function(name) {
    return this.xmlDoc.createElementNS != null ? this.xmlDoc.createElementNS(VsdxExport.prototype.XMLNS, name) : this.xmlDoc.createElement(name)
}
;
mxVsdxCanvas2D.prototype.createGeoSec = function() {
    if (this.geoSec != null)
        this.shape.appendChild(this.geoSec);
    var geoSec = this.createElt("Section");
    geoSec.setAttribute("N", "Geometry");
    geoSec.setAttribute("IX", this.geoIndex++);
    this.geoSec = geoSec;
    this.geoStepIndex = 1;
    this.lastX = 0;
    this.lastY = 0;
    this.lastMoveToX = 0;
    this.lastMoveToY = 0
}
;
mxVsdxCanvas2D.prototype.newShape = function(shape, cellState, xmlDoc) {
    this.geoIndex = 0;
    this.shape = shape;
    this.cellState = cellState;
    this.xmGeo = cellState.cell.geometry;
    this.xmlDoc = xmlDoc;
    this.geoSec = null;
    this.shapeImg = null;
    this.shapeType = "Shape";
    this.createGeoSec()
}
;
mxVsdxCanvas2D.prototype.newEdge = function(shape, cellState, xmlDoc) {
    this.shape = shape;
    this.cellState = cellState;
    this.xmGeo = cellState.cellBounds;
    var s = this.state;
    this.xmlDoc = xmlDoc
}
;
mxVsdxCanvas2D.prototype.endShape = function() {
    if (this.shapeImg != null)
        this.addForeignData(this.shapeImg.type, this.shapeImg.id)
}
;
mxVsdxCanvas2D.prototype.newPage = function() {
    this.images = []
}
;
mxVsdxCanvas2D.prototype.getShapeType = function() {
    return this.shapeType
}
;
mxVsdxCanvas2D.prototype.getShapeGeo = function() {
    return this.geoSec
}
;
mxVsdxCanvas2D.prototype.createCellElemScaled = function(name, val, formula) {
    return this.createCellElem(name, val / VsdxExport.prototype.CONVERSION_FACTOR, formula)
}
;
mxVsdxCanvas2D.prototype.createCellElem = function(name, val, formula) {
    var cell = this.createElt("Cell");
    cell.setAttribute("N", name);
    cell.setAttribute("V", val);
    if (formula)
        cell.setAttribute("F", formula);
    return cell
}
;
mxVsdxCanvas2D.prototype.createRowScaled = function(type, index, x, y, a, b, c, d, xF, yF, aF, bF, cF, dF) {
    return this.createRowRel(type, index, x / VsdxExport.prototype.CONVERSION_FACTOR, y / VsdxExport.prototype.CONVERSION_FACTOR, a / VsdxExport.prototype.CONVERSION_FACTOR, b / VsdxExport.prototype.CONVERSION_FACTOR, c / VsdxExport.prototype.CONVERSION_FACTOR, d / VsdxExport.prototype.CONVERSION_FACTOR, xF, yF, aF, bF, cF, dF)
}
;
mxVsdxCanvas2D.prototype.createRowRel = function(type, index, x, y, a, b, c, d, xF, yF, aF, bF, cF, dF) {
    var row = this.createElt("Row");
    row.setAttribute("T", type);
    row.setAttribute("IX", index);
    row.appendChild(this.createCellElem("X", x, xF));
    row.appendChild(this.createCellElem("Y", y, yF));
    if (a != null)
        row.appendChild(this.createCellElem("A", a, aF));
    if (b != null)
        row.appendChild(this.createCellElem("B", b, bF));
    if (c != null)
        row.appendChild(this.createCellElem("C", c, cF));
    if (d != null)
        row.appendChild(this.createCellElem("D", d, dF));
    return row
}
;
mxVsdxCanvas2D.prototype.begin = function() {
    if (this.geoStepIndex > 1)
        this.createGeoSec()
}
;
mxVsdxCanvas2D.prototype.rect = function(x, y, w, h) {
    if (this.geoStepIndex > 1)
        this.createGeoSec();
    var s = this.state;
    w = w * s.scale;
    h = h * s.scale;
    var geo = this.xmGeo;
    x = (x - geo.x + s.dx) * s.scale / w;
    y = (geo.height - y + geo.y - s.dy) * s.scale / h;
    this.geoSec.appendChild(this.createRowRel("RelMoveTo", this.geoStepIndex++, x, y));
    this.geoSec.appendChild(this.createRowRel("RelLineTo", this.geoStepIndex++, x + 1, y));
    this.geoSec.appendChild(this.createRowRel("RelLineTo", this.geoStepIndex++, x + 1, y - 1));
    this.geoSec.appendChild(this.createRowRel("RelLineTo", this.geoStepIndex++, x, y - 1));
    this.geoSec.appendChild(this.createRowRel("RelLineTo", this.geoStepIndex++, x, y))
}
;
mxVsdxCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy) {
    this.rect(x, y, w, h);
    this.shape.appendChild(this.createCellElemScaled("Rounding", dx))
}
;
mxVsdxCanvas2D.prototype.ellipse = function(x, y, w, h) {
    if (this.geoStepIndex > 1)
        this.createGeoSec();
    var s = this.state;
    w = w * s.scale;
    h = h * s.scale;
    var geo = this.xmGeo;
    var gh = geo.height * s.scale;
    var gw = geo.width * s.scale;
    x = (x - geo.x + s.dx) * s.scale;
    y = gh + (-y + geo.y - s.dy) * s.scale;
    var xWr = (x + w / 2) / gw;
    var yHr = (y - h / 2) / gh;
    var aWr = x / gw;
    var bHr = (y - h / 2) / gh;
    var cWr = (x + w / 2) / gw;
    var dHr = y / gh;
    this.geoSec.appendChild(this.createRowScaled("Ellipse", this.geoStepIndex++, x + w / 2, y - h / 2, x, y - h / 2, x + w / 2, y, "Width*" + xWr, "Height*" + yHr, "Width*" + aWr, "Height*" + bHr, "Width*" + cWr, "Height*" + dHr))
}
;
mxVsdxCanvas2D.prototype.moveTo = function(x, y) {
    if (this.geoStepIndex > 1)
        this.createGeoSec();
    this.lastMoveToX = x;
    this.lastMoveToY = y;
    this.lastX = x;
    this.lastY = y;
    var geo = this.xmGeo;
    var s = this.state;
    x = (x - geo.x + s.dx) * s.scale;
    y = (geo.height - y + geo.y - s.dy) * s.scale;
    var h = geo.height * s.scale;
    var w = geo.width * s.scale;
    this.geoSec.appendChild(this.createRowRel("RelMoveTo", this.geoStepIndex++, x / w, y / h))
}
;
mxVsdxCanvas2D.prototype.lineTo = function(x, y) {
    this.lastX = x;
    this.lastY = y;
    var geo = this.xmGeo;
    var s = this.state;
    x = (x - geo.x + s.dx) * s.scale;
    y = (geo.height - y + geo.y - s.dy) * s.scale;
    var h = geo.height * s.scale;
    var w = geo.width * s.scale;
    this.geoSec.appendChild(this.createRowRel("RelLineTo", this.geoStepIndex++, x / w, y / h))
}
;
mxVsdxCanvas2D.prototype.quadTo = function(x1, y1, x2, y2) {
    this.lastX = x2;
    this.lastY = y2;
    var s = this.state;
    var geo = this.xmGeo;
    var h = geo.height * s.scale;
    var w = geo.width * s.scale;
    x1 = (x1 - geo.x + s.dx) * s.scale;
    y1 = (geo.height - y1 + geo.y - s.dy) * s.scale;
    x2 = (x2 - geo.x + s.dx) * s.scale;
    y2 = (geo.height - y2 + geo.y - s.dy) * s.scale;
    x1 = x1 / w;
    y1 = y1 / h;
    x2 = x2 / w;
    y2 = y2 / h;
    this.geoSec.appendChild(this.createRowRel("RelQuadBezTo", this.geoStepIndex++, x2, y2, x1, y1))
}
;
mxVsdxCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3) {
    this.lastX = x3;
    this.lastY = y3;
    var s = this.state;
    var geo = this.xmGeo;
    var h = geo.height * s.scale;
    var w = geo.width * s.scale;
    x1 = (x1 - geo.x + s.dx) * s.scale;
    y1 = (geo.height - y1 + geo.y - s.dy) * s.scale;
    x2 = (x2 - geo.x + s.dx) * s.scale;
    y2 = (geo.height - y2 + geo.y - s.dy) * s.scale;
    x3 = (x3 - geo.x + s.dx) * s.scale;
    y3 = (geo.height - y3 + geo.y - s.dy) * s.scale;
    x1 = x1 / w;
    y1 = y1 / h;
    x2 = x2 / w;
    y2 = y2 / h;
    x3 = x3 / w;
    y3 = y3 / h;
    this.geoSec.appendChild(this.createRowRel("RelCubBezTo", this.geoStepIndex++, x3, y3, x1, y1, x2, y2))
}
;
mxVsdxCanvas2D.prototype.close = function() {
    if (this.lastMoveToX != this.lastX || this.lastMoveToY != this.lastY)
        this.lineTo(this.lastMoveToX, this.lastMoveToY)
}
;
mxVsdxCanvas2D.prototype.addForeignData = function(type, index) {
    var foreignData = this.createElt("ForeignData");
    foreignData.setAttribute("ForeignType", "Bitmap");
    type = type.toUpperCase();
    if (type != "BMP")
        foreignData.setAttribute("CompressionType", type);
    var rel = this.createElt("Rel");
    rel.setAttribute("r:id", "rId" + index);
    foreignData.appendChild(rel);
    this.shape.appendChild(foreignData);
    this.shapeType = "Foreign"
}
;
mxVsdxCanvas2D.prototype.convertSvg2Png = function(svgData, isBase64, callback) {
    var that = this;
    this.filesLoading++;
    try {
        var canvas = document.createElement("canvas");
        var ctx = canvas.getContext("2d");
        if (!isBase64) {
            svgData = String.fromCharCode.apply(null, new Uint8Array(svgData));
            svgData = window.btoa ? btoa(svgData) : Base64.encode(svgData, true)
        }
        var svgUrl = "data:image/svg+xml;base64," + svgData;
        img = new Image;
        img.onload = function() {
            canvas.width = this.width;
            canvas.height = this.height;
            ctx.drawImage(this, 0, 0);
            try {
                callback(canvas.toDataURL("image/png"))
            } catch (e) {}
            that.filesLoading--;
            if (that.filesLoading == 0)
                that.onFilesLoaded()
        }
        ;
        img.onerror = function() {
            console.log("SVG2PNG conversion failed");
            try {
                callback(svgData)
            } catch (e) {}
            that.filesLoading--;
            if (that.filesLoading == 0)
                that.onFilesLoaded()
        }
        ;
        img.src = svgUrl
    } catch (e$0) {
        console.log("SVG2PNG conversion failed" + e$0.message);
        try {
            callback(svgData)
        } catch (e) {}
        this.filesLoading--;
        if (that.filesLoading == 0)
            that.onFilesLoaded()
    }
}
;
mxVsdxCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV) {
    var that = this;
    var imgName = "image" + (this.images.length + 1) + ".";
    var type;
    if (src.indexOf("data:") == 0) {
        var p = src.indexOf("base64,");
        var base64 = src.substring(p + 7);
        type = src.substring(11, p - 1);
        if (type.indexOf("svg") == 0) {
            type = "png";
            imgName += type;
            this.convertSvg2Png(base64, true, function(pngData) {
                that.zip.file("visio/media/" + imgName, pngData.substring(22), {
                    base64: true
                })
            })
        } else {
            imgName += type;
            this.zip.file("visio/media/" + imgName, base64, {
                base64: true
            })
        }
    } else if (window.XMLHttpRequest) {
        src = this.converter.convert(src);
        this.filesLoading++;
        var p = src.lastIndexOf(".");
        type = src.substring(p + 1);
        var convertSvg = false;
        if (type.indexOf("svg") == 0) {
            type = "png";
            convertSvg = true
        }
        imgName += type;
        var xhr = new XMLHttpRequest;
        xhr.open("GET", src, true);
        xhr.responseType = "arraybuffer";
        xhr.onreadystatechange = function(e) {
            if (this.readyState == 4) {
                if (this.status == 200)
                    if (convertSvg)
                        that.convertSvg2Png(this.response, false, function(pngData) {
                            that.zip.file("visio/media/" + imgName, pngData.substring(22), {
                                base64: true
                            })
                        });
                    else
                        that.zip.file("visio/media/" + imgName, this.response);
                that.filesLoading--;
                if (that.filesLoading == 0)
                    that.onFilesLoaded()
            }
        }
        ;
        xhr.send()
    }
    this.images.push(imgName);
    this.shapeImg = {
        type: type,
        id: this.images.length + 1
    };
    aspect = aspect != null ? aspect : true;
    flipH = flipH != null ? flipH : false;
    flipV = flipV != null ? flipV : false;
    var s = this.state;
    w = w * s.scale;
    h = h * s.scale;
    var geo = this.xmGeo;
    x = (x - geo.x + s.dx) * s.scale;
    y = (geo.height - y + geo.y - s.dy) * s.scale;
    this.shape.appendChild(this.createCellElemScaled("ImgOffsetX", x));
    this.shape.appendChild(this.createCellElemScaled("ImgOffsetY", y - h));
    this.shape.appendChild(this.createCellElemScaled("ImgWidth", w));
    this.shape.appendChild(this.createCellElemScaled("ImgHeight", h))
}
;
mxVsdxCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir) {
    var that = this;
    if (this.textEnabled && str != null) {
        if (mxUtils.isNode(str))
            str = mxUtils.getOuterHtml(str);
        if (w == 0 && h == 0) {
            var strSize = mxUtils.getSizeForString(str, that.cellState.style["fontSize"], that.cellState.style["fontFamily"]);
            w = strSize.width * 1.2;
            h = strSize.height * 1.2
        }
        if (format == "html") {
            if (mxUtils.getValue(this.cellState.style, "nl2Br", "1") != "0")
                str = str.replace(/\n/g, "").replace(/<br\s*.?>/g, "\n");
            if (this.html2txtDiv == null)
                this.html2txtDiv = document.createElement("div");
            this.html2txtDiv.innerHTML = str;
            str = mxUtils.extractTextWithWhitespace(this.html2txtDiv.childNodes)
        }
        var s = this.state;
        var geo = this.xmGeo;
        w = w * s.scale;
        h = h * s.scale;
        var charSect = this.createElt("Section");
        charSect.setAttribute("N", "Character");
        var pSect = this.createElt("Section");
        pSect.setAttribute("N", "Paragraph");
        var text = this.createElt("Text");
        var rgb2hex = function(rgb) {
            rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
            return rgb && rgb.length === 4 ? "#" + ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2) : ""
        };
        var rowIndex = 0
          , pIndex = 0;
        var calcW = 0
          , calcH = 0
          , lastW = 0
          , lastH = 0
          , lineH = 0;
        var createTextRow = function(styleMap, charSect, pSect, textEl, txt) {
            var fontSize = styleMap["fontSize"];
            var fontFamily = styleMap["fontFamily"];
            var strRect = mxUtils.getSizeForString(txt, fontSize, fontFamily);
            var wrapped = false;
            if (wrap && strRect.width > w) {
                strRect = mxUtils.getSizeForString(txt, fontSize, fontFamily, w);
                wrapped = true
            }
            if (styleMap["blockElem"]) {
                lastW += strRect.width;
                calcW = Math.min(Math.max(calcW, lastW), w);
                lastW = 0;
                lastH = Math.max(lastH, strRect.height);
                calcH += lastH + lineH;
                lineH = lastH;
                lastH = 0
            } else {
                lastW += strRect.width;
                calcW = Math.min(Math.max(calcW, lastW), w);
                lastH = Math.max(lastH, strRect.height);
                calcH = Math.max(calcH, lastH)
            }
            var charRow = that.createElt("Row");
            charRow.setAttribute("IX", rowIndex);
            if (styleMap["fontColor"])
                charRow.appendChild(that.createCellElem("Color", styleMap["fontColor"]));
            if (fontSize)
                charRow.appendChild(that.createCellElemScaled("Size", fontSize * .97));
            if (fontFamily)
                charRow.appendChild(that.createCellElem("Font", fontFamily));
            var style = 0;
            if (styleMap["bold"])
                style |= 17;
            if (styleMap["italic"])
                style |= 34;
            if (styleMap["underline"])
                style |= 4;
            charRow.appendChild(that.createCellElem("Style", style));
            charRow.appendChild(that.createCellElem("Case", "0"));
            charRow.appendChild(that.createCellElem("Pos", "0"));
            charRow.appendChild(that.createCellElem("FontScale", "1"));
            charRow.appendChild(that.createCellElem("Letterspace", "0"));
            charSect.appendChild(charRow);
            var cp = that.createElt("cp");
            cp.setAttribute("IX", rowIndex++);
            textEl.appendChild(cp);
            var txtNode = that.xmlDoc.createTextNode(txt + (styleMap["blockElem"] ? "\n" : ""));
            textEl.appendChild(txtNode)
        };
        var processNodeChildren = function(ch, pStyle) {
            pStyle = pStyle || {};
            for (var i = 0; i < ch.length; i++)
                if (ch[i].nodeType == 3) {
                    var fontStyle = that.cellState.style["fontStyle"];
                    var styleMap = {
                        fontColor: pStyle["fontColor"] || that.cellState.style["fontColor"],
                        fontSize: pStyle["fontSize"] || that.cellState.style["fontSize"],
                        fontFamily: pStyle["fontFamily"] || that.cellState.style["fontFamily"],
                        align: pStyle["align"] || that.cellState.style["align"],
                        bold: pStyle["bold"] || fontStyle & 1,
                        italic: pStyle["italic"] || fontStyle & 2,
                        underline: pStyle["underline"] || fontStyle & 4
                    };
                    createTextRow(styleMap, charSect, pSect, text, ch[i].textContent)
                } else if (ch[i].nodeType == 1) {
                    var nodeName = ch[i].nodeName.toUpperCase();
                    var chLen = ch[i].childNodes.length;
                    var style = window.getComputedStyle(ch[i], null);
                    var styleMap = {
                        bold: style.getPropertyValue("font-weight") == "bold" || pStyle["bold"],
                        italic: style.getPropertyValue("font-style") == "italic" || pStyle["italic"],
                        underline: style.getPropertyValue("text-decoration").indexOf("underline") >= 0 || pStyle["underline"],
                        align: style.getPropertyValue("text-align"),
                        fontColor: rgb2hex(style.getPropertyValue("color")),
                        fontSize: parseFloat(style.getPropertyValue("font-size")),
                        fontFamily: style.getPropertyValue("font-family").replace(/"/g, ""),
                        blockElem: style.getPropertyValue("display") == "block" || nodeName == "BR" || nodeName == "LI"
                    };
                    if (chLen > 0) {
                        createTextRow(styleMap, charSect, pSect, text, "");
                        processNodeChildren(ch[i].childNodes, styleMap)
                    } else
                        createTextRow(styleMap, charSect, pSect, text, ch[i].textContent)
                }
        };
        if (format == "html" && mxClient.IS_SVG) {
            var elt = this.cellState.text.node.getElementsByTagName("div")[mxClient.NO_FO ? 0 : 1];
            if (elt != null) {
                var ch = elt.childNodes;
                processNodeChildren(ch, {})
            }
        } else {
            var styleMap = {
                fontColor: that.cellState.style["fontColor"],
                fontSize: that.cellState.style["fontSize"],
                fontFamily: that.cellState.style["fontFamily"]
            };
            createTextRow(styleMap, charSect, pSect, text, str)
        }
        var wShift = 0;
        var hShift = 0;
        switch (align) {
        case "right":
            wShift = calcW / 2;
            break;
        case "center":
            wShift = 0;
            break;
        case "left":
            wShift = -calcW / 2;
            break
        }
        switch (valign) {
        case "top":
            hShift = calcH / 2;
            break;
        case "middle":
            hShift = 0;
            break;
        case "bottom":
            hShift = -calcH / 2;
            break
        }
        h = Math.max(h, calcH);
        w = Math.max(w, calcW);
        x = (x - geo.x + s.dx) * s.scale;
        y = (geo.height - y + geo.y - s.dy) * s.scale;
        var hw = w / 2
          , hh = h / 2;
        this.shape.appendChild(this.createCellElemScaled("TxtPinX", x));
        this.shape.appendChild(this.createCellElemScaled("TxtPinY", y));
        this.shape.appendChild(this.createCellElemScaled("TxtWidth", w));
        this.shape.appendChild(this.createCellElemScaled("TxtHeight", h));
        this.shape.appendChild(this.createCellElemScaled("TxtLocPinX", hw + wShift));
        this.shape.appendChild(this.createCellElemScaled("TxtLocPinY", hh + hShift));
        if (rotation != 0)
            this.shape.appendChild(this.createCellElem("TxtAngle", (360 - rotation) * Math.PI / 180));
        this.shape.appendChild(charSect);
        this.shape.appendChild(text)
    }
}
;
mxVsdxCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy) {
    if (theta != 0) {
        var s = this.state;
        cx += s.dx;
        cy += s.dy;
        cx *= s.scale;
        cy *= s.scale;
        this.shape.appendChild(this.createCellElem("Angle", (360 - theta) * Math.PI / 180));
        s.rotation = s.rotation + theta;
        s.rotationCx = cx;
        s.rotationCy = cy
    }
}
;
mxVsdxCanvas2D.prototype.stroke = function() {
    this.geoSec.appendChild(this.createCellElem("NoFill", "1"));
    this.geoSec.appendChild(this.createCellElem("NoLine", "0"))
}
;
mxVsdxCanvas2D.prototype.fill = function() {
    this.geoSec.appendChild(this.createCellElem("NoFill", "0"));
    this.geoSec.appendChild(this.createCellElem("NoLine", "1"))
}
;
mxVsdxCanvas2D.prototype.fillAndStroke = function() {
    this.geoSec.appendChild(this.createCellElem("NoFill", "0"));
    this.geoSec.appendChild(this.createCellElem("NoLine", "0"))
}
;
function BmpDecoder(buffer, is_with_alpha) {
    this.pos = 0;
    this.buffer = buffer;
    this.is_with_alpha = !!is_with_alpha;
    if (this.buffer[0] != 66 && this.buffer[1] != 77)
        throw new Error("Invalid BMP File");
    this.pos += 2;
    this.parseHeader();
    this.parseBGR()
}
BmpDecoder.prototype.parseHeader = function() {
    var b = this.buffer;
    this.fileSize = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.reserved = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.offset = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.headerSize = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.width = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.height = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.planes = b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 2;
    this.bitPP = b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 2;
    this.compress = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.rawSize = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.hr = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.vr = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.colors = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    this.importantColors = b[this.pos + 3] << 24 | b[this.pos + 2] << 16 | b[this.pos + 1] << 8 | b[this.pos];
    this.pos += 4;
    if (this.bitPP === 16 && this.is_with_alpha)
        this.bitPP = 15;
    if (this.bitPP < 15) {
        var len = this.colors === 0 ? 1 << this.bitPP : this.colors;
        this.palette = new Array(len);
        for (var i = 0; i < len; i++) {
            var blue = this.buffer[this.pos++];
            var green = this.buffer[this.pos++];
            var red = this.buffer[this.pos++];
            var quad = this.buffer[this.pos++];
            this.palette[i] = {
                red: red,
                green: green,
                blue: blue,
                quad: quad
            }
        }
    }
}
;
BmpDecoder.prototype.parseBGR = function() {
    this.pos = this.offset;
    try {
        var bitn = "bit" + this.bitPP;
        var canvas = document.createElement("canvas");
        var ctx = canvas.getContext("2d");
        var imageData = ctx.createImageData(this.width, this.height);
        this.imageData = imageData;
        this.data = imageData.data;
        this[bitn]()
    } catch (e) {
        console.log("bit decode error:" + e)
    }
}
;
BmpDecoder.prototype.bit1 = function() {
    var xlen = Math.ceil(this.width / 8);
    var mode = xlen % 4;
    for (var y = this.height - 1; y >= 0; y--) {
        for (var x = 0; x < xlen; x++) {
            var b = this.buffer[this.pos++];
            var location = y * this.width * 4 + x * 8 * 4;
            for (var i = 0; i < 8; i++)
                if (x * 8 + i < this.width) {
                    var rgb = this.palette[b >> 7 - i & 1];
                    this.data[location + i * 4] = rgb.red;
                    this.data[location + i * 4 + 1] = rgb.green;
                    this.data[location + i * 4 + 2] = rgb.blue;
                    this.data[location + i * 4 + 3] = 255
                } else
                    break
        }
        if (mode != 0)
            this.pos += 4 - mode
    }
}
;
BmpDecoder.prototype.bit4 = function() {
    var xlen = Math.ceil(this.width / 2);
    var mode = xlen % 4;
    for (var y = this.height - 1; y >= 0; y--) {
        for (var x = 0; x < xlen; x++) {
            var b = this.buffer[this.pos++];
            var location = y * this.width * 4 + x * 2 * 4;
            var before = b >> 4;
            var after = b & 15;
            var rgb = this.palette[before];
            this.data[location] = rgb.red;
            this.data[location + 1] = rgb.green;
            this.data[location + 2] = rgb.blue;
            this.data[location + 3] = 255;
            if (x * 2 + 1 >= this.width)
                break;
            rgb = this.palette[after];
            this.data[location + 4] = rgb.red;
            this.data[location + 4 + 1] = rgb.green;
            this.data[location + 4 + 2] = rgb.blue;
            this.data[location + 4 + 3] = 255
        }
        if (mode != 0)
            this.pos += 4 - mode
    }
}
;
BmpDecoder.prototype.bit8 = function() {
    var mode = this.width % 4;
    for (var y = this.height - 1; y >= 0; y--) {
        for (var x = 0; x < this.width; x++) {
            var b = this.buffer[this.pos++];
            var location = y * this.width * 4 + x * 4;
            if (b < this.palette.length) {
                var rgb = this.palette[b];
                this.data[location] = rgb.red;
                this.data[location + 1] = rgb.green;
                this.data[location + 2] = rgb.blue;
                this.data[location + 3] = 255
            } else {
                this.data[location] = 255;
                this.data[location + 1] = 255;
                this.data[location + 2] = 255;
                this.data[location + 3] = 255
            }
        }
        if (mode != 0)
            this.pos += 4 - mode
    }
}
;
BmpDecoder.prototype.bit15 = function() {
    var dif_w = this.width * 2 % 4;
    if (dif_w != 0)
        dif_w = 4 - dif_w;
    var _11111 = parseInt("11111", 2)
      , _1_5 = _11111;
    for (var y = this.height - 1; y >= 0; y--) {
        for (var x = 0; x < this.width; x++) {
            var B = this.buffer[this.pos + 1] << 8 | this.buffer[this.pos];
            this.pos += 2;
            var blue = (B & _1_5) / _1_5 * 255 | 0;
            var green = (B >> 5 & _1_5) / _1_5 * 255 | 0;
            var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;
            var alpha = B >> 15 ? 255 : 0;
            var location = y * this.width * 4 + x * 4;
            this.data[location] = red;
            this.data[location + 1] = green;
            this.data[location + 2] = blue;
            this.data[location + 3] = alpha
        }
        this.pos += dif_w
    }
}
;
BmpDecoder.prototype.bit16 = function() {
    var dif_w = this.width * 2 % 4;
    if (dif_w != 0)
        dif_w = 4 - dif_w;
    var _11111 = parseInt("11111", 2)
      , _1_5 = _11111;
    var _111111 = parseInt("111111", 2)
      , _1_6 = _111111;
    for (var y = this.height - 1; y >= 0; y--) {
        for (var x = 0; x < this.width; x++) {
            var B = this.buffer[this.pos + 1] << 8 | this.buffer[this.pos];
            this.pos += 2;
            var alpha = 255;
            var blue = (B & _1_5) / _1_5 * 255 | 0;
            var green = (B >> 5 & _1_5) / _1_5 * 255 | 0;
            var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;
            var location = y * this.width * 4 + x * 4;
            this.data[location] = red;
            this.data[location + 1] = green;
            this.data[location + 2] = blue;
            this.data[location + 3] = alpha
        }
        this.pos += dif_w
    }
}
;
BmpDecoder.prototype.bit24 = function() {
    var dif_w = this.width * 3 % 4;
    if (dif_w != 0)
        dif_w = 4 - dif_w;
    for (var y = this.height - 1; y >= 0; y--) {
        for (var x = 0; x < this.width; x++) {
            var blue = this.buffer[this.pos++];
            var green = this.buffer[this.pos++];
            var red = this.buffer[this.pos++];
            var location = y * this.width * 4 + x * 4;
            this.data[location] = red;
            this.data[location + 1] = green;
            this.data[location + 2] = blue;
            this.data[location + 3] = 255
        }
        this.pos += dif_w
    }
}
;
BmpDecoder.prototype.bit32 = function() {
    for (var y = this.height - 1; y >= 0; y--)
        for (var x = 0; x < this.width; x++) {
            var blue = this.buffer[this.pos++];
            var green = this.buffer[this.pos++];
            var red = this.buffer[this.pos++];
            var alpha = this.buffer[this.pos++];
            var location = y * this.width * 4 + x * 4;
            this.data[location] = red;
            this.data[location + 1] = green;
            this.data[location + 2] = blue;
            this.data[location + 3] = alpha
        }
}
;
BmpDecoder.prototype.getData = function() {
    return this.data
}
;
var __extends = this && this.__extends || function(d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() {
        this.constructor = d
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype,
    new __)
}
;
var com;
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var mxVsdxCodec = function() {
                function mxVsdxCodec() {
                    this.RESPONSE_END = "</mxfile>";
                    this.RESPONSE_DIAGRAM_START = "";
                    this.RESPONSE_DIAGRAM_END = "</diagram>";
                    this.RESPONSE_HEADER = '<?xml version="1.0" encoding="UTF-8"?><mxfile>';
                    this.vertexMap = {};
                    this.edgeShapeMap = {};
                    this.vertexShapeMap = {};
                    this.parentsMap = {};
                    this.layersMap = {};
                    this.debugPaths = false;
                    this.vsdxModel = null
                }
                mxVsdxCodec.vsdxPlaceholder_$LI$ = function() {
                    if (mxVsdxCodec.vsdxPlaceholder == null) {
                        var tmp = "dmlzaW8=";
                        mxVsdxCodec.vsdxPlaceholder = window.atob ? atob(tmp) : Base64.decode(tmp, true)
                    }
                    return mxVsdxCodec.vsdxPlaceholder
                }
                ;
                mxVsdxCodec.parsererrorNS_$LI$ = function() {
                    if (mxVsdxCodec.parsererrorNS == null) {
                        mxVsdxCodec.parsererrorNS = "";
                        if (window.DOMParser) {
                            var parser = new DOMParser;
                            try {
                                mxVsdxCodec.parsererrorNS = parser.parseFromString("<", "text/xml").getElementsByTagName("parsererror")[0].namespaceURI
                            } catch (e) {}
                        }
                    }
                    return mxVsdxCodec.parsererrorNS
                }
                ;
                mxVsdxCodec.parseXml = function(xml) {
                    try {
                        var doc = mxUtils.parseXml(xml);
                        if (doc.getElementsByTagNameNS(mxVsdxCodec.parsererrorNS, "parsererror").length > 0)
                            return null;
                        else
                            return doc
                    } catch (e) {
                        return null
                    }
                }
                ;
                mxVsdxCodec.decodeUTF16LE = function(binaryStr) {
                    var cp = "";
                    for (var i = 0; i < binaryStr.length; i += 2)
                        cp += String.fromCharCode(binaryStr.charCodeAt(i) | binaryStr.charCodeAt(i + 1) << 8);
                    return cp
                }
                ;
                mxVsdxCodec.prototype.scaleGraph = function(graph, scale) {
                    if (scale !== 1) {
                        var model = graph.getModel();
                        {
                            for (var id in model.cells) {
                                var c = model.cells[id];
                                {
                                    var geo = model.getGeometry(c);
                                    if (geo != null) {
                                        this.scaleRect(geo, scale);
                                        this.scaleRect(geo.alternateBounds, scale);
                                        if (model.isEdge(c)) {
                                            this.scalePoint(geo.sourcePoint, scale);
                                            this.scalePoint(geo.targetPoint, scale);
                                            this.scalePoint(geo.offset, scale);
                                            var points = geo.points;
                                            if (points != null)
                                                for (var index125 = 0; index125 < points.length; index125++) {
                                                    var p = points[index125];
                                                    {
                                                        this.scalePoint(p, scale)
                                                    }
                                                }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                ;
                mxVsdxCodec.prototype.decodeVsdx = function(file, callback, charset, onerror) {
                    var _this = this;
                    var docData = {};
                    var mediaData = {};
                    var allDone = function() {
                        var path = mxVsdxCodec.vsdxPlaceholder + "/document.xml";
                        var rootDoc = function(m, k) {
                            return m[k] ? m[k] : null
                        }(docData, path);
                        var rootChild = rootDoc.firstChild;
                        while (rootChild != null && !(rootChild.nodeType == 1))
                            rootChild = rootChild.nextSibling;
                        if (rootChild != null && rootChild.nodeType == 1)
                            _this.importNodes(rootDoc, rootChild, path, docData);
                        else
                            return null;
                        _this.vsdxModel = new com.mxgraph.io.vsdx.mxVsdxModel(rootDoc,docData,mediaData);
                        var pages = _this.vsdxModel.getPages();
                        var xmlBuilder = {
                            str: _this.RESPONSE_HEADER,
                            toString: function() {
                                return this.str
                            }
                        };
                        {
                            var array122 = function(m) {
                                if (m.entries == null)
                                    m.entries = [];
                                return m.entries
                            }(pages);
                            var _loop_1 = function(index121) {
                                var entry = array122[index121];
                                {
                                    var page_1 = entry.getValue();
                                    if (!page_1.isBackground()) {
                                        var graph_1 = this_1.createMxGraph();
                                        graph_1.getModel().beginUpdate();
                                        this_1.importPage(page_1, graph_1, graph_1.getDefaultParent());
                                        var backPage = page_1.getBackPage();
                                        if (backPage != null) {
                                            graph_1.getModel().setValue(graph_1.getDefaultParent(), page_1.getPageName());
                                            var backCell = new mxCell(backPage.getPageName());
                                            graph_1.addCell(backCell, graph_1.getModel().getRoot(), 0, null, null);
                                            this_1.importPage(backPage, graph_1, graph_1.getDefaultParent())
                                        }
                                        this_1.scaleGraph(graph_1, page_1.getPageScale() / page_1.getDrawingScale());
                                        graph_1.getModel().endUpdate();
                                        (function(sb) {
                                            return sb.str = sb.str.concat(_this.RESPONSE_DIAGRAM_START)
                                        }
                                        )(xmlBuilder);
                                        (function(sb) {
                                            return sb.str = sb.str.concat(_this.processPage(graph_1, page_1))
                                        }
                                        )(xmlBuilder);
                                        (function(sb) {
                                            return sb.str = sb.str.concat(_this.RESPONSE_DIAGRAM_END)
                                        }
                                        )(xmlBuilder)
                                    }
                                }
                            };
                            var this_1 = _this;
                            for (var index121 = 0; index121 < array122.length; index121++)
                                _loop_1(index121)
                        }
                        (function(sb) {
                            return sb.str = sb.str.concat(_this.RESPONSE_END)
                        }
                        )(xmlBuilder);
                        var dateAfter = new Date;
                        if (callback)
                            callback(xmlBuilder.str)
                    };
                    var dateBefore = new Date;
                    var filesCount = 0;
                    var processedFiles = 0;
                    var doneCheck = function() {
                        if (processedFiles == filesCount) {
                            var dateAfter = new Date;
                            try {
                                allDone()
                            } catch (e) {
                                console.log(e);
                                if (onerror != null)
                                    onerror();
                                else
                                    callback("")
                            }
                        }
                    };
                    JSZip.loadAsync(file).then(function(zip) {
                        if (Object.keys(zip.files).length == 0) {
                            if (onerror != null)
                                onerror()
                        } else {
                            var dateAfter = new Date;
                            zip.forEach(function(relativePath, zipEntry) {
                                var filename = zipEntry.name;
                                var name = filename.toLowerCase();
                                var nameLen = name.length;
                                if (name.indexOf(".xml") == nameLen - 4 || name.indexOf(".xml.rels") == nameLen - 9) {
                                    filesCount++;
                                    zipEntry.async("string").then(function(str) {
                                        if (!(str.length === 0)) {
                                            if (str.charCodeAt(0) == 65279)
                                                str = str.substring(1);
                                            var doc = mxVsdxCodec.parseXml(str);
                                            if (doc == null)
                                                if (str.charCodeAt(1) === 0 && str.charCodeAt(3) === 0 && str.charCodeAt(5) === 0)
                                                    doc = mxVsdxCodec.parseXml(mxVsdxCodec.decodeUTF16LE(str));
                                            if (doc != null) {
                                                doc.vsdxFileName = filename;
                                                docData[filename] = doc
                                            }
                                        }
                                        processedFiles++;
                                        doneCheck()
                                    })
                                } else if (name.indexOf(mxVsdxCodec.vsdxPlaceholder + "/media") === 0) {
                                    filesCount++;
                                    if (function(str, searchString) {
                                        var pos = str.length - searchString.length;
                                        var lastIndex = str.indexOf(searchString, pos);
                                        return lastIndex !== -1 && lastIndex === pos
                                    }(name, ".emf")) {
                                        var emfDone = function() {
                                            processedFiles++;
                                            doneCheck()
                                        };
                                        if (JSZip.support.blob && window.EMF_CONVERT_URL)
                                            zipEntry.async("blob").then(function(emfBlob) {
                                                var formData = new FormData;
                                                formData.append("img", emfBlob, name);
                                                var xhr = new XMLHttpRequest;
                                                xhr.open("POST", EMF_CONVERT_URL);
                                                xhr.responseType = "blob";
                                                xhr.onreadystatechange = mxUtils.bind(this, function() {
                                                    if (xhr.readyState == 4)
                                                        if (xhr.status >= 200 && xhr.status <= 299)
                                                            try {
                                                                var reader = new FileReader;
                                                                reader.readAsDataURL(xhr.response);
                                                                reader.onloadend = function() {
                                                                    mediaData[filename] = reader.result.substr(22);
                                                                    emfDone()
                                                                }
                                                            } catch (e) {
                                                                console.log(e);
                                                                emfDone()
                                                            }
                                                        else
                                                            emfDone()
                                                });
                                                xhr.send(formData)
                                            });
                                        else
                                            emfDone()
                                    } else if (function(str, searchString) {
                                        var pos = str.length - searchString.length;
                                        var lastIndex = str.indexOf(searchString, pos);
                                        return lastIndex !== -1 && lastIndex === pos
                                    }(name, ".bmp")) {
                                        if (JSZip.support.uint8array)
                                            zipEntry.async("uint8array").then(function(bmpData) {
                                                var bitmap = new BmpDecoder(bmpData);
                                                var c = document.createElement("canvas");
                                                c.width = bitmap.width;
                                                c.height = bitmap.height;
                                                var ctx = c.getContext("2d");
                                                ctx.putImageData(bitmap.imageData, 0, 0);
                                                var jpgData = c.toDataURL("image/jpeg");
                                                mediaData[filename] = jpgData.substr(23);
                                                processedFiles++;
                                                doneCheck()
                                            })
                                    } else
                                        zipEntry.async("base64").then(function(base64Str) {
                                            mediaData[filename] = base64Str;
                                            processedFiles++;
                                            doneCheck()
                                        })
                                }
                            })
                        }
                    }, function(e) {
                        if (onerror != null)
                            onerror(e)
                    })
                }
                ;
                mxVsdxCodec.prototype.createMxGraph = function() {
                    var graph = new mxGraph;
                    graph.setExtendParents(false);
                    graph.setExtendParentsOnAdd(false);
                    graph.setConstrainChildren(false);
                    graph.setHtmlLabels(true);
                    graph.getModel().maintainEdgeParent = false;
                    return graph
                }
                ;
                mxVsdxCodec.prototype.processPage = function(graph, page) {
                    var codec = new mxCodec;
                    var node = codec.encode(graph.getModel());
                    node.setAttribute("style", "default-style2");
                    var modelString = mxUtils.getXml(node);
                    var output = "";
                    if (page != null) {
                        var pageName_1 = mxUtils.htmlEntities(page.getPageName());
                        output += '<diagram name="' + pageName_1 + '">'
                    }
                    output += Graph.prototype.compress(modelString);
                    return output
                }
                ;
                mxVsdxCodec.prototype.scalePoint = function(p, scale) {
                    if (p != null) {
                        p.x = p.x * scale;
                        p.y = p.y * scale
                    }
                    return p
                }
                ;
                mxVsdxCodec.prototype.scaleRect = function(rect, scale) {
                    if (rect != null) {
                        rect.x = rect.x * scale;
                        rect.y = rect.y * scale;
                        rect.height = rect.height * scale;
                        rect.width = rect.width * scale
                    }
                    return rect
                }
                ;
                mxVsdxCodec.prototype.importNodes = function(rootDoc, currentNode, path, docData) {
                    var lastSlash = path.lastIndexOf("/");
                    var dir = path;
                    var fileName = path;
                    if (lastSlash !== -1) {
                        dir = path.substring(0, lastSlash);
                        fileName = path.substring(lastSlash + 1, path.length)
                    } else
                        return;
                    var relsPath = dir + "/_rels/" + fileName + ".rels";
                    var relsDoc = function(m, k) {
                        return m[k] ? m[k] : null
                    }(docData, relsPath);
                    if (relsDoc == null)
                        return;
                    var rels = relsDoc.getElementsByTagName("Relationship");
                    var relMap = {};
                    for (var i = 0; i < rels.length; i++) {
                        var currElem = rels.item(i);
                        var id = currElem.getAttribute("Id");
                        var target = currElem.getAttribute("Target");
                        relMap[id] = target
                    }
                    var relList = currentNode.getElementsByTagName("Rel");
                    for (var i = 0; i < relList.length; i++) {
                        var rel = relList.item(i);
                        var pathSuffix = function(m, k) {
                            return m[k] ? m[k] : null
                        }(relMap, rel.getAttribute("r:id"));
                        var target = dir + "/" + pathSuffix;
                        if (target != null) {
                            var childDoc = function(m, k) {
                                return m[k] ? m[k] : null
                            }(docData, target);
                            if (childDoc != null) {
                                var parent_1 = rel.parentNode;
                                var rootChild = childDoc.firstChild;
                                while (rootChild != null && !(rootChild.nodeType == 1))
                                    rootChild = rootChild.nextSibling;
                                if (rootChild != null && rootChild.nodeType == 1) {
                                    var importNode = rootChild.firstChild;
                                    while (importNode != null) {
                                        if (importNode != null && importNode.nodeType == 1) {
                                            var newNode = parent_1.appendChild(rootDoc.importNode(importNode, true));
                                            var pathTmp = target;
                                            this.importNodes(rootDoc, newNode, pathTmp, docData)
                                        }
                                        importNode = importNode.nextSibling
                                    }
                                }
                            }
                        }
                    }
                }
                ;
                mxVsdxCodec.prototype.importPage = function(page, graph, parent) {
                    var layers = page.getLayers();
                    this.layersMap[0] = graph.getDefaultParent();
                    if (layers.length > 1)
                        for (var k = 1; k < layers.length; k++) {
                            var layer = layers[k];
                            var layerCell = new mxCell;
                            layerCell.setVisible(layer.Visible == 1);
                            if (layer.Lock == 1)
                                layerCell.setStyle("locked=1;");
                            layerCell.setValue(layer.Name);
                            this.layersMap[k] = layerCell;
                            graph.addCell(layerCell, graph.model.root, k)
                        }
                    var shapes = page.getShapes();
                    var entries = function(a) {
                        var i = 0;
                        return {
                            next: function() {
                                return i < a.length ? a[i++] : null
                            },
                            hasNext: function() {
                                return i < a.length
                            }
                        }
                    }(function(m) {
                        if (m.entries == null)
                            m.entries = [];
                        return m.entries
                    }(shapes));
                    var pageHeight = page.getPageDimensions().y;
                    var pageId = page.getId();
                    while (entries.hasNext()) {
                        var entry = entries.next();
                        var shape = entry.getValue();
                        var p = this.layersMap[shape.layerMember];
                        this.addShape(graph, shape, p ? p : parent, pageId, pageHeight)
                    }
                    var connects = page.getConnects();
                    var entries2 = function(a) {
                        var i = 0;
                        return {
                            next: function() {
                                return i < a.length ? a[i++] : null
                            },
                            hasNext: function() {
                                return i < a.length
                            }
                        }
                    }(function(m) {
                        if (m.entries == null)
                            m.entries = [];
                        return m.entries
                    }(connects));
                    while (entries2.hasNext()) {
                        var entry = entries2.next();
                        var edgeId = this.addConnectedEdge(graph, entry.getValue(), pageId, pageHeight);
                        if (edgeId != null)
                            (function(m, k) {
                                if (m.entries == null)
                                    m.entries = [];
                                for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                        return m.entries.splice(i, 1)[0]
                            }
                            )(this.edgeShapeMap, edgeId)
                    }
                    var it = function(a) {
                        var i = 0;
                        return {
                            next: function() {
                                return i < a.length ? a[i++] : null
                            },
                            hasNext: function() {
                                return i < a.length
                            }
                        }
                    }(function(m) {
                        if (m.entries == null)
                            m.entries = [];
                        return m.entries
                    }(this.edgeShapeMap));
                    while (it.hasNext()) {
                        var edgeShapeEntry = it.next();
                        if (edgeShapeEntry.getKey().getPageNumber() === pageId)
                            this.addUnconnectedEdge(graph, function(m, k) {
                                if (m.entries == null)
                                    m.entries = [];
                                for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                        return m.entries[i].value;
                                return null
                            }(this.parentsMap, edgeShapeEntry.getKey()), edgeShapeEntry.getValue(), pageHeight)
                    }
                    this.sanitiseGraph(graph);
                    return pageHeight
                }
                ;
                mxVsdxCodec.prototype.addShape = function(graph, shape, parent, pageId, parentHeight) {
                    shape.parentHeight = parentHeight;
                    var type = com.mxgraph.io.vsdx.VsdxShape.getType(shape.getShape());
                    if (type != null && (function(o1, o2) {
                        if (o1 && o1.equals)
                            return o1.equals(o2);
                        else
                            return o1 === o2
                    }(type, com.mxgraph.io.vsdx.mxVsdxConstants.TYPE_SHAPE) || function(o1, o2) {
                        if (o1 && o1.equals)
                            return o1.equals(o2);
                        else
                            return o1 === o2
                    }(type, com.mxgraph.io.vsdx.mxVsdxConstants.TYPE_GROUP) || function(o1, o2) {
                        if (o1 && o1.equals)
                            return o1.equals(o2);
                        else
                            return o1 === o2
                    }(type, com.mxgraph.io.vsdx.mxVsdxConstants.FOREIGN))) {
                        var id = shape.getId();
                        if (shape.isVertex()) {
                            var v1 = null;
                            if (shape.isGroup())
                                v1 = this.addGroup(graph, shape, parent, pageId, parentHeight);
                            else
                                v1 = this.addVertex(graph, shape, parent, pageId, parentHeight);
                            (function(m, k, v) {
                                if (m.entries == null)
                                    m.entries = [];
                                for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                        m.entries[i].value = v;
                                        return
                                    }
                                m.entries.push({
                                    key: k,
                                    value: v,
                                    getKey: function() {
                                        return this.key
                                    },
                                    getValue: function() {
                                        return this.value
                                    }
                                })
                            }
                            )(this.vertexShapeMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,id), shape);
                            return v1
                        } else {
                            shape.setShapeIndex(graph.getModel().getChildCount(parent));
                            (function(m, k, v) {
                                if (m.entries == null)
                                    m.entries = [];
                                for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                        m.entries[i].value = v;
                                        return
                                    }
                                m.entries.push({
                                    key: k,
                                    value: v,
                                    getKey: function() {
                                        return this.key
                                    },
                                    getValue: function() {
                                        return this.value
                                    }
                                })
                            }
                            )(this.edgeShapeMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,id), shape);
                            (function(m, k, v) {
                                if (m.entries == null)
                                    m.entries = [];
                                for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                        m.entries[i].value = v;
                                        return
                                    }
                                m.entries.push({
                                    key: k,
                                    value: v,
                                    getKey: function() {
                                        return this.key
                                    },
                                    getValue: function() {
                                        return this.value
                                    }
                                })
                            }
                            )(this.parentsMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,id), parent)
                        }
                    }
                    return null
                }
                ;
                mxVsdxCodec.prototype.addGroup = function(graph, shape, parent, pageId, parentHeight) {
                    var d = shape.getDimensions();
                    var master = shape.getMaster();
                    var styleMap = shape.getStyleFromShape();
                    var geomList = shape.getGeomList();
                    if (geomList.isNoFill()) {
                        styleMap[mxConstants.STYLE_FILLCOLOR] = "none";
                        styleMap[mxConstants.STYLE_GRADIENTCOLOR] = "none"
                    }
                    if (geomList.isNoLine())
                        styleMap[mxConstants.STYLE_STROKECOLOR] = "none";
                    styleMap["html"] = "1";
                    styleMap[mxConstants.STYLE_WHITE_SPACE] = "wrap";
                    var style = com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(styleMap, "=");
                    var group = null;
                    var children = shape.getChildShapes();
                    var hasChildren = children != null && function(m) {
                        if (m.entries == null)
                            m.entries = [];
                        return m.entries.length
                    }(children) > 0;
                    var subLabel = shape.isDisplacedLabel() || shape.isRotatedLabel() || hasChildren;
                    var o = shape.getOriginPoint(parentHeight, true);
                    if (subLabel)
                        group = graph.insertVertex(parent, null, null, Math.floor(Math.round(o.x * 100) / 100), Math.floor(Math.round(o.y * 100) / 100), Math.floor(Math.round(d.x * 100) / 100), Math.floor(Math.round(d.y * 100) / 100), style);
                    else {
                        var textLabel = shape.getTextLabel();
                        group = graph.insertVertex(parent, null, textLabel, Math.floor(Math.round(o.x * 100) / 100), Math.floor(Math.round(o.y * 100) / 100), Math.floor(Math.round(d.x * 100) / 100), Math.floor(Math.round(d.y * 100) / 100), style)
                    }
                    var entries = function(a) {
                        var i = 0;
                        return {
                            next: function() {
                                return i < a.length ? a[i++] : null
                            },
                            hasNext: function() {
                                return i < a.length
                            }
                        }
                    }(function(m) {
                        if (m.entries == null)
                            m.entries = [];
                        return m.entries
                    }(children));
                    while (entries.hasNext()) {
                        var entry = entries.next();
                        var subShape = entry.getValue();
                        var Id = subShape.getId();
                        if (subShape.isVertex()) {
                            var type = com.mxgraph.io.vsdx.VsdxShape.getType(subShape.getShape());
                            if (type != null && (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(type, com.mxgraph.io.vsdx.mxVsdxConstants.TYPE_SHAPE) || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(type, com.mxgraph.io.vsdx.mxVsdxConstants.TYPE_GROUP) || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(type, com.mxgraph.io.vsdx.mxVsdxConstants.FOREIGN)))
                                if (subShape.isVertex()) {
                                    subShape.propagateRotation(shape.getRotation());
                                    if (subShape.isGroup())
                                        this.addGroup(graph, subShape, group, pageId, d.y);
                                    else
                                        this.addVertex(graph, subShape, group, pageId, d.y)
                                }
                            if (master == null)
                                (function(m, k, v) {
                                    if (m.entries == null)
                                        m.entries = [];
                                    for (var i = 0; i < m.entries.length; i++)
                                        if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                            m.entries[i].value = v;
                                            return
                                        }
                                    m.entries.push({
                                        key: k,
                                        value: v,
                                        getKey: function() {
                                            return this.key
                                        },
                                        getValue: function() {
                                            return this.value
                                        }
                                    })
                                }
                                )(this.vertexShapeMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,Id), subShape)
                        } else if (master == null) {
                            (function(m, k, v) {
                                if (m.entries == null)
                                    m.entries = [];
                                for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                        m.entries[i].value = v;
                                        return
                                    }
                                m.entries.push({
                                    key: k,
                                    value: v,
                                    getKey: function() {
                                        return this.key
                                    },
                                    getValue: function() {
                                        return this.value
                                    }
                                })
                            }
                            )(this.edgeShapeMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,Id), subShape);
                            (function(m, k, v) {
                                if (m.entries == null)
                                    m.entries = [];
                                for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                        m.entries[i].value = v;
                                        return
                                    }
                                m.entries.push({
                                    key: k,
                                    value: v,
                                    getKey: function() {
                                        return this.key
                                    },
                                    getValue: function() {
                                        return this.value
                                    }
                                })
                            }
                            )(this.parentsMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,Id), group)
                        } else
                            this.addUnconnectedEdge(graph, group, subShape, parentHeight)
                    }
                    if (subLabel)
                        shape.createLabelSubShape(graph, group);
                    var rotation = shape.getRotation();
                    if (rotation !== 0) {
                        var pgeo = group.getGeometry();
                        var hw = pgeo.width / 2;
                        var hh = pgeo.height / 2;
                        for (var i = 0; i < group.getChildCount(); i++) {
                            var child = group.getChildAt(i);
                            com.mxgraph.online.Utils.rotatedGeometry(child.getGeometry(), rotation, hw, hh)
                        }
                    }
                    (function(m, k, v) {
                        if (m.entries == null)
                            m.entries = [];
                        for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                m.entries[i].value = v;
                                return
                            }
                        m.entries.push({
                            key: k,
                            value: v,
                            getKey: function() {
                                return this.key
                            },
                            getValue: function() {
                                return this.value
                            }
                        })
                    }
                    )(this.vertexMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,shape.getId()), group);
                    return group
                }
                ;
                mxVsdxCodec.rotatedEdgePoint = function(pt, rotation, cx, cy) {
                    rotation = function(x) {
                        return x * Math.PI / 180
                    }(rotation);
                    var cos = Math.cos(rotation);
                    var sin = Math.sin(rotation);
                    var x = pt.x - cx;
                    var y = pt.y - cy;
                    var x1 = x * cos - y * sin;
                    var y1 = y * cos + x * sin;
                    pt.x = Math.round(x1 + cx);
                    pt.y = Math.round(y1 + cy)
                }
                ;
                mxVsdxCodec.prototype.addVertex = function(graph, shape, parent, pageId, parentHeight) {
                    var textLabel = "";
                    var hasSubLabel = shape.isDisplacedLabel() || shape.isRotatedLabel();
                    if (!hasSubLabel)
                        textLabel = shape.getTextLabel();
                    var dimensions = shape.getDimensions();
                    var styleMap = shape.getStyleFromShape();
                    styleMap["html"] = "1";
                    var geomExists = styleMap.hasOwnProperty(mxConstants.STYLE_SHAPE) || styleMap.hasOwnProperty("stencil");
                    if (!styleMap.hasOwnProperty(mxConstants.STYLE_FILLCOLOR) || !geomExists)
                        styleMap[mxConstants.STYLE_FILLCOLOR] = "none";
                    if (!geomExists)
                        styleMap[mxConstants.STYLE_STROKECOLOR] = "none";
                    if (!styleMap.hasOwnProperty(mxConstants.STYLE_GRADIENTCOLOR) || !geomExists)
                        styleMap[mxConstants.STYLE_GRADIENTCOLOR] = "none";
                    styleMap[mxConstants.STYLE_WHITE_SPACE] = "wrap";
                    var coordinates = shape.getOriginPoint(parentHeight, true);
                    if (geomExists || textLabel != null) {
                        var style = com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(styleMap, "=");
                        var v1 = null;
                        if (hasSubLabel)
                            v1 = graph.insertVertex(parent, null, null, Math.floor(Math.round(coordinates.x * 100) / 100), Math.floor(Math.round(coordinates.y * 100) / 100), Math.floor(Math.round(dimensions.x * 100) / 100), Math.floor(Math.round(dimensions.y * 100) / 100), style);
                        else
                            v1 = graph.insertVertex(parent, null, textLabel, Math.floor(Math.round(coordinates.x * 100) / 100), Math.floor(Math.round(coordinates.y * 100) / 100), Math.floor(Math.round(dimensions.x * 100) / 100), Math.floor(Math.round(dimensions.y * 100) / 100), style);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(this.vertexMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,shape.getId()), v1);
                        shape.setLabelOffset(v1, style);
                        if (hasSubLabel)
                            shape.createLabelSubShape(graph, v1);
                        return v1
                    }
                    return null
                }
                ;
                mxVsdxCodec.calculateAbsolutePoint = function(cell) {
                    var x = 0
                      , y = 0;
                    while (cell != null) {
                        var geo = cell.geometry;
                        if (geo != null) {
                            x += geo.x;
                            y += geo.y
                        }
                        cell = cell.parent
                    }
                    return new mxPoint(x,y)
                }
                ;
                mxVsdxCodec.prototype.addConnectedEdge = function(graph, connect, pageId, pageHeight) {
                    var fromSheet = connect.getFromSheet();
                    var edgeId = new com.mxgraph.io.vsdx.ShapePageId(pageId,fromSheet);
                    var edgeShape = function(m, k) {
                        if (m.entries == null)
                            m.entries = [];
                        for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                return m.entries[i].value;
                        return null
                    }(this.edgeShapeMap, edgeId);
                    if (edgeShape == null)
                        return null;
                    var parent = function(m, k) {
                        if (m.entries == null)
                            m.entries = [];
                        for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                return m.entries[i].value;
                        return null
                    }(this.parentsMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,edgeShape.getId()));
                    var parentHeight = pageHeight;
                    if (parent != null) {
                        var parentGeo = graph.getModel().getGeometry(parent);
                        if (parentGeo != null)
                            parentHeight = parentGeo.height
                    }
                    var beginXY = edgeShape.getStartXY(parentHeight);
                    var endXY = edgeShape.getEndXY(parentHeight);
                    var points = edgeShape.getRoutingPoints(parentHeight, beginXY, edgeShape.getRotation());
                    this.rotateChildEdge(graph.getModel(), parent, beginXY, endXY, points);
                    var fromConstraint = null;
                    var sourceSheet = connect.getSourceToSheet();
                    var source = sourceSheet != null ? function(m, k) {
                        if (m.entries == null)
                            m.entries = [];
                        for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                return m.entries[i].value;
                        return null
                    }(this.vertexMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,sourceSheet)) : null;
                    var removeFirstPt = true;
                    if (source == null)
                        source = graph.insertVertex(parent, null, null, Math.floor(Math.round(beginXY.x * 100) / 100), Math.floor(Math.round(beginXY.y * 100) / 100), 0, 0);
                    else if (source.style && source.style.indexOf(";rotation=") == -1) {
                        var absOriginFrom = mxVsdxCodec.calculateAbsolutePoint(source);
                        var absBeginXY = mxVsdxCodec.calculateAbsolutePoint(parent);
                        var srcGeo = source.geometry;
                        fromConstraint = new mxPoint((absBeginXY.x + beginXY.x - absOriginFrom.x) / srcGeo.width,(absBeginXY.y + beginXY.y - absOriginFrom.y) / srcGeo.height)
                    } else
                        removeFirstPt = false;
                    var toConstraint = null;
                    var toSheet = connect.getTargetToSheet();
                    var target = toSheet != null ? function(m, k) {
                        if (m.entries == null)
                            m.entries = [];
                        for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                return m.entries[i].value;
                        return null
                    }(this.vertexMap, new com.mxgraph.io.vsdx.ShapePageId(pageId,toSheet)) : null;
                    var removeLastPt = true;
                    if (target == null)
                        target = graph.insertVertex(parent, null, null, Math.floor(Math.round(endXY.x * 100) / 100), Math.floor(Math.round(endXY.y * 100) / 100), 0, 0);
                    else if (target.style && target.style.indexOf(";rotation=") == -1) {
                        var absOriginTo = mxVsdxCodec.calculateAbsolutePoint(target);
                        var absEndXY = mxVsdxCodec.calculateAbsolutePoint(parent);
                        var trgGeo = target.geometry;
                        toConstraint = new mxPoint((absEndXY.x + endXY.x - absOriginTo.x) / trgGeo.width,(absEndXY.y + endXY.y - absOriginTo.y) / trgGeo.height)
                    } else
                        removeLastPt = false;
                    var styleMap = edgeShape.getStyleFromEdgeShape(parentHeight);
                    var edge;
                    var rotation = edgeShape.getRotation();
                    if (rotation !== 0) {
                        edge = graph.insertEdge(parent, null, null, source, target, com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(styleMap, "="));
                        var label = edgeShape.createLabelSubShape(graph, edge);
                        if (label != null) {
                            label.setStyle(label.getStyle() + ";rotation=" + (rotation > 60 && rotation < 240 ? (rotation + 180) % 360 : rotation));
                            var geo = label.getGeometry();
                            geo.x = 0;
                            geo.y = 0;
                            geo.relative = true;
                            geo.offset = new mxPoint(-geo.width / 2,-geo.height / 2)
                        }
                    } else {
                        edge = graph.insertEdge(parent, null, edgeShape.getTextLabel(), source, target, com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(styleMap, "="));
                        var lblOffset = edgeShape.getLblEdgeOffset(graph.getView(), points);
                        edge.getGeometry().offset = lblOffset;
                        if (fromConstraint != null)
                            graph.setConnectionConstraint(edge, source, true, new mxConnectionConstraint(fromConstraint,false));
                        if (removeFirstPt)
                            points.shift();
                        if (toConstraint != null)
                            graph.setConnectionConstraint(edge, target, false, new mxConnectionConstraint(toConstraint,false));
                        if (removeLastPt)
                            points.pop()
                    }
                    var edgeGeometry = graph.getModel().getGeometry(edge);
                    if (source.parent != target.parent && parent != null && parent.id != 1 && source.parent.id == 1) {
                        var accX = 0;
                        var accY = 0;
                        var prnt = parent;
                        do {
                            var prntGeo = prnt.geometry;
                            if (prntGeo != null) {
                                accX += prntGeo.x;
                                accY += prntGeo.y
                            }
                            prnt = prnt.parent
                        } while (prnt != null);edge.parent = source.parent;
                        for (var i = 0; i < points.length; i++) {
                            points[i].x += accX;
                            points[i].y += accY
                        }
                    }
                    edgeGeometry.points = points;
                    if (styleMap.hasOwnProperty("curved") && function(o1, o2) {
                        if (o1 && o1.equals)
                            return o1.equals(o2);
                        else
                            return o1 === o2
                    }(function(m, k) {
                        return m[k] ? m[k] : null
                    }(styleMap, "curved"), "1")) {
                        edgeGeometry = graph.getModel().getGeometry(edge);
                        var pointList = edgeShape.getControlPoints(parentHeight);
                        edgeGeometry.points = pointList
                    }
                    return edgeId
                }
                ;
                mxVsdxCodec.prototype.addUnconnectedEdge = function(graph, parent, edgeShape, pageHeight) {
                    var parentHeight = pageHeight;
                    if (parent != null) {
                        var parentGeometry = graph.getModel().getGeometry(parent);
                        if (parentGeometry != null)
                            parentHeight = parentGeometry.height
                    }
                    var beginXY = edgeShape.getStartXY(parentHeight);
                    var endXY = edgeShape.getEndXY(parentHeight);
                    var styleMap = edgeShape.getStyleFromEdgeShape(parentHeight);
                    var edge;
                    var points = edgeShape.getRoutingPoints(parentHeight, beginXY, edgeShape.getRotation());
                    var rotation = edgeShape.getRotation();
                    if (rotation !== 0) {
                        if (edgeShape.getShapeIndex() === 0)
                            edge = graph.insertEdge(parent, null, null, null, null, com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(styleMap, "="));
                        else {
                            edge = graph.createEdge(parent, null, null, null, null, com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(styleMap, "="));
                            edge = graph.addEdge(edge, parent, null, null, edgeShape.getShapeIndex())
                        }
                        var label = edgeShape.createLabelSubShape(graph, edge);
                        if (label != null) {
                            label.setStyle(label.getStyle() + ";rotation=" + (rotation > 60 && rotation < 240 ? (rotation + 180) % 360 : rotation));
                            var geo = label.getGeometry();
                            geo.x = 0;
                            geo.y = 0;
                            geo.relative = true;
                            geo.offset = new mxPoint(-geo.width / 2,-geo.height / 2)
                        }
                    } else {
                        if (edgeShape.getShapeIndex() === 0)
                            edge = graph.insertEdge(parent, null, edgeShape.getTextLabel(), null, null, com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(styleMap, "="));
                        else {
                            edge = graph.createEdge(parent, null, edgeShape.getTextLabel(), null, null, com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(styleMap, "="));
                            edge = graph.addEdge(edge, parent, null, null, edgeShape.getShapeIndex())
                        }
                        var lblOffset = edgeShape.getLblEdgeOffset(graph.getView(), points);
                        edge.getGeometry().offset = lblOffset
                    }
                    this.rotateChildEdge(graph.getModel(), parent, beginXY, endXY, points);
                    var edgeGeometry = graph.getModel().getGeometry(edge);
                    points.pop();
                    points.shift();
                    edgeGeometry.points = points;
                    edgeGeometry.setTerminalPoint(beginXY, true);
                    edgeGeometry.setTerminalPoint(endXY, false);
                    if (styleMap.hasOwnProperty("curved") && function(o1, o2) {
                        if (o1 && o1.equals)
                            return o1.equals(o2);
                        else
                            return o1 === o2
                    }(function(m, k) {
                        return m[k] ? m[k] : null
                    }(styleMap, "curved"), "1")) {
                        edgeGeometry = graph.getModel().getGeometry(edge);
                        var pointList = edgeShape.getControlPoints(parentHeight);
                        edgeGeometry.points = pointList
                    }
                    return edge
                }
                ;
                mxVsdxCodec.prototype.rotateChildEdge = function(model, parent, beginXY, endXY, points) {
                    if (parent != null) {
                        var pgeo = model.getGeometry(parent);
                        var pStyle = model.getStyle(parent);
                        if (pgeo != null && pStyle != null) {
                            var pos = pStyle.indexOf("rotation=");
                            if (pos > -1) {
                                var pRotation = parseFloat(pStyle.substring(pos + 9, pStyle.indexOf(";", pos)));
                                var hw = pgeo.width / 2;
                                var hh = pgeo.height / 2;
                                mxVsdxCodec.rotatedEdgePoint(beginXY, pRotation, hw, hh);
                                mxVsdxCodec.rotatedEdgePoint(endXY, pRotation, hw, hh);
                                for (var index126 = 0; index126 < points.length; index126++) {
                                    var p = points[index126];
                                    {
                                        mxVsdxCodec.rotatedEdgePoint(p, pRotation, hw, hh)
                                    }
                                }
                            }
                        }
                    }
                }
                ;
                mxVsdxCodec.prototype.sanitiseGraph = function(graph) {
                    var root = graph.getModel().getRoot();
                    this.sanitiseCell(graph, root)
                }
                ;
                mxVsdxCodec.prototype.sanitiseCell = function(graph, cell) {
                    var model = graph.getModel();
                    var childCount = model.getChildCount(cell);
                    var removeList = [];
                    for (var i = 0; i < childCount; i++) {
                        var child = model.getChildAt(cell, i);
                        var remove = this.sanitiseCell(graph, child);
                        if (remove)
                            removeList.push(child) > 0
                    }
                    for (var index127 = 0; index127 < removeList.length; index127++) {
                        var removeChild = removeList[index127];
                        {
                            model.remove(removeChild)
                        }
                    }
                    if (childCount > 0)
                        childCount = model.getChildCount(cell);
                    var value = (new String(model.getValue(cell))).toString();
                    var style = model.getStyle(cell);
                    if (childCount === 0 && model.isVertex(cell))
                        if ((model.getValue(cell) == null || value.length === 0) && style != null && style.indexOf(mxConstants.STYLE_FILLCOLOR + "=none") != -1 && style.indexOf(mxConstants.STYLE_STROKECOLOR + "=none") != -1 && style.indexOf("image=") == -1)
                            return true;
                    return false
                }
                ;
                return mxVsdxCodec
            }();
            io.mxVsdxCodec = mxVsdxCodec;
            mxVsdxCodec["__class"] = "com.mxgraph.io.mxVsdxCodec"
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var mxVssxCodec = function(_super) {
                __extends(mxVssxCodec, _super);
                function mxVssxCodec() {
                    var _this = _super.call(this) || this;
                    _this.RESPONSE_END = "";
                    _this.RESPONSE_DIAGRAM_START = "";
                    _this.RESPONSE_DIAGRAM_END = "";
                    _this.RESPONSE_HEADER = "";
                    return _this
                }
                mxVssxCodec.prototype.decodeVssx = function(file, callback, charset) {
                    var _this = this;
                    var library = {
                        str: "<mxlibrary>[",
                        toString: function() {
                            return this.str
                        }
                    };
                    this.decodeVsdx(file, function(shapesInPages) {
                        (function(sb) {
                            return sb.str = sb.str.concat(shapesInPages)
                        }
                        )(library);
                        var masterShapes = _this.vsdxModel.getMasterShapes();
                        var page = function(a) {
                            var i = 0;
                            return {
                                next: function() {
                                    return i < a.length ? a[i++] : null
                                },
                                hasNext: function() {
                                    return i < a.length
                                }
                            }
                        }(function(m) {
                            var r = [];
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                r.push(m.entries[i].value);
                            return r
                        }(_this.vsdxModel.getPages())).next();
                        if (masterShapes != null) {
                            var shapes_1 = {
                                str: "",
                                toString: function() {
                                    return this.str
                                }
                            };
                            var comma_1 = shapesInPages.length === 0 ? "" : ",";
                            {
                                var array129 = function(obj) {
                                    return Object.keys(obj).map(function(key) {
                                        return obj[key]
                                    })
                                }(masterShapes);
                                var _loop_1 = function(index128) {
                                    var master = array129[index128];
                                    {
                                        var shapeGraph = this_1.createMxGraph();
                                        var shapeElem = master.getMasterShape().getShape();
                                        var shape = new com.mxgraph.io.vsdx.VsdxShape(page,shapeElem,!page.isEdge(shapeElem),masterShapes,null,this_1.vsdxModel);
                                        var scale = 1;
                                        if (master.pageSheet != null) {
                                            var dScaleV = 1
                                              , pScaleV = 1;
                                            var dScale = master.pageSheet["DrawingScale"];
                                            if (dScale != null)
                                                dScaleV = parseFloat(dScale.getAttribute("V"));
                                            var pScale = master.pageSheet["PageScale"];
                                            if (pScale != null)
                                                pScaleV = parseFloat(pScale.getAttribute("V"));
                                            scale = pScaleV / dScaleV
                                        }
                                        var cell = null;
                                        if (shape.isVertex()) {
                                            this_1.edgeShapeMap.entries = [];
                                            this_1.parentsMap.entries = [];
                                            cell = this_1.addShape(shapeGraph, shape, shapeGraph.getDefaultParent(), 0, 1169);
                                            {
                                                var array131 = function(m) {
                                                    if (m.entries == null)
                                                        m.entries = [];
                                                    return m.entries
                                                }(this_1.edgeShapeMap);
                                                for (var index130 = 0; index130 < array131.length; index130++) {
                                                    var edgeEntry = array131[index130];
                                                    {
                                                        var parent_1 = function(m, k) {
                                                            if (m.entries == null)
                                                                m.entries = [];
                                                            for (var i = 0; i < m.entries.length; i++)
                                                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                                                    return m.entries[i].value;
                                                            return null
                                                        }(this_1.parentsMap, edgeEntry.getKey());
                                                        this_1.addUnconnectedEdge(shapeGraph, parent_1, edgeEntry.getValue(), 1169)
                                                    }
                                                }
                                            }
                                        } else
                                            cell = this_1.addUnconnectedEdge(shapeGraph, null, shape, 1169);
                                        if (cell != null) {
                                            this_1.scaleGraph(shapeGraph, scale);
                                            var geo_1 = this_1.normalizeGeo(cell);
                                            this_1.sanitiseGraph(shapeGraph);
                                            if (shapeGraph.getModel().getChildCount(shapeGraph.getDefaultParent()) === 0)
                                                return "continue";
                                            (function(sb) {
                                                return sb.str = sb.str.concat(comma_1)
                                            }
                                            )(shapes_1);
                                            (function(sb) {
                                                return sb.str = sb.str.concat('{"xml":"')
                                            }
                                            )(shapes_1);
                                            var shapeXML_1 = _super.prototype.processPage.call(this_1, shapeGraph, null);
                                            (function(sb) {
                                                return sb.str = sb.str.concat(shapeXML_1)
                                            }
                                            )(shapes_1);
                                            (function(sb) {
                                                return sb.str = sb.str.concat('","w":')
                                            }
                                            )(shapes_1);
                                            (function(sb) {
                                                return sb.str = sb.str.concat(geo_1.width)
                                            }
                                            )(shapes_1);
                                            (function(sb) {
                                                return sb.str = sb.str.concat(',"h":')
                                            }
                                            )(shapes_1);
                                            (function(sb) {
                                                return sb.str = sb.str.concat(geo_1.height)
                                            }
                                            )(shapes_1);
                                            (function(sb) {
                                                return sb.str = sb.str.concat(',"title":')
                                            }
                                            )(shapes_1);
                                            var shapeName_1 = master.getName();
                                            if (shapeName_1 == null)
                                                shapeName_1 = "";
                                            shapeName_1 = JSON.stringify(mxUtils.htmlEntities(shapeName_1));
                                            (function(sb) {
                                                return sb.str = sb.str.concat(shapeName_1)
                                            }
                                            )(shapes_1);
                                            (function(sb) {
                                                return sb.str = sb.str.concat("}")
                                            }
                                            )(shapes_1);
                                            comma_1 = ","
                                        }
                                    }
                                };
                                var this_1 = _this;
                                for (var index128 = 0; index128 < array129.length; index128++)
                                    _loop_1(index128)
                            }
                            (function(sb) {
                                return sb.str = sb.str.concat(shapes_1)
                            }
                            )(library)
                        }
                        (function(sb) {
                            return sb.str = sb.str.concat("]</mxlibrary>")
                        }
                        )(library);
                        if (callback)
                            callback(library.str)
                    }, charset)
                }
                ;
                mxVssxCodec.prototype.normalizeGeo = function(cell) {
                    var geo = cell.getGeometry();
                    geo.x = 0;
                    geo.y = 0;
                    var srcP = geo.sourcePoint;
                    if (cell.isEdge() && srcP != null) {
                        this.transPoint(geo.targetPoint, srcP);
                        this.transPoint(geo.offset, srcP);
                        var points = geo.points;
                        if (points != null)
                            for (var index132 = 0; index132 < points.length; index132++) {
                                var p = points[index132];
                                {
                                    this.transPoint(p, srcP)
                                }
                            }
                        this.transPoint(srcP, srcP)
                    }
                    return geo
                }
                ;
                mxVssxCodec.prototype.transPoint = function(p, srcP) {
                    if (p != null) {
                        p.x = p.x - srcP.x;
                        p.y = p.y - srcP.y
                    }
                }
                ;
                mxVssxCodec.prototype.processPage = function(graph, page) {
                    var model = graph.getModel();
                    var shapes = {
                        str: "",
                        toString: function() {
                            return this.str
                        }
                    };
                    var comma = "";
                    {
                        var this_2 = this;
                        for (var id in model.cells) {
                            var c = model.cells[id];
                            {
                                if (graph.getDefaultParent() === model.getParent(c)) {
                                    (function(sb) {
                                        return sb.str = sb.str.concat(comma)
                                    }
                                    )(shapes);
                                    (function(sb) {
                                        return sb.str = sb.str.concat('{"xml":"')
                                    }
                                    )(shapes);
                                    var shapeGraph = this_2.createMxGraph();
                                    shapeGraph.addCell(c);
                                    this_2.sanitiseGraph(shapeGraph);
                                    if (shapeGraph.getModel().getChildCount(shapeGraph.getDefaultParent()) === 0)
                                        return "continue";
                                    var geo_2 = this_2.normalizeGeo(c);
                                    var shapeXML_2 = _super.prototype.processPage.call(this_2, shapeGraph, null);
                                    (function(sb) {
                                        return sb.str = sb.str.concat(shapeXML_2)
                                    }
                                    )(shapes);
                                    (function(sb) {
                                        return sb.str = sb.str.concat('","w":')
                                    }
                                    )(shapes);
                                    (function(sb) {
                                        return sb.str = sb.str.concat(geo_2.width)
                                    }
                                    )(shapes);
                                    (function(sb) {
                                        return sb.str = sb.str.concat(',"h":')
                                    }
                                    )(shapes);
                                    (function(sb) {
                                        return sb.str = sb.str.concat(geo_2.height)
                                    }
                                    )(shapes);
                                    (function(sb) {
                                        return sb.str = sb.str.concat(',"title":"')
                                    }
                                    )(shapes);
                                    var style = model.getStyle(c);
                                    var name_1 = "";
                                    if (style != null) {
                                        var p = style.indexOf(com.mxgraph.io.vsdx.mxVsdxConstants.VSDX_ID);
                                        if (p >= 0) {
                                            p += com.mxgraph.io.vsdx.mxVsdxConstants.VSDX_ID.length + 1;
                                            var id = parseInt(style.substring(p, style.indexOf(";", p)));
                                            var vsdxShape = function(m, k) {
                                                if (m.entries == null)
                                                    m.entries = [];
                                                for (var i = 0; i < m.entries.length; i++)
                                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                                        return m.entries[i].value;
                                                return null
                                            }(this_2.vertexShapeMap, new com.mxgraph.io.vsdx.ShapePageId(page.getId(),id));
                                            if (vsdxShape != null)
                                                name_1 = vsdxShape.getName()
                                        }
                                    }
                                    (function(sb) {
                                        return sb.str = sb.str.concat(name_1)
                                    }
                                    )(shapes);
                                    (function(sb) {
                                        return sb.str = sb.str.concat('"}')
                                    }
                                    )(shapes);
                                    comma = ","
                                }
                            }
                        }
                    }
                    if (shapes.str.length > 0)
                        this.RESPONSE_DIAGRAM_START = ",";
                    else
                        this.RESPONSE_DIAGRAM_START = "";
                    return shapes.str
                }
                ;
                return mxVssxCodec
            }(com.mxgraph.io.mxVsdxCodec);
            io.mxVssxCodec = mxVssxCodec;
            mxVssxCodec["__class"] = "com.mxgraph.io.mxVssxCodec"
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var Row = function() {
                        function Row(index, x, y) {
                            this.x = null;
                            this.y = null;
                            this.a = null;
                            this.b = null;
                            this.c = null;
                            this.d = null;
                            this.formulaA = null;
                            this.formulaE = null;
                            this.index = 0;
                            this.index = index;
                            this.x = x;
                            this.y = y
                        }
                        Row.prototype.getX = function() {
                            return this.x
                        }
                        ;
                        Row.prototype.getY = function() {
                            return this.y
                        }
                        ;
                        Row.prototype.getA = function() {
                            return this.a
                        }
                        ;
                        Row.prototype.getB = function() {
                            return this.b
                        }
                        ;
                        Row.prototype.getC = function() {
                            return this.c
                        }
                        ;
                        Row.prototype.getD = function() {
                            return this.d
                        }
                        ;
                        Row.prototype.getFormulaA = function() {
                            return this.formulaA
                        }
                        ;
                        Row.prototype.getFormulaE = function() {
                            return this.formulaE
                        }
                        ;
                        Row.prototype.getIndex = function() {
                            return this.index
                        }
                        ;
                        return Row
                    }();
                    geometry.Row = Row;
                    Row["__class"] = "com.mxgraph.io.vsdx.geometry.Row"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var RowFactory = function() {
                        function RowFactory() {}
                        RowFactory.getIndex = function(elem) {
                            try {
                                return parseInt(elem.getAttribute("IX"))
                            } catch (e) {
                                return 1
                            }
                        }
                        ;
                        RowFactory.getDoubleVal = function(val) {
                            try {
                                if (val != null && !(val.length === 0)) {
                                    var fVal = parseFloat(val);
                                    if (isFinite(fVal))
                                        return fVal
                                }
                            } catch (e) {}
                            return null
                        }
                        ;
                        RowFactory.getRowObj = function(elem, pRows) {
                            var rowType = elem.getAttribute("T");
                            var index = RowFactory.getIndex(elem);
                            var del = elem.getAttribute("Del");
                            if (!function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(del, "1")) {
                                var parentObj = null;
                                if (index <= pRows.length)
                                    parentObj = pRows[index - 1];
                                var x = null;
                                var y = null;
                                var a = null;
                                var b = null;
                                var c = null;
                                var d = null;
                                var formulaE = null;
                                var formulaA = null;
                                if (parentObj != null) {
                                    x = parentObj.x;
                                    y = parentObj.y;
                                    a = parentObj.getA();
                                    b = parentObj.getB();
                                    c = parentObj.getC();
                                    d = parentObj.getD();
                                    formulaA = parentObj.getFormulaA();
                                    formulaE = parentObj.getFormulaE()
                                }
                                var cells = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(elem);
                                for (var index121 = 0; index121 < cells.length; index121++) {
                                    var cell = cells[index121];
                                    {
                                        var name_1 = cell.getAttribute("N");
                                        var val = cell.getAttribute("V");
                                        switch (name_1) {
                                        case "X":
                                            x = RowFactory.getDoubleVal(val);
                                            break;
                                        case "Y":
                                            y = RowFactory.getDoubleVal(val);
                                            break;
                                        case "A":
                                            a = RowFactory.getDoubleVal(val);
                                            formulaA = cell.getAttribute("V");
                                            break;
                                        case "B":
                                            b = RowFactory.getDoubleVal(val);
                                            break;
                                        case "C":
                                            c = RowFactory.getDoubleVal(val);
                                            break;
                                        case "D":
                                            d = RowFactory.getDoubleVal(val);
                                            break;
                                        case "E":
                                            formulaE = val;
                                            break
                                        }
                                    }
                                }
                                switch (rowType) {
                                case "MoveTo":
                                    return new com.mxgraph.io.vsdx.geometry.MoveTo(index,x,y);
                                case "LineTo":
                                    return new com.mxgraph.io.vsdx.geometry.LineTo(index,x,y);
                                case "ArcTo":
                                    return new com.mxgraph.io.vsdx.geometry.ArcTo(index,x,y,a);
                                case "Ellipse":
                                    return new com.mxgraph.io.vsdx.geometry.Ellipse(index,x,y,a,b,c,d);
                                case "EllipticalArcTo":
                                    return new com.mxgraph.io.vsdx.geometry.EllipticalArcTo(index,x,y,a,b,c,d);
                                case "InfiniteLine":
                                    return new com.mxgraph.io.vsdx.geometry.InfiniteLine(index,x,y,a,b);
                                case "NURBSTo":
                                    return new com.mxgraph.io.vsdx.geometry.NURBSTo(index,x,y,a,b,c,d,formulaE);
                                case "PolylineTo":
                                    return new com.mxgraph.io.vsdx.geometry.PolylineTo(index,x,y,formulaA);
                                case "RelCubBezTo":
                                    return new com.mxgraph.io.vsdx.geometry.RelCubBezTo(index,x,y,a,b,c,d);
                                case "RelEllipticalArcTo":
                                    return new com.mxgraph.io.vsdx.geometry.RelEllipticalArcTo(index,x,y,a,b,c,d);
                                case "RelLineTo":
                                    return new com.mxgraph.io.vsdx.geometry.RelLineTo(index,x,y);
                                case "RelMoveTo":
                                    return new com.mxgraph.io.vsdx.geometry.RelMoveTo(index,x,y);
                                case "RelQuadBezTo":
                                    return new com.mxgraph.io.vsdx.geometry.RelQuadBezTo(index,x,y,a,b);
                                case "SplineKnot":
                                    return new com.mxgraph.io.vsdx.geometry.SplineKnot(index,x,y,a);
                                case "SplineStart":
                                    return new com.mxgraph.io.vsdx.geometry.SplineStart(index,x,y,a,b,c,d)
                                }
                            }
                            return new com.mxgraph.io.vsdx.geometry.DelRow(index)
                        }
                        ;
                        return RowFactory
                    }();
                    geometry.RowFactory = RowFactory;
                    RowFactory["__class"] = "com.mxgraph.io.vsdx.geometry.RowFactory"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxPropertiesManager = function() {
                    function mxPropertiesManager() {
                        this.colorElementMap = {};
                        this.fontElementMap = {}
                    }
                    mxPropertiesManager.__static_initialize = function() {
                        if (!mxPropertiesManager.__static_initialized) {
                            mxPropertiesManager.__static_initialized = true;
                            mxPropertiesManager.__static_initializer_0()
                        }
                    }
                    ;
                    mxPropertiesManager.defaultColors_$LI$ = function() {
                        mxPropertiesManager.__static_initialize();
                        if (mxPropertiesManager.defaultColors == null)
                            mxPropertiesManager.defaultColors = {};
                        return mxPropertiesManager.defaultColors
                    }
                    ;
                    mxPropertiesManager.__static_initializer_0 = function() {
                        mxPropertiesManager.defaultColors_$LI$()["0"] = "#000000";
                        mxPropertiesManager.defaultColors_$LI$()["1"] = "#FFFFFF";
                        mxPropertiesManager.defaultColors_$LI$()["2"] = "#FF0000";
                        mxPropertiesManager.defaultColors_$LI$()["3"] = "#00FF00";
                        mxPropertiesManager.defaultColors_$LI$()["4"] = "#0000FF";
                        mxPropertiesManager.defaultColors_$LI$()["5"] = "#FFFF00";
                        mxPropertiesManager.defaultColors_$LI$()["6"] = "#FF00FF";
                        mxPropertiesManager.defaultColors_$LI$()["7"] = "#00FFFF";
                        mxPropertiesManager.defaultColors_$LI$()["8"] = "#800000";
                        mxPropertiesManager.defaultColors_$LI$()["9"] = "#008000";
                        mxPropertiesManager.defaultColors_$LI$()["10"] = "#000080";
                        mxPropertiesManager.defaultColors_$LI$()["11"] = "#808000";
                        mxPropertiesManager.defaultColors_$LI$()["12"] = "#800080";
                        mxPropertiesManager.defaultColors_$LI$()["13"] = "#008080";
                        mxPropertiesManager.defaultColors_$LI$()["14"] = "#C0C0C0";
                        mxPropertiesManager.defaultColors_$LI$()["15"] = "#E6E6E6";
                        mxPropertiesManager.defaultColors_$LI$()["16"] = "#CDCDCD";
                        mxPropertiesManager.defaultColors_$LI$()["17"] = "#B3B3B3";
                        mxPropertiesManager.defaultColors_$LI$()["18"] = "#9A9A9A";
                        mxPropertiesManager.defaultColors_$LI$()["19"] = "#808080";
                        mxPropertiesManager.defaultColors_$LI$()["20"] = "#666666";
                        mxPropertiesManager.defaultColors_$LI$()["21"] = "#4D4D4D";
                        mxPropertiesManager.defaultColors_$LI$()["22"] = "#333333";
                        mxPropertiesManager.defaultColors_$LI$()["23"] = "#1A1A1A"
                    }
                    ;
                    mxPropertiesManager.prototype.initialise = function(elem, model) {
                        if (elem != null) {
                            var vdxColors = elem.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.COLORS);
                            if (vdxColors.length > 0) {
                                var colors = vdxColors.item(0);
                                var colorList = colors.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.COLOR_ENTRY);
                                var colorLength = colorList.length;
                                for (var i = 0; i < colorLength; i++) {
                                    var color = colorList.item(i);
                                    var colorId = color.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.INDEX);
                                    var colorValue = color.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.RGB);
                                    this.colorElementMap[colorId] = colorValue
                                }
                            }
                            var vdxFonts = elem.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.FACE_NAMES);
                            if (vdxFonts.length > 0) {
                                var fonts = vdxFonts.item(0);
                                var fontList = fonts.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.FACE_NAME);
                                var fontLength = fontList.length;
                                for (var i = 0; i < fontLength; i++) {
                                    var font = fontList.item(i);
                                    var fontId = font.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.ID);
                                    var fontValue = font.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.FONT_NAME);
                                    this.fontElementMap[fontId] = fontValue
                                }
                            }
                        }
                    }
                    ;
                    mxPropertiesManager.prototype.getColor = function(ix) {
                        var color = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.colorElementMap, ix);
                        if (color == null) {
                            color = function(m, k) {
                                return m[k] ? m[k] : null
                            }(mxPropertiesManager.defaultColors_$LI$(), ix);
                            if (color == null)
                                return ""
                        }
                        return color
                    }
                    ;
                    mxPropertiesManager.prototype.getFont = function(id) {
                        var font = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.fontElementMap, id);
                        if (font == null)
                            return "";
                        else
                            return font
                    }
                    ;
                    return mxPropertiesManager
                }();
                mxPropertiesManager.__static_initialized = false;
                vsdx.mxPropertiesManager = mxPropertiesManager;
                mxPropertiesManager["__class"] = "com.mxgraph.io.vsdx.mxPropertiesManager"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxVsdxConnect = function() {
                    function mxVsdxConnect(connectElem) {
                        this.fromSheet = null;
                        this.sourceToSheet = null;
                        this.sourceToPart = -1;
                        this.targetToSheet = null;
                        this.targetToPart = -1;
                        this.fromCell = null;
                        this.endShape = null;
                        var fromSheet = connectElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.FROM_SHEET);
                        this.fromSheet = fromSheet != null && !(fromSheet.length === 0) ? parseFloat(fromSheet) : -1;
                        var fromCell = connectElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.FROM_CELL);
                        this.addFromCell(connectElem, fromCell)
                    }
                    mxVsdxConnect.prototype.addFromCell = function(connectElem, fromCell) {
                        var toSheet = connectElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TO_SHEET);
                        var source = true;
                        if (fromCell != null && function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(fromCell, com.mxgraph.io.vsdx.mxVsdxConstants.BEGIN_X)) {
                            this.sourceToSheet = toSheet != null && !(toSheet.length === 0) ? parseFloat(toSheet) : -1;
                            source = true
                        } else if (fromCell != null && function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(fromCell, com.mxgraph.io.vsdx.mxVsdxConstants.END_X)) {
                            this.targetToSheet = toSheet != null && !(toSheet.length === 0) ? parseFloat(toSheet) : -1;
                            source = false
                        } else if (this.sourceToSheet == null) {
                            this.sourceToSheet = toSheet != null && !(toSheet.length === 0) ? parseFloat(toSheet) : -1;
                            source = true
                        } else if (this.targetToSheet == null) {
                            this.targetToSheet = toSheet != null && !(toSheet.length === 0) ? parseFloat(toSheet) : -1;
                            source = false
                        }
                        this.findToPart(connectElem, source)
                    }
                    ;
                    mxVsdxConnect.prototype.findToPart = function(connectElem, source) {
                        var toPartString = connectElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TO_PART);
                        var toPart = toPartString != null && !(toPartString.length === 0) ? parseFloat(toPartString) : -1;
                        if (source)
                            this.sourceToPart = toPart;
                        else
                            this.targetToPart = toPart
                    }
                    ;
                    mxVsdxConnect.prototype.getFromSheet = function() {
                        return this.fromSheet
                    }
                    ;
                    mxVsdxConnect.prototype.getSourceToSheet = function() {
                        return this.sourceToSheet
                    }
                    ;
                    mxVsdxConnect.prototype.getTargetToSheet = function() {
                        return this.targetToSheet
                    }
                    ;
                    mxVsdxConnect.prototype.getSourceToPart = function() {
                        return this.sourceToPart
                    }
                    ;
                    mxVsdxConnect.prototype.getTargetToPart = function() {
                        return this.targetToPart
                    }
                    ;
                    mxVsdxConnect.prototype.addConnect = function(connectElem) {
                        this.endShape = connectElem;
                        var fromCell = connectElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.FROM_CELL);
                        this.addFromCell(connectElem, fromCell)
                    }
                    ;
                    return mxVsdxConnect
                }();
                vsdx.mxVsdxConnect = mxVsdxConnect;
                mxVsdxConnect["__class"] = "com.mxgraph.io.vsdx.mxVsdxConnect"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxVsdxConstants = function() {
                    function mxVsdxConstants() {}
                    mxVsdxConstants.SET_VALUES_$LI$ = function() {
                        if (mxVsdxConstants.SET_VALUES == null)
                            mxVsdxConstants.SET_VALUES = ["a", "b"];
                        return mxVsdxConstants.SET_VALUES
                    }
                    ;
                    mxVsdxConstants.MY_SET_$LI$ = function() {
                        if (mxVsdxConstants.MY_SET == null)
                            mxVsdxConstants.MY_SET = mxVsdxConstants.SET_VALUES_$LI$().slice(0).slice(0);
                        return mxVsdxConstants.MY_SET
                    }
                    ;
                    return mxVsdxConstants
                }();
                mxVsdxConstants.ANGLE = "Angle";
                mxVsdxConstants.ARC_TO = "ArcTo";
                mxVsdxConstants.BACKGROUND = "Background";
                mxVsdxConstants.BACK_PAGE = "BackPage";
                mxVsdxConstants.BEGIN_ARROW = "BeginArrow";
                mxVsdxConstants.BEGIN_ARROW_SIZE = "BeginArrowSize";
                mxVsdxConstants.BEGIN_X = "BeginX";
                mxVsdxConstants.BEGIN_Y = "BeginY";
                mxVsdxConstants.BOTTOM_MARGIN = "BottomMargin";
                mxVsdxConstants.BULLET = "Bullet";
                mxVsdxConstants.CASE = "Case";
                mxVsdxConstants.CHARACTER = "Character";
                mxVsdxConstants.COLOR = "Color";
                mxVsdxConstants.COLOR_ENTRY = "ColorEntry";
                mxVsdxConstants.COLORS = "Colors";
                mxVsdxConstants.COLOR_TRANS = "ColorTrans";
                mxVsdxConstants.CONNECT = "Connect";
                mxVsdxConstants.CONNECTS = "Connects";
                mxVsdxConstants.CONNECTION = "Connection";
                mxVsdxConstants.CONTROL = "Control";
                mxVsdxConstants.DELETED = "Del";
                mxVsdxConstants.DOCUMENT_SHEET = "DocumentSheet";
                mxVsdxConstants.ELLIPSE = "Ellipse";
                mxVsdxConstants.ELLIPTICAL_ARC_TO = "EllipticalArcTo";
                mxVsdxConstants.END_ARROW = "EndArrow";
                mxVsdxConstants.END_ARROW_SIZE = "EndArrowSize";
                mxVsdxConstants.END_X = "EndX";
                mxVsdxConstants.END_Y = "EndY";
                mxVsdxConstants.FACE_NAME = "FaceName";
                mxVsdxConstants.FACE_NAMES = "FaceNames";
                mxVsdxConstants.FALSE = "0";
                mxVsdxConstants.FILL = "Fill";
                mxVsdxConstants.FILL_BKGND = "FillBkgnd";
                mxVsdxConstants.FILL_BKGND_TRANS = "FillBkgndTrans";
                mxVsdxConstants.FILL_FOREGND = "FillForegnd";
                mxVsdxConstants.FILL_FOREGND_TRANS = "FillForegndTrans";
                mxVsdxConstants.FILL_PATTERN = "FillPattern";
                mxVsdxConstants.FILL_STYLE = "FillStyle";
                mxVsdxConstants.FILL_GRADIENT_ENABLED = "FillGradientEnabled";
                mxVsdxConstants.FLAGS = "Flags";
                mxVsdxConstants.FLIP_X = "FlipX";
                mxVsdxConstants.FLIP_Y = "FlipY";
                mxVsdxConstants.FONT = "Font";
                mxVsdxConstants.FONT_NAME = "Name";
                mxVsdxConstants.FOREIGN = "Foreign";
                mxVsdxConstants.FROM_CELL = "FromCell";
                mxVsdxConstants.FROM_SHEET = "FromSheet";
                mxVsdxConstants.GEOM = "Geom";
                mxVsdxConstants.HEIGHT = "Height";
                mxVsdxConstants.HORIZONTAL_ALIGN = "HorzAlign";
                mxVsdxConstants.ID = "ID";
                mxVsdxConstants.INDENT_FIRST = "IndFirst";
                mxVsdxConstants.INDENT_LEFT = "IndLeft";
                mxVsdxConstants.INDENT_RIGHT = "IndRight";
                mxVsdxConstants.INDEX = "IX";
                mxVsdxConstants.LEFT_MARGIN = "LeftMargin";
                mxVsdxConstants.LETTER_SPACE = "Letterspace";
                mxVsdxConstants.LINE = "Line";
                mxVsdxConstants.LINE_COLOR = "LineColor";
                mxVsdxConstants.LINE_COLOR_TRANS = "LineColorTrans";
                mxVsdxConstants.LINE_PATTERN = "LinePattern";
                mxVsdxConstants.LINE_STYLE = "LineStyle";
                mxVsdxConstants.LINE_TO = "LineTo";
                mxVsdxConstants.LINE_WEIGHT = "LineWeight";
                mxVsdxConstants.LOC_PIN_X = "LocPinX";
                mxVsdxConstants.LOC_PIN_Y = "LocPinY";
                mxVsdxConstants.MASTER = "Master";
                mxVsdxConstants.MASTER_SHAPE = "MasterShape";
                mxVsdxConstants.MASTERS = "Masters";
                mxVsdxConstants.MOVE_TO = "MoveTo";
                mxVsdxConstants.NAME = "Name";
                mxVsdxConstants.NAME_U = "NameU";
                mxVsdxConstants.NO_LINE = "NoLine";
                mxVsdxConstants.NURBS_TO = "NURBSTo";
                mxVsdxConstants.PAGE = "Page";
                mxVsdxConstants.PAGE_HEIGHT = "PageHeight";
                mxVsdxConstants.PAGE_WIDTH = "PageWidth";
                mxVsdxConstants.PAGES = "Pages";
                mxVsdxConstants.PARAGRAPH = "Paragraph";
                mxVsdxConstants.PIN_X = "PinX";
                mxVsdxConstants.PIN_Y = "PinY";
                mxVsdxConstants.POS = "Pos";
                mxVsdxConstants.RGB = "RGB";
                mxVsdxConstants.RIGHT_MARGIN = "RightMargin";
                mxVsdxConstants.ROUNDING = "Rounding";
                mxVsdxConstants.RTL_TEXT = "RTLText";
                mxVsdxConstants.SIZE = "Size";
                mxVsdxConstants.SHAPE = "Shape";
                mxVsdxConstants.SHAPES = "Shapes";
                mxVsdxConstants.SHAPE_SHDW_SHOW = "ShapeShdwShow";
                mxVsdxConstants.SHDW_PATTERN = "ShdwPattern";
                mxVsdxConstants.SPACE_AFTER = "SpAfter";
                mxVsdxConstants.SPACE_BEFORE = "SpBefore";
                mxVsdxConstants.SPACE_LINE = "SpLine";
                mxVsdxConstants.STRIKETHRU = "Strikethru";
                mxVsdxConstants.STYLE = "Style";
                mxVsdxConstants.STYLE_SHEET = "StyleSheet";
                mxVsdxConstants.STYLE_SHEETS = "StyleSheets";
                mxVsdxConstants.TEXT = "Text";
                mxVsdxConstants.TEXT_BKGND = "TextBkgnd";
                mxVsdxConstants.TEXT_BLOCK = "TextBlock";
                mxVsdxConstants.TEXT_STYLE = "TextStyle";
                mxVsdxConstants.TO_PART = "ToPart";
                mxVsdxConstants.TO_SHEET = "ToSheet";
                mxVsdxConstants.TOP_MARGIN = "TopMargin";
                mxVsdxConstants.TRUE = "1";
                mxVsdxConstants.TXT_ANGLE = "TxtAngle";
                mxVsdxConstants.TXT_HEIGHT = "TxtHeight";
                mxVsdxConstants.TXT_LOC_PIN_X = "TxtLocPinX";
                mxVsdxConstants.TXT_LOC_PIN_Y = "TxtLocPinY";
                mxVsdxConstants.TXT_PIN_X = "TxtPinX";
                mxVsdxConstants.TXT_PIN_Y = "TxtPinY";
                mxVsdxConstants.TXT_WIDTH = "TxtWidth";
                mxVsdxConstants.TYPE = "Type";
                mxVsdxConstants.TYPE_GROUP = "Group";
                mxVsdxConstants.TYPE_SHAPE = "Shape";
                mxVsdxConstants.UNIQUE_ID = "UniqueID";
                mxVsdxConstants.VERTICAL_ALIGN = "VerticalAlign";
                mxVsdxConstants.WIDTH = "Width";
                mxVsdxConstants.X_CON = "XCon";
                mxVsdxConstants.X_DYN = "XDyn";
                mxVsdxConstants.X = "X";
                mxVsdxConstants.Y_CON = "YCon";
                mxVsdxConstants.Y_DYN = "YDyn";
                mxVsdxConstants.Y = "Y";
                mxVsdxConstants.HIDE_TEXT = "HideText";
                mxVsdxConstants.VSDX_ID = "vsdxID";
                mxVsdxConstants.CONNECT_TO_PART_WHOLE_SHAPE = 3;
                vsdx.mxVsdxConstants = mxVsdxConstants;
                mxVsdxConstants["__class"] = "com.mxgraph.io.vsdx.mxVsdxConstants"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxVsdxGeometry = function() {
                    function mxVsdxGeometry(elem, parentGeo) {
                        var _this = this;
                        this.noFill = false;
                        this.noLine = false;
                        this.noShow = false;
                        this.noSnap = false;
                        this.noQuickDrag = false;
                        this.rows = null;
                        if ((elem != null && elem.nodeType == 1 || elem === null) && (parentGeo != null && parentGeo instanceof Array || parentGeo === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            this.index = 0;
                            this.noFill = false;
                            this.noLine = false;
                            this.noShow = false;
                            this.noSnap = false;
                            this.noQuickDrag = false;
                            this.rows = null;
                            this.index = 0;
                            (function() {
                                _this.index = _this.getIndex$org_w3c_dom_Element(elem);
                                if (parentGeo != null && _this.index < parentGeo.length)
                                    _this.inheritGeo(parentGeo[_this.index]);
                                _this.processGeoElem(elem)
                            }
                            )()
                        } else if ((elem != null && elem.nodeType == 1 || elem === null) && parentGeo === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            this.index = 0;
                            this.noFill = false;
                            this.noLine = false;
                            this.noShow = false;
                            this.noSnap = false;
                            this.noQuickDrag = false;
                            this.rows = null;
                            this.index = 0;
                            (function() {
                                _this.index = _this.getIndex$org_w3c_dom_Element(elem);
                                _this.processGeoElem(elem)
                            }
                            )()
                        } else
                            throw new Error("invalid overload");
                    }
                    mxVsdxGeometry.prototype.getIndex$org_w3c_dom_Element = function(elem) {
                        try {
                            return parseInt(elem.getAttribute("IX"))
                        } catch (e) {
                            return 0
                        }
                    }
                    ;
                    mxVsdxGeometry.prototype.getIndex = function(elem) {
                        if (elem != null && elem.nodeType == 1 || elem === null)
                            return this.getIndex$org_w3c_dom_Element(elem);
                        else if (elem === undefined)
                            return this.getIndex$();
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    mxVsdxGeometry.prototype.processGeoElem = function(elem) {
                        var cellElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(elem, "Cell");
                        var rowElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(elem, "Row");
                        if (this.rows == null) {
                            this.rows = [];
                            for (var i = 0; i < rowElems.length; i++)
                                this.rows.push(null) > 0
                        }
                        for (var index122 = 0; index122 < cellElems.length; index122++) {
                            var cellElem = cellElems[index122];
                            {
                                var name_2 = cellElem.getAttribute("N");
                                var val = cellElem.getAttribute("V");
                                switch (name_2) {
                                case "NoFill":
                                    this.noFill = function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }("1", val);
                                    break;
                                case "NoLine":
                                    this.noLine = function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }("1", val);
                                    break;
                                case "NoShow":
                                    this.noShow = function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }("1", val);
                                    break;
                                case "NoSnap":
                                    this.noSnap = function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }("1", val);
                                    break;
                                case "NoQuickDrag":
                                    this.noQuickDrag = function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }("1", val);
                                    break
                                }
                            }
                        }
                        var rowsLen = this.rows.length;
                        var sortNeeded = false;
                        for (var index123 = 0; index123 < rowElems.length; index123++) {
                            var rowElem = rowElems[index123];
                            {
                                var row = com.mxgraph.io.vsdx.geometry.RowFactory.getRowObj(rowElem, this.rows);
                                if (row.getIndex() > rowsLen) {
                                    this.rows.push(row) > 0;
                                    sortNeeded = true
                                } else
                                    this.rows[row.getIndex() - 1] = row
                            }
                        }
                        if (sortNeeded)
                            (function(l, c) {
                                if (c.compare)
                                    l.sort(function(e1, e2) {
                                        return c.compare(e1, e2)
                                    });
                                else
                                    l.sort(c)
                            }
                            )(this.rows, new mxVsdxGeometry.mxVsdxGeometry$0(this))
                    }
                    ;
                    mxVsdxGeometry.prototype.inheritGeo = function(parent) {
                        this.noFill = parent.noFill;
                        this.noLine = parent.noLine;
                        this.noShow = parent.noShow;
                        this.noSnap = parent.noSnap;
                        this.noQuickDrag = parent.noQuickDrag;
                        this.rows = [];
                        (function(l1, l2) {
                            return l1.push.apply(l1, l2)
                        }
                        )(this.rows, parent.rows)
                    }
                    ;
                    mxVsdxGeometry.prototype.getIndex$ = function() {
                        return this.index
                    }
                    ;
                    mxVsdxGeometry.prototype.isNoFill = function() {
                        return this.noFill
                    }
                    ;
                    mxVsdxGeometry.prototype.isNoLine = function() {
                        return this.noLine
                    }
                    ;
                    mxVsdxGeometry.prototype.isNoShow = function() {
                        return this.noShow
                    }
                    ;
                    mxVsdxGeometry.prototype.isNoSnap = function() {
                        return this.noSnap
                    }
                    ;
                    mxVsdxGeometry.prototype.isNoQuickDrag = function() {
                        return this.noQuickDrag
                    }
                    ;
                    mxVsdxGeometry.prototype.getRows = function() {
                        return this.rows
                    }
                    ;
                    mxVsdxGeometry.prototype.getPathXML = function(p, shape) {
                        if (this.noShow)
                            return "";
                        var geomElemParsed = {
                            str: "",
                            toString: function() {
                                return this.str
                            }
                        };
                        var _loop_1 = function(index124) {
                            var row = this_1.rows[index124];
                            {
                                (function(sb) {
                                    return sb.str = sb.str.concat(row.handle(p, shape))
                                }
                                )(geomElemParsed)
                            }
                        };
                        var this_1 = this;
                        for (var index124 = 0; index124 < this.rows.length; index124++)
                            _loop_1(index124);
                        return geomElemParsed.str
                    }
                    ;
                    return mxVsdxGeometry
                }();
                vsdx.mxVsdxGeometry = mxVsdxGeometry;
                mxVsdxGeometry["__class"] = "com.mxgraph.io.vsdx.mxVsdxGeometry";
                (function(mxVsdxGeometry) {
                    var mxVsdxGeometry$0 = function() {
                        function mxVsdxGeometry$0(__parent) {
                            this.__parent = __parent
                        }
                        mxVsdxGeometry$0.prototype.compare = function(r1, r2) {
                            return r1.getIndex() - r2.getIndex()
                        }
                        ;
                        return mxVsdxGeometry$0
                    }();
                    mxVsdxGeometry.mxVsdxGeometry$0 = mxVsdxGeometry$0;
                    mxVsdxGeometry$0["__interfaces"] = ["java.util.Comparator"]
                }
                )(mxVsdxGeometry = vsdx.mxVsdxGeometry || (vsdx.mxVsdxGeometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxVsdxGeometryList = function() {
                    function mxVsdxGeometryList(parentGeoList) {
                        this.geomList = [];
                        this.parentGeomList = null;
                        this.sortNeeded = false;
                        if (parentGeoList != null) {
                            this.parentGeomList = parentGeoList.geomList;
                            (function(l1, l2) {
                                return l1.push.apply(l1, l2)
                            }
                            )(this.geomList, parentGeoList.geomList)
                        }
                    }
                    mxVsdxGeometryList.prototype.addGeometry = function(geoElem) {
                        var geo = new com.mxgraph.io.vsdx.mxVsdxGeometry(geoElem,this.parentGeomList);
                        if (geo.getIndex() < this.geomList.length)
                            this.geomList[geo.getIndex()] = geo;
                        else {
                            this.geomList.push(geo) > 0;
                            this.sortNeeded = true
                        }
                    }
                    ;
                    mxVsdxGeometryList.prototype.sort = function() {
                        if (this.sortNeeded) {
                            (function(l, c) {
                                if (c.compare)
                                    l.sort(function(e1, e2) {
                                        return c.compare(e1, e2)
                                    });
                                else
                                    l.sort(c)
                            }
                            )(this.geomList, new mxVsdxGeometryList.mxVsdxGeometryList$0(this));
                            this.sortNeeded = false
                        }
                    }
                    ;
                    mxVsdxGeometryList.prototype.isNoShow = function() {
                        for (var index125 = 0; index125 < this.geomList.length; index125++) {
                            var geo = this.geomList[index125];
                            {
                                if (!geo.isNoShow())
                                    return false
                            }
                        }
                        return true
                    }
                    ;
                    mxVsdxGeometryList.prototype.isNoFill = function() {
                        for (var index126 = 0; index126 < this.geomList.length; index126++) {
                            var geo = this.geomList[index126];
                            {
                                if (!(geo.isNoShow() || geo.isNoFill()))
                                    return false
                            }
                        }
                        return true
                    }
                    ;
                    mxVsdxGeometryList.prototype.isNoLine = function() {
                        for (var index127 = 0; index127 < this.geomList.length; index127++) {
                            var geo = this.geomList[index127];
                            {
                                if (!(geo.isNoShow() || geo.isNoLine()))
                                    return false
                            }
                        }
                        return true
                    }
                    ;
                    mxVsdxGeometryList.prototype.hasGeom = function() {
                        return !(this.geomList.length == 0)
                    }
                    ;
                    mxVsdxGeometryList.prototype.getGeoCount = function() {
                        var count = 0;
                        for (var i = 0; i < this.geomList.length; i++)
                            if (!this.geomList[i].isNoShow())
                                count++;
                        return count
                    }
                    ;
                    mxVsdxGeometryList.prototype.rotatedPoint = function(pt, cos, sin) {
                        var x1 = pt.x * cos - pt.y * sin;
                        var y1 = pt.y * cos + pt.x * sin;
                        pt.x = x1;
                        pt.y = y1
                    }
                    ;
                    mxVsdxGeometryList.prototype.getRoutingPoints = function(parentHeight, startPoint, rotation) {
                        this.sort();
                        var points = [];
                        points.push(startPoint.clone()) > 0;
                        var offsetX = 0;
                        var offsetY = 0;
                        for (var index128 = 0; index128 < this.geomList.length; index128++) {
                            var geo = this.geomList[index128];
                            {
                                if (!geo.isNoShow()) {
                                    var rows = geo.getRows();
                                    for (var index129 = 0; index129 < rows.length; index129++) {
                                        var row = rows[index129];
                                        {
                                            if (index129 == 0 && row != null && row instanceof com.mxgraph.io.vsdx.geometry.MoveTo) {
                                                offsetX = row.x != null ? row.x : 0;
                                                offsetY = row.y != null ? row.y : 0
                                            } else if (row != null && row instanceof com.mxgraph.io.vsdx.geometry.LineTo) {
                                                var x = row.x != null ? row.x : 0;
                                                var y = row.y != null ? row.y : 0;
                                                var p = new mxPoint(x,y);
                                                if (rotation !== 0) {
                                                    rotation = function(x) {
                                                        return x * Math.PI / 180
                                                    }(360 - rotation);
                                                    this.rotatedPoint(p, Math.cos(rotation), Math.sin(rotation))
                                                }
                                                x = (p.x - offsetX) * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                                x += startPoint.x;
                                                y = (p.y - offsetY) * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$() * -1;
                                                y += startPoint.y;
                                                x = Math.round(x * 100) / 100;
                                                y = Math.round(y * 100) / 100;
                                                p.x = x;
                                                p.y = y;
                                                points.push(p) > 0
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return points
                    }
                    ;
                    mxVsdxGeometryList.prototype.getShapeXML = function(shape) {
                        var p = new mxPoint(0,0);
                        var parsedGeom = {
                            str: '<shape strokewidth="inherit"><foreground>',
                            toString: function() {
                                return this.str
                            }
                        };
                        var initSize = parsedGeom.str.length;
                        var lastGeoStyle = -1;
                        lastGeoStyle = this.processGeo(shape, p, parsedGeom, lastGeoStyle, true);
                        lastGeoStyle = this.processGeo(shape, p, parsedGeom, lastGeoStyle, false);
                        if (parsedGeom.str.length === initSize)
                            return "";
                        else
                            this.closePath(parsedGeom, lastGeoStyle);
                        (function(sb) {
                            return sb.str = sb.str.concat("</foreground></shape>")
                        }
                        )(parsedGeom);
                        return parsedGeom.str
                    }
                    ;
                    mxVsdxGeometryList.prototype.processGeo = function(shape, p, parsedGeom, lastGeoStyle, withFill) {
                        var _loop_2 = function(index130) {
                            var geo = this_2.geomList[index130];
                            {
                                if (withFill === geo.isNoFill())
                                    return "continue";
                                var str_1 = geo.getPathXML(p, shape);
                                if (!(str_1.length === 0)) {
                                    var geoStyle = this_2.getGeoStyle(geo);
                                    if (lastGeoStyle === -1) {
                                        (function(sb) {
                                            return sb.str = sb.str.concat("<path>")
                                        }
                                        )(parsedGeom);
                                        (function(sb) {
                                            return sb.str = sb.str.concat(str_1)
                                        }
                                        )(parsedGeom)
                                    } else if (lastGeoStyle !== geoStyle) {
                                        this_2.closePath(parsedGeom, lastGeoStyle);
                                        (function(sb) {
                                            return sb.str = sb.str.concat("<path>")
                                        }
                                        )(parsedGeom);
                                        (function(sb) {
                                            return sb.str = sb.str.concat(str_1)
                                        }
                                        )(parsedGeom)
                                    } else
                                        (function(sb) {
                                            return sb.str = sb.str.concat(str_1)
                                        }
                                        )(parsedGeom);
                                    lastGeoStyle = geoStyle
                                }
                            }
                        };
                        var this_2 = this;
                        for (var index130 = 0; index130 < this.geomList.length; index130++)
                            _loop_2(index130);
                        return lastGeoStyle
                    }
                    ;
                    mxVsdxGeometryList.prototype.getGeoStyle = function(geo) {
                        var geoStyle = 0;
                        if (!geo.isNoLine() && !geo.isNoFill())
                            geoStyle = 1;
                        else if (!geo.isNoFill())
                            geoStyle = 2;
                        else if (!geo.isNoLine())
                            geoStyle = 3;
                        return geoStyle
                    }
                    ;
                    mxVsdxGeometryList.prototype.closePath = function(parsedGeom, geoStyle) {
                        (function(sb) {
                            return sb.str = sb.str.concat("</path>")
                        }
                        )(parsedGeom);
                        if (geoStyle === 1)
                            (function(sb) {
                                return sb.str = sb.str.concat("<fillstroke/>")
                            }
                            )(parsedGeom);
                        else if (geoStyle === 2)
                            (function(sb) {
                                return sb.str = sb.str.concat("<fill/>")
                            }
                            )(parsedGeom);
                        else if (geoStyle === 3)
                            (function(sb) {
                                return sb.str = sb.str.concat("<stroke/>")
                            }
                            )(parsedGeom)
                    }
                    ;
                    return mxVsdxGeometryList
                }();
                vsdx.mxVsdxGeometryList = mxVsdxGeometryList;
                mxVsdxGeometryList["__class"] = "com.mxgraph.io.vsdx.mxVsdxGeometryList";
                (function(mxVsdxGeometryList) {
                    var mxVsdxGeometryList$0 = function() {
                        function mxVsdxGeometryList$0(__parent) {
                            this.__parent = __parent
                        }
                        mxVsdxGeometryList$0.prototype.compare = function(g1, g2) {
                            return g1.getIndex() - g2.getIndex()
                        }
                        ;
                        return mxVsdxGeometryList$0
                    }();
                    mxVsdxGeometryList.mxVsdxGeometryList$0 = mxVsdxGeometryList$0;
                    mxVsdxGeometryList$0["__interfaces"] = ["java.util.Comparator"]
                }
                )(mxVsdxGeometryList = vsdx.mxVsdxGeometryList || (vsdx.mxVsdxGeometryList = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxVsdxMaster = function() {
                    function mxVsdxMaster(m, model) {
                        this.Id = null;
                        this.masterShape = null;
                        this.childShapes = {};
                        this.master = null;
                        this.master = m;
                        this.Id = m.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.ID) || "";
                        this.processMasterShapes(model)
                    }
                    mxVsdxMaster.prototype.processMasterShapes = function(model) {
                        var child = this.master.firstChild;
                        while (child != null) {
                            if (child != null && child.nodeType == 1 && function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(child.nodeName, "Rel")) {
                                var relElem = model.getRelationship(child.getAttribute("r:id"), com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder + "/masters/_rels/masters.xml.rels");
                                var target = relElem.getAttribute("Target");
                                var type = relElem.getAttribute("Type");
                                var masterDoc = null;
                                if (type != null && function(str, searchString) {
                                    var pos = str.length - searchString.length;
                                    var lastIndex = str.indexOf(searchString, pos);
                                    return lastIndex !== -1 && lastIndex === pos
                                }(type, "master"))
                                    masterDoc = model.getXmlDoc(com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder + "/masters/" + target);
                                if (masterDoc != null) {
                                    var masterChild = masterDoc.firstChild;
                                    while (masterChild != null) {
                                        if (masterChild != null && masterChild.nodeType == 1 && function(o1, o2) {
                                            if (o1 && o1.equals)
                                                return o1.equals(o2);
                                            else
                                                return o1 === o2
                                        }(masterChild.nodeName, "MasterContents")) {
                                            this.processMasterShape(masterChild, model);
                                            break
                                        }
                                        masterChild = masterChild.nextSibling
                                    }
                                }
                            } else if (child.nodeType == 1 && child.nodeName == "PageSheet") {
                                this.pageSheet = {};
                                var cells = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(child, "Cell");
                                for (var i = 0; i < cells.length; i++)
                                    this.pageSheet[cells[i].getAttribute("N")] = cells[i]
                            }
                            child = child.nextSibling
                        }
                    }
                    ;
                    mxVsdxMaster.prototype.processMasterShape = function(shapeElem, model) {
                        var shapeChild = shapeElem.firstChild;
                        while (shapeChild != null) {
                            if (shapeChild != null && shapeChild.nodeType == 1 && function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(shapeChild.nodeName, "Shapes")) {
                                var shapesChild = shapeChild.firstChild;
                                while (shapesChild != null) {
                                    if (shapesChild != null && shapesChild.nodeType == 1 && function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(shapesChild.nodeName, "Shape")) {
                                        var shape = shapesChild;
                                        var shapeId = shape.getAttribute("ID");
                                        var masterShape = new com.mxgraph.io.vsdx.Shape(shape,model);
                                        this.masterShape = this.masterShape == null ? masterShape : this.masterShape;
                                        this.childShapes[shapeId] = masterShape;
                                        this.processMasterShape(shape, model)
                                    }
                                    shapesChild = shapesChild.nextSibling
                                }
                                break
                            }
                            shapeChild = shapeChild.nextSibling
                        }
                    }
                    ;
                    mxVsdxMaster.prototype.getMasterShape = function() {
                        return this.masterShape
                    }
                    ;
                    mxVsdxMaster.prototype.getSubShape = function(id) {
                        return function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.childShapes, id)
                    }
                    ;
                    mxVsdxMaster.prototype.getNameU = function() {
                        return this.master.getAttribute("NameU") || ""
                    }
                    ;
                    mxVsdxMaster.prototype.getName = function() {
                        return this.master.getAttribute("Name") || ""
                    }
                    ;
                    mxVsdxMaster.prototype.getUniqueID = function() {
                        var uniqueID = "";
                        if (this.master.hasAttribute("UniqueID"))
                            uniqueID = this.master.getAttribute("UniqueID");
                        return uniqueID
                    }
                    ;
                    mxVsdxMaster.prototype.getId = function() {
                        return this.Id
                    }
                    ;
                    mxVsdxMaster.prototype.getMasterElement = function() {
                        return this.master
                    }
                    ;
                    return mxVsdxMaster
                }();
                vsdx.mxVsdxMaster = mxVsdxMaster;
                mxVsdxMaster["__class"] = "com.mxgraph.io.vsdx.mxVsdxMaster"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxVsdxModel = function() {
                    function mxVsdxModel(doc, docData, mediaData) {
                        this.xmlDocs = null;
                        this.media = null;
                        this.pages = null;
                        this.masters = {};
                        this.stylesheets = {};
                        this.themes = {};
                        this.rootElement = null;
                        this.pm = null;
                        this.xmlDocs = docData;
                        this.media = mediaData;
                        var childNode = doc.firstChild;
                        while (childNode != null) {
                            if (childNode != null && childNode.nodeType == 1 && function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(childNode.tagName.toLowerCase(), com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder + "document")) {
                                this.rootElement = childNode;
                                break
                            }
                            childNode = childNode.nextSibling
                        }
                        this.pm = new com.mxgraph.io.vsdx.mxPropertiesManager;
                        this.pm.initialise(this.rootElement, this);
                        this.initStylesheets();
                        this.initThemes();
                        this.initMasters();
                        this.initPages()
                    }
                    mxVsdxModel.prototype.initThemes = function() {
                        if (this.xmlDocs != null) {
                            var more = true;
                            var index = 1;
                            while (more) {
                                var path = com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder + "/theme/theme" + index + ".xml";
                                var themeDoc = function(m, k) {
                                    return m[k] ? m[k] : null
                                }(this.xmlDocs, path);
                                if (themeDoc != null) {
                                    var child = themeDoc.firstChild;
                                    while (child != null) {
                                        if (child != null && child.nodeType == 1 && function(o1, o2) {
                                            if (o1 && o1.equals)
                                                return o1.equals(o2);
                                            else
                                                return o1 === o2
                                        }(child.tagName, "a:theme")) {
                                            var theme_1 = new com.mxgraph.io.vsdx.mxVsdxTheme(child);
                                            if (theme_1.getThemeIndex() < 0)
                                                theme_1.processTheme();
                                            var existingTheme = function(m, k) {
                                                if (m.entries == null)
                                                    m.entries = [];
                                                for (var i = 0; i < m.entries.length; i++)
                                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                                        return m.entries[i].value;
                                                return null
                                            }(this.themes, theme_1.getThemeIndex());
                                            if (existingTheme == null || !existingTheme.isPure())
                                                (function(m, k, v) {
                                                    if (m.entries == null)
                                                        m.entries = [];
                                                    for (var i = 0; i < m.entries.length; i++)
                                                        if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                                            m.entries[i].value = v;
                                                            return
                                                        }
                                                    m.entries.push({
                                                        key: k,
                                                        value: v,
                                                        getKey: function() {
                                                            return this.key
                                                        },
                                                        getValue: function() {
                                                            return this.value
                                                        }
                                                    })
                                                }
                                                )(this.themes, theme_1.getThemeIndex(), theme_1);
                                            break
                                        }
                                        child = child.nextSibling
                                    }
                                    index++
                                } else
                                    more = false
                            }
                        }
                    }
                    ;
                    mxVsdxModel.prototype.initStylesheets = function() {
                        var vdxSheets = this.rootElement.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.STYLE_SHEETS);
                        if (vdxSheets.length > 0) {
                            var sheets_1 = vdxSheets.item(0);
                            var sheetList = sheets_1.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.STYLE_SHEET);
                            var sheetLength = sheetList.length;
                            for (var i = 0; i < sheetLength; i++) {
                                var sheet = sheetList.item(i);
                                var sheetId = sheet.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.ID);
                                var sheetElement = new com.mxgraph.io.vsdx.Style(sheet,this);
                                this.stylesheets[sheetId] = sheetElement
                            }
                        }
                        var sheets = function(obj) {
                            return Object.keys(obj).map(function(key) {
                                return obj[key]
                            })
                        }(this.stylesheets);
                        var iter = function(a) {
                            var i = 0;
                            return {
                                next: function() {
                                    return i < a.length ? a[i++] : null
                                },
                                hasNext: function() {
                                    return i < a.length
                                }
                            }
                        }(sheets);
                        while (iter.hasNext()) {
                            var sheet = iter.next();
                            sheet.stylesheetRefs(this)
                        }
                    }
                    ;
                    mxVsdxModel.prototype.initMasters = function() {
                        if (this.xmlDocs != null) {
                            var path = com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder + "/masters/masters.xml";
                            var masterDoc = function(m, k) {
                                return m[k] ? m[k] : null
                            }(this.xmlDocs, path);
                            if (masterDoc != null) {
                                var child = masterDoc.firstChild;
                                while (child != null) {
                                    if (child != null && child.nodeType == 1 && function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(child.tagName, com.mxgraph.io.vsdx.mxVsdxConstants.MASTERS)) {
                                        var grandChild = child.firstChild;
                                        while (grandChild != null) {
                                            if (grandChild != null && grandChild.nodeType == 1 && function(o1, o2) {
                                                if (o1 && o1.equals)
                                                    return o1.equals(o2);
                                                else
                                                    return o1 === o2
                                            }(grandChild.tagName, "Master")) {
                                                var masterElement = grandChild;
                                                var master = new com.mxgraph.io.vsdx.mxVsdxMaster(masterElement,this);
                                                this.masters[master.getId()] = master
                                            }
                                            grandChild = grandChild.nextSibling
                                        }
                                        break
                                    }
                                    child = child.nextSibling
                                }
                            }
                        }
                    }
                    ;
                    mxVsdxModel.prototype.initPages = function() {
                        if (this.xmlDocs != null) {
                            var path = com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder + "/pages/pages.xml";
                            var pageDoc = function(m, k) {
                                return m[k] ? m[k] : null
                            }(this.xmlDocs, path);
                            if (pageDoc != null) {
                                var child = pageDoc.firstChild;
                                while (child != null) {
                                    if (child != null && child.nodeType == 1 && function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(child.tagName, com.mxgraph.io.vsdx.mxVsdxConstants.PAGES)) {
                                        var pages = child;
                                        var pageList = pages.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.PAGE);
                                        if (pageList != null && pageList.length > 0) {
                                            this.pages = {};
                                            var backgroundMap = {};
                                            var pageListLen = pageList.length;
                                            for (var i = 0; i < pageListLen; i++) {
                                                var pageEle = pageList.item(i);
                                                var page = this.createPage(pageEle);
                                                if (page.isBackground())
                                                    (function(m, k, v) {
                                                        if (m.entries == null)
                                                            m.entries = [];
                                                        for (var i_1 = 0; i_1 < m.entries.length; i_1++)
                                                            if (m.entries[i_1].key.equals != null && m.entries[i_1].key.equals(k) || m.entries[i_1].key === k) {
                                                                m.entries[i_1].value = v;
                                                                return
                                                            }
                                                        m.entries.push({
                                                            key: k,
                                                            value: v,
                                                            getKey: function() {
                                                                return this.key
                                                            },
                                                            getValue: function() {
                                                                return this.value
                                                            }
                                                        })
                                                    }
                                                    )(backgroundMap, page.getId(), page);
                                                (function(m, k, v) {
                                                    if (m.entries == null)
                                                        m.entries = [];
                                                    for (var i_2 = 0; i_2 < m.entries.length; i_2++)
                                                        if (m.entries[i_2].key.equals != null && m.entries[i_2].key.equals(k) || m.entries[i_2].key === k) {
                                                            m.entries[i_2].value = v;
                                                            return
                                                        }
                                                    m.entries.push({
                                                        key: k,
                                                        value: v,
                                                        getKey: function() {
                                                            return this.key
                                                        },
                                                        getValue: function() {
                                                            return this.value
                                                        }
                                                    })
                                                }
                                                )(this.pages, page.getId(), page)
                                            }
                                            {
                                                var array132 = function(m) {
                                                    if (m.entries == null)
                                                        m.entries = [];
                                                    return m.entries
                                                }(this.pages);
                                                for (var index131 = 0; index131 < array132.length; index131++) {
                                                    var entry = array132[index131];
                                                    {
                                                        var page = entry.getValue();
                                                        if (!page.isBackground()) {
                                                            var backId = page.getBackPageId();
                                                            if (backId != null) {
                                                                var background = function(m, k) {
                                                                    if (m.entries == null)
                                                                        m.entries = [];
                                                                    for (var i = 0; i < m.entries.length; i++)
                                                                        if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                                                            return m.entries[i].value;
                                                                    return null
                                                                }(backgroundMap, backId);
                                                                page.setBackPage(background)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        break
                                    }
                                    child = child.nextSibling
                                }
                            }
                        }
                    }
                    ;
                    mxVsdxModel.prototype.getPages = function() {
                        return this.pages
                    }
                    ;
                    mxVsdxModel.prototype.getThemes = function() {
                        return this.themes
                    }
                    ;
                    mxVsdxModel.prototype.getRelationship = function(rid, path) {
                        var relsDoc = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.xmlDocs, path);
                        if (relsDoc == null || rid == null || rid.length === 0)
                            return null;
                        var rels = relsDoc.getElementsByTagName("Relationship");
                        for (var i = 0; i < rels.length; i++) {
                            var currElem = rels.item(i);
                            var id = currElem.getAttribute("Id");
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(id, rid))
                                return currElem
                        }
                        return null
                    }
                    ;
                    mxVsdxModel.prototype.getMaster = function(masterId) {
                        return function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.masters, masterId)
                    }
                    ;
                    mxVsdxModel.prototype.createPage = function(pageEle) {
                        return new com.mxgraph.io.vsdx.mxVsdxPage(pageEle,this)
                    }
                    ;
                    mxVsdxModel.prototype.getPropertiesManager = function() {
                        return this.pm
                    }
                    ;
                    mxVsdxModel.prototype.setPropertiesManager = function(pm) {
                        this.pm = pm
                    }
                    ;
                    mxVsdxModel.prototype.getMasterShapes = function() {
                        return this.masters
                    }
                    ;
                    mxVsdxModel.prototype.setMasterShapes = function(mm) {
                        this.masters = mm
                    }
                    ;
                    mxVsdxModel.prototype.getStylesheet = function(id) {
                        return function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.stylesheets, id)
                    }
                    ;
                    mxVsdxModel.prototype.getXmlDoc = function(path) {
                        return function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.xmlDocs, path)
                    }
                    ;
                    mxVsdxModel.prototype.getMedia = function(path) {
                        return function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.media, path)
                    }
                    ;
                    return mxVsdxModel
                }();
                vsdx.mxVsdxModel = mxVsdxModel;
                mxVsdxModel["__class"] = "com.mxgraph.io.vsdx.mxVsdxModel"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxVsdxPage = function() {
                    function mxVsdxPage(pageElem, model) {
                        this.Id = null;
                        this.pageName = null;
                        this.__isBackground = false;
                        this.backPageId = null;
                        this.backPage = null;
                        this.pageElement = null;
                        this.pageSheet = null;
                        this.model = null;
                        this.shapes = {};
                        this.connects = {};
                        this.cellElements = {};
                        this.model = model;
                        this.pageElement = pageElem;
                        this.layers = [];
                        var backGround = pageElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.BACKGROUND);
                        this.__isBackground = backGround != null && function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(backGround, com.mxgraph.io.vsdx.mxVsdxConstants.TRUE) ? true : false;
                        var back = pageElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.BACK_PAGE);
                        if (!this.__isBackground && back != null && back.length > 0)
                            this.backPageId = parseFloat(back);
                        this.Id = parseFloat(pageElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.ID));
                        this.pageName = pageElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.NAME) || "";
                        var pageSheets = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(pageElem, "PageSheet");
                        if (pageSheets.length > 0) {
                            var pageSheet = pageSheets[0];
                            var cells = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(pageSheet, "Cell");
                            for (var index133 = 0; index133 < cells.length; index133++) {
                                var cellElem = cells[index133];
                                {
                                    var n = cellElem.getAttribute("N");
                                    this.cellElements[n] = cellElem
                                }
                            }
                            var sections = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(pageSheet, "Section");
                            for (var i134 = 0; i134 < sections.length; i134++) {
                                var secElem = sections[i134];
                                var n = secElem.getAttribute("N");
                                if (n == "Layer") {
                                    var layers = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(secElem, "Row");
                                    for (var i135 = 0; i135 < layers.length; i135++) {
                                        var layerAtts = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(layers[i135], "Cell");
                                        var layerObj = {};
                                        for (var i136 = 0; i136 < layerAtts.length; i136++)
                                            layerObj[layerAtts[i136].getAttribute("N")] = layerAtts[i136].getAttribute("V");
                                        this.layers[parseInt(layers[i135].getAttribute("IX"))] = layerObj
                                    }
                                }
                            }
                        }
                        this.parseNodes(pageElem, model, "pages")
                    }
                    mxVsdxPage.prototype.parseNodes = function(pageElem, model, pageName) {
                        var pageChild = pageElem.firstChild;
                        while (pageChild != null) {
                            if (pageChild != null && pageChild.nodeType == 1) {
                                var pageChildElem = pageChild;
                                var childName = pageChildElem.nodeName;
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(childName, "Rel"))
                                    this.resolveRel(pageChildElem, model, pageName);
                                else if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(childName, "Shapes"))
                                    this.shapes = this.parseShapes(pageChildElem, null, false);
                                else if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(childName, "Connects")) {
                                    var connectList = pageChildElem.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.CONNECT);
                                    var connectNode = connectList != null && connectList.length > 0 ? connectList.item(0) : null;
                                    while (connectNode != null) {
                                        if (connectNode != null && connectNode.nodeType == 1) {
                                            var connectElem = connectNode;
                                            var connect = new com.mxgraph.io.vsdx.mxVsdxConnect(connectElem);
                                            var fromSheet = connect.getFromSheet();
                                            var previousConnect = fromSheet != null && fromSheet > -1 ? function(m, k) {
                                                if (m.entries == null)
                                                    m.entries = [];
                                                for (var i = 0; i < m.entries.length; i++)
                                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                                        return m.entries[i].value;
                                                return null
                                            }(this.connects, fromSheet) : null;
                                            if (previousConnect != null)
                                                previousConnect.addConnect(connectElem);
                                            else
                                                (function(m, k, v) {
                                                    if (m.entries == null)
                                                        m.entries = [];
                                                    for (var i = 0; i < m.entries.length; i++)
                                                        if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                                            m.entries[i].value = v;
                                                            return
                                                        }
                                                    m.entries.push({
                                                        key: k,
                                                        value: v,
                                                        getKey: function() {
                                                            return this.key
                                                        },
                                                        getValue: function() {
                                                            return this.value
                                                        }
                                                    })
                                                }
                                                )(this.connects, connect.getFromSheet(), connect)
                                        }
                                        connectNode = connectNode.nextSibling
                                    }
                                } else if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(childName, "PageSheet"))
                                    this.pageSheet = pageChildElem
                            }
                            pageChild = pageChild.nextSibling
                        }
                    }
                    ;
                    mxVsdxPage.prototype.resolveRel = function(relNode, model, pageName) {
                        var relElem = model.getRelationship(relNode.getAttribute("r:id"), com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder + "/pages/_rels/" + pageName + ".xml.rels");
                        var target = relElem.getAttribute("Target");
                        var type = relElem.getAttribute("Type");
                        if (function(str, searchString) {
                            var pos = str.length - searchString.length;
                            var lastIndex = str.indexOf(searchString, pos);
                            return lastIndex !== -1 && lastIndex === pos
                        }((new String(type)).toString(), "page")) {
                            var pageDoc = null;
                            if (type != null && function(str, searchString) {
                                var pos = str.length - searchString.length;
                                var lastIndex = str.indexOf(searchString, pos);
                                return lastIndex !== -1 && lastIndex === pos
                            }(type, "page"))
                                pageDoc = model.getXmlDoc(com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder + "/pages/" + target);
                            if (pageDoc != null) {
                                var child = pageDoc.firstChild;
                                while (child != null) {
                                    if (child != null && child.nodeType == 1 && function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(child.tagName, "PageContents")) {
                                        var index = target.indexOf(".");
                                        if (index !== -1)
                                            this.parseNodes(child, model, target.substring(0, index));
                                        break
                                    }
                                    child = child.nextSibling
                                }
                            }
                        }
                    }
                    ;
                    mxVsdxPage.prototype.parseShapes = function(shapesElement, master, recurse) {
                        var shapes = {};
                        var shapeList = shapesElement.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.SHAPE);
                        var shapeNode = shapeList != null && shapeList.length > 0 ? shapeList.item(0) : null;
                        while (shapeNode != null) {
                            if (shapeNode != null && shapeNode.nodeType == 1) {
                                var shapeElem = shapeNode;
                                var masterTmp = master;
                                if (masterTmp == null) {
                                    var masterId = shapeElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.MASTER);
                                    if (masterId != null && !function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(masterId, ""))
                                        masterTmp = this.model.getMaster(masterId)
                                }
                                var isEdge = this.isEdge(shapeElem);
                                if (!isEdge && masterTmp != null) {
                                    var masterId = shapeElem.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.MASTER_SHAPE);
                                    var elem = masterTmp.getMasterElement();
                                    if (masterId != null && !function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(masterId, ""))
                                        elem = masterTmp.getSubShape(masterId).getShape();
                                    isEdge = this.isEdge(elem)
                                }
                                var shape = this.createCell(shapeElem, !isEdge, masterTmp);
                                (function(m, k, v) {
                                    if (m.entries == null)
                                        m.entries = [];
                                    for (var i = 0; i < m.entries.length; i++)
                                        if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                            m.entries[i].value = v;
                                            return
                                        }
                                    m.entries.push({
                                        key: k,
                                        value: v,
                                        getKey: function() {
                                            return this.key
                                        },
                                        getValue: function() {
                                            return this.value
                                        }
                                    })
                                }
                                )(shapes, shape.getId(), shape)
                            }
                            shapeNode = shapeNode.nextSibling
                        }
                        return shapes
                    }
                    ;
                    mxVsdxPage.prototype.createCell = function(shapeElem, vertex, masterTmp) {
                        return new com.mxgraph.io.vsdx.VsdxShape(this,shapeElem,vertex,this.model.getMasterShapes(),masterTmp,this.model)
                    }
                    ;
                    mxVsdxPage.prototype.isEdge = function(shape) {
                        if (shape != null) {
                            var children = shape.childNodes;
                            if (children != null) {
                                var childNode = children.item(0);
                                while (childNode != null) {
                                    if (childNode != null && childNode.nodeType == 1) {
                                        var childElem = childNode;
                                        if (function(o1, o2) {
                                            if (o1 && o1.equals)
                                                return o1.equals(o2);
                                            else
                                                return o1 === o2
                                        }(childElem.nodeName, "Cell")) {
                                            var n = childElem.getAttribute("N");
                                            if (function(o1, o2) {
                                                if (o1 && o1.equals)
                                                    return o1.equals(o2);
                                                else
                                                    return o1 === o2
                                            }(n, "BeginX") || function(o1, o2) {
                                                if (o1 && o1.equals)
                                                    return o1.equals(o2);
                                                else
                                                    return o1 === o2
                                            }(n, "BeginY") || function(o1, o2) {
                                                if (o1 && o1.equals)
                                                    return o1.equals(o2);
                                                else
                                                    return o1 === o2
                                            }(n, "EndY") || function(o1, o2) {
                                                if (o1 && o1.equals)
                                                    return o1.equals(o2);
                                                else
                                                    return o1 === o2
                                            }(n, "EndX"))
                                                return true
                                        }
                                    }
                                    childNode = childNode.nextSibling
                                }
                            }
                        }
                        return false
                    }
                    ;
                    mxVsdxPage.prototype.getPageDimensions = function() {
                        var pageH = 0;
                        var pageW = 0;
                        var height = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.cellElements, "PageHeight");
                        var width = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.cellElements, "PageWidth");
                        if (height != null) {
                            pageH = parseFloat(height.getAttribute("V")) * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                            pageH = Math.round(pageH * 100) / 100
                        }
                        if (width != null) {
                            pageW = parseFloat(width.getAttribute("V")) * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                            pageW = Math.round(pageW * 100) / 100
                        }
                        return new mxPoint(pageW,pageH)
                    }
                    ;
                    mxVsdxPage.prototype.getDrawingScale = function() {
                        var scale = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.cellElements, "DrawingScale");
                        if (scale != null)
                            return parseFloat(scale.getAttribute("V")) * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                        return 1
                    }
                    ;
                    mxVsdxPage.prototype.getPageScale = function() {
                        var scale = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.cellElements, "PageScale");
                        if (scale != null)
                            return parseFloat(scale.getAttribute("V")) * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                        return 1
                    }
                    ;
                    mxVsdxPage.prototype.getCellValue = function(cellName) {
                        var cell = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.cellElements, cellName);
                        if (cell != null)
                            return cell.getAttribute("V") || "";
                        return null
                    }
                    ;
                    mxVsdxPage.prototype.getCellIntValue = function(cellName, defVal) {
                        var val = this.getCellValue(cellName);
                        if (val != null)
                            return parseInt(val);
                        return defVal
                    }
                    ;
                    mxVsdxPage.prototype.getId = function() {
                        return this.Id
                    }
                    ;
                    mxVsdxPage.prototype.getPageName = function() {
                        return this.pageName
                    }
                    ;
                    mxVsdxPage.prototype.getShapes = function() {
                        return this.shapes
                    }
                    ;
                    mxVsdxPage.prototype.getLayers = function() {
                        return this.layers
                    }
                    ;
                    mxVsdxPage.prototype.getConnects = function() {
                        return this.connects
                    }
                    ;
                    mxVsdxPage.prototype.isBackground = function() {
                        return this.__isBackground
                    }
                    ;
                    mxVsdxPage.prototype.getBackPageId = function() {
                        return this.backPageId
                    }
                    ;
                    mxVsdxPage.prototype.setBackPage = function(page) {
                        this.backPage = page
                    }
                    ;
                    mxVsdxPage.prototype.getBackPage = function() {
                        return this.backPage
                    }
                    ;
                    return mxVsdxPage
                }();
                vsdx.mxVsdxPage = mxVsdxPage;
                mxVsdxPage["__class"] = "com.mxgraph.io.vsdx.mxVsdxPage"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxVsdxTheme = function() {
                    function mxVsdxTheme(theme) {
                        this.themeIndex = -1;
                        this.themeVariant = 0;
                        this.baseColors = {};
                        this.variantsColors = function(dims) {
                            var allocate = function(dims) {
                                if (dims.length == 0)
                                    return undefined;
                                else {
                                    var array = [];
                                    for (var i = 0; i < dims[0]; i++)
                                        array.push(allocate(dims.slice(1)));
                                    return array
                                }
                            };
                            return allocate(dims)
                        }([4, 7]);
                        this.isMonotoneVariant = new Array(4);
                        this.defaultClr = new com.mxgraph.io.vsdx.theme.Color(255,255,255);
                        this.defaultLineClr = new com.mxgraph.io.vsdx.theme.Color(0,0,0);
                        this.defaultLineStyle = new com.mxgraph.io.vsdx.theme.LineStyle;
                        this.fillStyles = [];
                        this.connFillStyles = [];
                        this.lineStyles = [];
                        this.connLineStyles = [];
                        this.lineStylesExt = [];
                        this.connLineStylesExt = [];
                        this.connFontColors = [];
                        this.connFontStyles = [];
                        this.fontColors = [];
                        this.fontStyles = [];
                        this.variantEmbellishment = [0, 0, 0, 0];
                        this.variantFillIdx = function(dims) {
                            var allocate = function(dims) {
                                if (dims.length == 0)
                                    return 0;
                                else {
                                    var array = [];
                                    for (var i = 0; i < dims[0]; i++)
                                        array.push(allocate(dims.slice(1)));
                                    return array
                                }
                            };
                            return allocate(dims)
                        }([4, 4]);
                        this.variantLineIdx = function(dims) {
                            var allocate = function(dims) {
                                if (dims.length == 0)
                                    return 0;
                                else {
                                    var array = [];
                                    for (var i = 0; i < dims[0]; i++)
                                        array.push(allocate(dims.slice(1)));
                                    return array
                                }
                            };
                            return allocate(dims)
                        }([4, 4]);
                        this.variantEffectIdx = function(dims) {
                            var allocate = function(dims) {
                                if (dims.length == 0)
                                    return 0;
                                else {
                                    var array = [];
                                    for (var i = 0; i < dims[0]; i++)
                                        array.push(allocate(dims.slice(1)));
                                    return array
                                }
                            };
                            return allocate(dims)
                        }([4, 4]);
                        this.variantFontIdx = function(dims) {
                            var allocate = function(dims) {
                                if (dims.length == 0)
                                    return 0;
                                else {
                                    var array = [];
                                    for (var i = 0; i < dims[0]; i++)
                                        array.push(allocate(dims.slice(1)));
                                    return array
                                }
                            };
                            return allocate(dims)
                        }([4, 4]);
                        this.isProcessed = false;
                        this.__isPure = true;
                        this.theme = null;
                        this.bkgndColor = null;
                        this.name = null;
                        this.theme = theme;
                        this.name = theme.getAttribute("name") || "";
                        var themeId = function(m, k) {
                            return m[k] ? m[k] : null
                        }(mxVsdxTheme.themesIds_$LI$(), this.name);
                        if (themeId != null)
                            this.themeIndex = themeId
                    }
                    mxVsdxTheme.__static_initialize = function() {
                        if (!mxVsdxTheme.__static_initialized) {
                            mxVsdxTheme.__static_initialized = true;
                            mxVsdxTheme.__static_initializer_0();
                            mxVsdxTheme.__static_initializer_1()
                        }
                    }
                    ;
                    mxVsdxTheme.themesIds_$LI$ = function() {
                        mxVsdxTheme.__static_initialize();
                        if (mxVsdxTheme.themesIds == null)
                            mxVsdxTheme.themesIds = {};
                        return mxVsdxTheme.themesIds
                    }
                    ;
                    mxVsdxTheme.__static_initializer_0 = function() {
                        mxVsdxTheme.themesIds_$LI$()["Office"] = 33;
                        mxVsdxTheme.themesIds_$LI$()["Linear"] = 34;
                        mxVsdxTheme.themesIds_$LI$()["Zephyr"] = 35;
                        mxVsdxTheme.themesIds_$LI$()["Integral"] = 36;
                        mxVsdxTheme.themesIds_$LI$()["Simple"] = 37;
                        mxVsdxTheme.themesIds_$LI$()["Whisp"] = 38;
                        mxVsdxTheme.themesIds_$LI$()["Daybreak"] = 39;
                        mxVsdxTheme.themesIds_$LI$()["Parallel"] = 40;
                        mxVsdxTheme.themesIds_$LI$()["Sequence"] = 41;
                        mxVsdxTheme.themesIds_$LI$()["Slice"] = 42;
                        mxVsdxTheme.themesIds_$LI$()["Ion"] = 43;
                        mxVsdxTheme.themesIds_$LI$()["Retrospect"] = 44;
                        mxVsdxTheme.themesIds_$LI$()["Organic"] = 45;
                        mxVsdxTheme.themesIds_$LI$()["Bubble"] = 46;
                        mxVsdxTheme.themesIds_$LI$()["Clouds"] = 47;
                        mxVsdxTheme.themesIds_$LI$()["Gemstone"] = 48;
                        mxVsdxTheme.themesIds_$LI$()["Lines"] = 49;
                        mxVsdxTheme.themesIds_$LI$()["Facet"] = 50;
                        mxVsdxTheme.themesIds_$LI$()["Prominence"] = 51;
                        mxVsdxTheme.themesIds_$LI$()["Smoke"] = 52;
                        mxVsdxTheme.themesIds_$LI$()["Radiance"] = 53;
                        mxVsdxTheme.themesIds_$LI$()["Shade"] = 54;
                        mxVsdxTheme.themesIds_$LI$()["Pencil"] = 55;
                        mxVsdxTheme.themesIds_$LI$()["Pen"] = 56;
                        mxVsdxTheme.themesIds_$LI$()["Marker"] = 57;
                        mxVsdxTheme.themesIds_$LI$()["Whiteboard"] = 58
                    }
                    ;
                    mxVsdxTheme.colorIds_$LI$ = function() {
                        mxVsdxTheme.__static_initialize();
                        if (mxVsdxTheme.colorIds == null)
                            mxVsdxTheme.colorIds = {};
                        return mxVsdxTheme.colorIds
                    }
                    ;
                    mxVsdxTheme.__static_initializer_1 = function() {
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(mxVsdxTheme.colorIds_$LI$(), 0, "dk1");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(mxVsdxTheme.colorIds_$LI$(), 1, "lt1");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(mxVsdxTheme.colorIds_$LI$(), 2, "accent1");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(mxVsdxTheme.colorIds_$LI$(), 3, "accent2");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(mxVsdxTheme.colorIds_$LI$(), 4, "accent3");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(mxVsdxTheme.colorIds_$LI$(), 5, "accent4");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(mxVsdxTheme.colorIds_$LI$(), 6, "accent5");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(mxVsdxTheme.colorIds_$LI$(), 7, "accent6")
                    }
                    ;
                    mxVsdxTheme.prototype.getThemeIndex = function() {
                        return this.themeIndex
                    }
                    ;
                    mxVsdxTheme.prototype.setVariant = function(variant) {
                        this.themeVariant = variant
                    }
                    ;
                    mxVsdxTheme.prototype.isPure = function() {
                        return this.__isPure
                    }
                    ;
                    mxVsdxTheme.prototype.processTheme = function() {
                        if (this.isProcessed)
                            return;
                        try {
                            var child = this.theme.firstChild;
                            while (child != null) {
                                if (child != null && child.nodeType == 1 && function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(child.nodeName, "a:themeElements")) {
                                    var child2 = child.firstChild;
                                    while (child2 != null) {
                                        if (child2 != null && child2.nodeType == 1) {
                                            var elem = child2;
                                            var nodeName = elem.nodeName;
                                            if (function(o1, o2) {
                                                if (o1 && o1.equals)
                                                    return o1.equals(o2);
                                                else
                                                    return o1 === o2
                                            }(nodeName, "a:clrScheme")) {
                                                if (!function(o1, o2) {
                                                    if (o1 && o1.equals)
                                                        return o1.equals(o2);
                                                    else
                                                        return o1 === o2
                                                }(this.name, elem.getAttribute("name")))
                                                    this.__isPure = false;
                                                this.processColors(elem)
                                            } else if (function(o1, o2) {
                                                if (o1 && o1.equals)
                                                    return o1.equals(o2);
                                                else
                                                    return o1 === o2
                                            }(nodeName, "a:fontScheme")) {
                                                if (!function(o1, o2) {
                                                    if (o1 && o1.equals)
                                                        return o1.equals(o2);
                                                    else
                                                        return o1 === o2
                                                }(this.name, elem.getAttribute("name")))
                                                    this.__isPure = false;
                                                this.processFonts(elem)
                                            } else if (function(o1, o2) {
                                                if (o1 && o1.equals)
                                                    return o1.equals(o2);
                                                else
                                                    return o1 === o2
                                            }(nodeName, "a:fmtScheme")) {
                                                if (!function(o1, o2) {
                                                    if (o1 && o1.equals)
                                                        return o1.equals(o2);
                                                    else
                                                        return o1 === o2
                                                }(this.name, elem.getAttribute("name")))
                                                    this.__isPure = false;
                                                this.processFormats(elem)
                                            } else if (function(o1, o2) {
                                                if (o1 && o1.equals)
                                                    return o1.equals(o2);
                                                else
                                                    return o1 === o2
                                            }(nodeName, "a:extLst"))
                                                this.processExtras(elem)
                                        }
                                        child2 = child2.nextSibling
                                    }
                                }
                                child = child.nextSibling
                            }
                        } catch (e) {
                            console.error(e.message, e)
                        }
                        this.isProcessed = true
                    }
                    ;
                    mxVsdxTheme.prototype.processExtras = function(element) {
                        var exts = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(element);
                        for (var index134 = 0; index134 < exts.length; index134++) {
                            var ext = exts[index134];
                            {
                                var vt = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(ext);
                                switch (vt.nodeName) {
                                case "vt:fmtConnectorScheme":
                                    if (!function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(this.name, vt.getAttribute("name")))
                                        this.__isPure = false;
                                    var connSchemes = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(vt);
                                    for (var index135 = 0; index135 < connSchemes.length; index135++) {
                                        var scheme = connSchemes[index135];
                                        {
                                            var name_3 = scheme.nodeName;
                                            switch (name_3) {
                                            case "a:fillStyleLst":
                                                var fillStyleElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(scheme);
                                                for (var index136 = 0; index136 < fillStyleElems.length; index136++) {
                                                    var fillStyle = fillStyleElems[index136];
                                                    {
                                                        this.connFillStyles.push(com.mxgraph.io.vsdx.theme.FillStyleFactory.getFillStyle(fillStyle)) > 0
                                                    }
                                                }
                                                break;
                                            case "a:lnStyleLst":
                                                var lineStyleElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(scheme);
                                                for (var index137 = 0; index137 < lineStyleElems.length; index137++) {
                                                    var lineStyle = lineStyleElems[index137];
                                                    {
                                                        this.connLineStyles.push(new com.mxgraph.io.vsdx.theme.LineStyle(lineStyle)) > 0
                                                    }
                                                }
                                                break
                                            }
                                        }
                                    }
                                    break;
                                case "vt:lineStyles":
                                    var styles = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(vt);
                                    for (var index138 = 0; index138 < styles.length; index138++) {
                                        var style = styles[index138];
                                        {
                                            var name_4 = style.nodeName;
                                            switch (name_4) {
                                            case "vt:fmtConnectorSchemeLineStyles":
                                                var connStylesElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(style);
                                                for (var index139 = 0; index139 < connStylesElems.length; index139++) {
                                                    var connStyle = connStylesElems[index139];
                                                    {
                                                        this.connLineStylesExt.push(new com.mxgraph.io.vsdx.theme.LineStyleExt(connStyle)) > 0
                                                    }
                                                }
                                                break;
                                            case "vt:fmtSchemeLineStyles":
                                                var schemeStyleElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(style);
                                                for (var index140 = 0; index140 < schemeStyleElems.length; index140++) {
                                                    var schemeStyle = schemeStyleElems[index140];
                                                    {
                                                        this.lineStylesExt.push(new com.mxgraph.io.vsdx.theme.LineStyleExt(schemeStyle)) > 0
                                                    }
                                                }
                                                break
                                            }
                                        }
                                    }
                                    break;
                                case "vt:fontStylesGroup":
                                    var fontStyleElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(vt);
                                    for (var index141 = 0; index141 < fontStyleElems.length; index141++) {
                                        var fontStyle = fontStyleElems[index141];
                                        {
                                            var name_5 = fontStyle.nodeName;
                                            switch (name_5) {
                                            case "vt:connectorFontStyles":
                                                this.fillFontStyles(fontStyle, this.connFontColors, this.connFontStyles);
                                                break;
                                            case "vt:fontStyles":
                                                this.fillFontStyles(fontStyle, this.fontColors, this.fontStyles);
                                                break
                                            }
                                        }
                                    }
                                    break;
                                case "vt:variationStyleSchemeLst":
                                    var varStyleSchemes = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(vt);
                                    var i = 0;
                                    for (var index142 = 0; index142 < varStyleSchemes.length; index142++) {
                                        var varStyleScheme = varStyleSchemes[index142];
                                        {
                                            this.variantEmbellishment[i] = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(varStyleScheme, "embellishment");
                                            var varStyles = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(varStyleScheme);
                                            var j = 0;
                                            for (var index143 = 0; index143 < varStyles.length; index143++) {
                                                var varStyle = varStyles[index143];
                                                {
                                                    this.variantFillIdx[i][j] = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(varStyle, "fillIdx");
                                                    this.variantLineIdx[i][j] = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(varStyle, "lineIdx");
                                                    this.variantEffectIdx[i][j] = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(varStyle, "effectIdx");
                                                    this.variantFontIdx[i][j] = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(varStyle, "fontIdx");
                                                    j++
                                                }
                                            }
                                            i++
                                        }
                                    }
                                    break
                                }
                            }
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.fillFontStyles = function(fontStyle, fontColors, fontStyles) {
                        var fontProps = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(fontStyle);
                        for (var index144 = 0; index144 < fontProps.length; index144++) {
                            var fontProp = fontProps[index144];
                            {
                                fontStyles.push(com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(fontProp, "style")) > 0;
                                var color = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(fontProp);
                                if (color != null)
                                    fontColors.push(com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(color))) > 0
                            }
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.processFormats = function(element) {
                        var styles = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(element);
                        for (var index145 = 0; index145 < styles.length; index145++) {
                            var style = styles[index145];
                            {
                                var name_6 = style.nodeName;
                                switch (name_6) {
                                case "a:fillStyleLst":
                                    var fillStyleElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(style);
                                    for (var index146 = 0; index146 < fillStyleElems.length; index146++) {
                                        var fillStyle = fillStyleElems[index146];
                                        {
                                            this.fillStyles.push(com.mxgraph.io.vsdx.theme.FillStyleFactory.getFillStyle(fillStyle)) > 0
                                        }
                                    }
                                    break;
                                case "a:lnStyleLst":
                                    var lineStyleElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(style);
                                    for (var index147 = 0; index147 < lineStyleElems.length; index147++) {
                                        var lineStyle = lineStyleElems[index147];
                                        {
                                            this.lineStyles.push(new com.mxgraph.io.vsdx.theme.LineStyle(lineStyle)) > 0
                                        }
                                    }
                                    break;
                                case "a:effectStyleLst":
                                    break;
                                case "a:bgFillStyleLst":
                                    break
                                }
                            }
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.processFonts = function(element) {}
                    ;
                    mxVsdxTheme.prototype.processColors = function(element) {
                        var child = element.firstChild;
                        while (child != null) {
                            if (child != null && child.nodeType == 1) {
                                var elem = child;
                                var nodeName = elem.nodeName;
                                var children = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(elem);
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(nodeName, "a:extLst")) {
                                    if (children.length === 3) {
                                        if (this.themeIndex < 0)
                                            this.extractThemeIndex(children[0]);
                                        this.addBkgndColor(children[1]);
                                        this.addVariantColors(children[2])
                                    }
                                } else {
                                    var clrName = nodeName.substring(2);
                                    if (children.length > 0)
                                        this.addBasicColor(clrName, children[0])
                                }
                            }
                            child = child.nextSibling
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.addVariantColors = function(element) {
                        var parent = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(element);
                        if (parent != null) {
                            var variants = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(parent);
                            var i = 0;
                            for (var index148 = 0; index148 < variants.length; index148++) {
                                var variant = variants[index148];
                                {
                                    this.addVariantColorsSet(i++, variant)
                                }
                            }
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.addVariantColorsSet = function(index, variant) {
                        var colors = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(variant);
                        this.isMonotoneVariant[index] = variant.hasAttribute("monotone");
                        for (var index149 = 0; index149 < colors.length; index149++) {
                            var color = colors[index149];
                            {
                                var name_7 = color.nodeName;
                                switch (name_7) {
                                case "vt:varColor1":
                                    this.variantsColors[index][0] = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(color));
                                    break;
                                case "vt:varColor2":
                                    this.variantsColors[index][1] = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(color));
                                    break;
                                case "vt:varColor3":
                                    this.variantsColors[index][2] = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(color));
                                    break;
                                case "vt:varColor4":
                                    this.variantsColors[index][3] = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(color));
                                    break;
                                case "vt:varColor5":
                                    this.variantsColors[index][4] = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(color));
                                    break;
                                case "vt:varColor6":
                                    this.variantsColors[index][5] = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(color));
                                    break;
                                case "vt:varColor7":
                                    this.variantsColors[index][6] = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(color));
                                    break
                                }
                            }
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.addBkgndColor = function(element) {
                        var elem = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(element);
                        if (elem != null)
                            this.bkgndColor = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(elem))
                    }
                    ;
                    mxVsdxTheme.prototype.extractThemeIndex = function(element) {
                        var elem = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(element);
                        if (elem != null)
                            this.themeIndex = parseInt(elem.getAttribute("schemeEnum"))
                    }
                    ;
                    mxVsdxTheme.prototype.addBasicColor = function(clrName, element) {
                        this.baseColors[clrName] = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(element)
                    }
                    ;
                    mxVsdxTheme.prototype.getSchemeColor = function(val) {
                        this.processTheme();
                        var color = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.baseColors, val);
                        return color != null ? color.getColor$com_mxgraph_io_vsdx_mxVsdxTheme(this) : this.defaultClr
                    }
                    ;
                    mxVsdxTheme.prototype.getStyleColor = function(styleColor) {
                        this.processTheme();
                        if (styleColor < 8) {
                            var color = function(m, k) {
                                return m[k] ? m[k] : null
                            }(this.baseColors, function(m, k) {
                                if (m.entries == null)
                                    m.entries = [];
                                for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                        return m.entries[i].value;
                                return null
                            }(mxVsdxTheme.colorIds_$LI$(), styleColor));
                            if (color != null)
                                return color.getColor$com_mxgraph_io_vsdx_mxVsdxTheme(this)
                        } else if (styleColor === 8) {
                            if (this.bkgndColor != null)
                                return this.bkgndColor.getColor$com_mxgraph_io_vsdx_mxVsdxTheme(this)
                        } else {
                            var color = null;
                            var clrIndex = 0;
                            if (styleColor >= 200)
                                clrIndex = styleColor - 200;
                            else if (styleColor >= 100)
                                clrIndex = styleColor - 100;
                            if (clrIndex >= 0 && clrIndex <= 6)
                                color = this.variantsColors[this.themeVariant][clrIndex];
                            if (color != null)
                                return color.getColor$com_mxgraph_io_vsdx_mxVsdxTheme(this)
                        }
                        return this.defaultClr
                    }
                    ;
                    mxVsdxTheme.prototype.getFillGraientColor = function(quickStyleVals) {
                        return this.getFillColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$boolean(quickStyleVals, true)
                    }
                    ;
                    mxVsdxTheme.prototype.getFillColor$com_mxgraph_io_vsdx_theme_QuickStyleVals = function(quickStyleVals) {
                        return this.getFillColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$boolean(quickStyleVals, false)
                    }
                    ;
                    mxVsdxTheme.prototype.getFillColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$boolean = function(quickStyleVals, getGradient) {
                        this.processTheme();
                        var fillColorStyle = quickStyleVals.getQuickStyleFillColor();
                        var fillStyle = null;
                        switch (quickStyleVals.getQuickStyleFillMatrix()) {
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            fillStyle = this.fillStyles[quickStyleVals.getQuickStyleFillMatrix() - 1];
                            break;
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                            if (this.isMonotoneVariant[this.themeVariant])
                                fillColorStyle = 100;
                            var index = quickStyleVals.getQuickStyleFillMatrix() - 100;
                            fillStyle = this.fillStyles[this.variantFillIdx[this.themeVariant][index] - 1];
                            break
                        }
                        var retColor;
                        if (fillStyle != null)
                            if (getGradient)
                                retColor = fillStyle != null && fillStyle instanceof com.mxgraph.io.vsdx.theme.GradFill ? fillStyle.applyStyle(fillColorStyle, this).getGradientClr() : null;
                            else
                                retColor = fillStyle.applyStyle(fillColorStyle, this);
                        else if (getGradient)
                            retColor = null;
                        else
                            retColor = this.getStyleColor(fillColorStyle);
                        var styleVariation = quickStyleVals.getQuickStyleVariation();
                        if (retColor != null && (styleVariation & 8) > 0)
                            retColor = this.getLineColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                        return retColor
                    }
                    ;
                    mxVsdxTheme.prototype.getFillColor = function(quickStyleVals, getGradient) {
                        if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && (typeof getGradient === "boolean" || getGradient === null))
                            return this.getFillColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$boolean(quickStyleVals, getGradient);
                        else if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && getGradient === undefined)
                            return this.getFillColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    mxVsdxTheme.prototype.getLineStyle = function(quickStyleLineMatrix, lineStyles) {
                        this.processTheme();
                        var lineStyle = null;
                        switch (quickStyleLineMatrix) {
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            lineStyle = lineStyles[quickStyleLineMatrix - 1];
                            break;
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                            var index = quickStyleLineMatrix - 100;
                            if (lineStyles === this.lineStyles)
                                lineStyle = this.lineStyles[this.variantLineIdx[this.themeVariant][index] - 1];
                            else
                                lineStyle = this.defaultLineStyle;
                            break
                        }
                        return lineStyle
                    }
                    ;
                    mxVsdxTheme.prototype.getLineStyleExt = function(quickStyleLineMatrix, lineStylesExt) {
                        this.processTheme();
                        var lineStyleExt = null;
                        switch (quickStyleLineMatrix) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            lineStyleExt = lineStylesExt[quickStyleLineMatrix];
                            break
                        }
                        return lineStyleExt
                    }
                    ;
                    mxVsdxTheme.prototype.getLineColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList = function(quickStyleVals, lineStyles) {
                        this.processTheme();
                        var lineColorStyle = quickStyleVals.getQuickStyleLineColor();
                        var lineStyle = this.getLineStyle(quickStyleVals.getQuickStyleLineMatrix(), lineStyles);
                        switch (quickStyleVals.getQuickStyleLineMatrix()) {
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                            if (this.isMonotoneVariant[this.themeVariant])
                                lineColorStyle = 100;
                            break
                        }
                        var lineClr;
                        if (lineStyle != null)
                            lineClr = lineStyle.getLineColor(lineColorStyle, this);
                        else
                            lineClr = this.getStyleColor(lineColorStyle);
                        var styleVariation = quickStyleVals.getQuickStyleVariation();
                        if ((styleVariation & 4) > 0)
                            lineClr = this.getFillColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                        return lineClr
                    }
                    ;
                    mxVsdxTheme.prototype.getLineColor = function(quickStyleVals, lineStyles) {
                        if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && (lineStyles != null && lineStyles instanceof Array || lineStyles === null))
                            return this.getLineColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList(quickStyleVals, lineStyles);
                        else if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && lineStyles === undefined)
                            return this.getLineColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    mxVsdxTheme.prototype.getLineColor$com_mxgraph_io_vsdx_theme_QuickStyleVals = function(quickStyleVals) {
                        return this.getLineColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList(quickStyleVals, this.lineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getConnLineColor = function(quickStyleVals) {
                        return this.getLineColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList(quickStyleVals, this.connLineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getDefaultLineClr = function() {
                        return this.defaultLineClr
                    }
                    ;
                    mxVsdxTheme.prototype.isLineDashed$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList$java_util_ArrayList = function(quickStyleVals, lineStylesExt, lineStyles) {
                        var lineStyleExt = this.getLineStyleExt(quickStyleVals.getQuickStyleLineMatrix(), lineStylesExt);
                        if (lineStyleExt != null)
                            return lineStyleExt.isDashed();
                        else {
                            var lineStyle = this.getLineStyle(quickStyleVals.getQuickStyleLineMatrix(), lineStyles);
                            return lineStyle != null ? lineStyle.isDashed() : false
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.isLineDashed = function(quickStyleVals, lineStylesExt, lineStyles) {
                        if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && (lineStylesExt != null && lineStylesExt instanceof Array || lineStylesExt === null) && (lineStyles != null && lineStyles instanceof Array || lineStyles === null))
                            return this.isLineDashed$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList$java_util_ArrayList(quickStyleVals, lineStylesExt, lineStyles);
                        else if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && lineStylesExt === undefined && lineStyles === undefined)
                            return this.isLineDashed$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    mxVsdxTheme.prototype.isLineDashed$com_mxgraph_io_vsdx_theme_QuickStyleVals = function(quickStyleVals) {
                        return this.isLineDashed$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList$java_util_ArrayList(quickStyleVals, this.lineStylesExt, this.lineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.isConnLineDashed = function(quickStyleVals) {
                        return this.isLineDashed$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList$java_util_ArrayList(quickStyleVals, this.connLineStylesExt, this.connLineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getLineDashPattern$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList$java_util_ArrayList = function(quickStyleVals, lineStylesExt, lineStyles) {
                        var lineStyleExt = this.getLineStyleExt(quickStyleVals.getQuickStyleLineMatrix(), lineStylesExt);
                        if (lineStyleExt != null)
                            return lineStyleExt.getLineDashPattern();
                        else {
                            var lineStyle = this.getLineStyle(quickStyleVals.getQuickStyleLineMatrix(), lineStyles);
                            return lineStyle != null ? lineStyle.getLineDashPattern() : null
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.getLineDashPattern = function(quickStyleVals, lineStylesExt, lineStyles) {
                        if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && (lineStylesExt != null && lineStylesExt instanceof Array || lineStylesExt === null) && (lineStyles != null && lineStyles instanceof Array || lineStyles === null))
                            return this.getLineDashPattern$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList$java_util_ArrayList(quickStyleVals, lineStylesExt, lineStyles);
                        else if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && lineStylesExt === undefined && lineStyles === undefined)
                            return this.getLineDashPattern$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    mxVsdxTheme.prototype.getLineDashPattern$com_mxgraph_io_vsdx_theme_QuickStyleVals = function(quickStyleVals) {
                        return this.getLineDashPattern$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList$java_util_ArrayList(quickStyleVals, this.lineStylesExt, this.lineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getConnLineDashPattern = function(quickStyleVals) {
                        return this.getLineDashPattern$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList$java_util_ArrayList(quickStyleVals, this.connLineStylesExt, this.connLineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getArrowSize = function(quickStyleVals, isStart, lineStylesExt, lineStyles) {
                        var lineStyleExt = this.getLineStyleExt(quickStyleVals.getQuickStyleLineMatrix(), lineStylesExt);
                        if (lineStyleExt != null)
                            return isStart ? lineStyleExt.getStartSize() : lineStyleExt.getEndSize();
                        else {
                            var lineStyle = this.getLineStyle(quickStyleVals.getQuickStyleLineMatrix(), lineStyles);
                            return lineStyle != null ? isStart ? lineStyle.getStartSize() : lineStyle.getEndSize() : 4
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.getStartSize = function(quickStyleVals) {
                        return this.getArrowSize(quickStyleVals, true, this.lineStylesExt, this.lineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getConnStartSize = function(quickStyleVals) {
                        return this.getArrowSize(quickStyleVals, true, this.connLineStylesExt, this.connLineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getEndSize = function(quickStyleVals) {
                        return this.getArrowSize(quickStyleVals, false, this.lineStylesExt, this.lineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getConnEndSize = function(quickStyleVals) {
                        return this.getArrowSize(quickStyleVals, false, this.connLineStylesExt, this.connLineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getFontColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList = function(quickStyleVals, fontColors) {
                        this.processTheme();
                        var fontColorStyle = quickStyleVals.getQuickStyleFontColor();
                        var fontColor = null;
                        switch (quickStyleVals.getQuickStyleFontMatrix()) {
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            fontColor = fontColors[quickStyleVals.getQuickStyleFontMatrix() - 1];
                            break;
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                            if (this.isMonotoneVariant[this.themeVariant])
                                fontColorStyle = 100;
                            var index = quickStyleVals.getQuickStyleFontMatrix() - 100;
                            if (fontColors !== this.fontColors)
                                fontColor = function(m, k) {
                                    return m[k] ? m[k] : null
                                }(this.baseColors, "dk1");
                            else
                                fontColor = fontColors[this.variantFontIdx[this.themeVariant][index] - 1];
                            break
                        }
                        var txtColor;
                        if (fontColor != null)
                            txtColor = fontColor.getColor$int$com_mxgraph_io_vsdx_mxVsdxTheme(fontColorStyle, this);
                        else
                            txtColor = this.getStyleColor(fontColorStyle);
                        var styleVariation = quickStyleVals.getQuickStyleVariation();
                        if ((styleVariation & 2) > 0) {
                            var fillColor = this.getFillColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                            var fillHSLClr = fillColor.toHsl();
                            var lineClr = this.getLineColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                            var lineHSLClr = lineClr.toHsl();
                            if (fillHSLClr.getLum() < lineHSLClr.getLum())
                                txtColor = fillColor;
                            else
                                txtColor = lineClr
                        }
                        return txtColor
                    }
                    ;
                    mxVsdxTheme.prototype.getFontColor = function(quickStyleVals, fontColors) {
                        if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && (fontColors != null && fontColors instanceof Array || fontColors === null))
                            return this.getFontColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList(quickStyleVals, fontColors);
                        else if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && fontColors === undefined)
                            return this.getFontColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    mxVsdxTheme.prototype.getFontColor$com_mxgraph_io_vsdx_theme_QuickStyleVals = function(quickStyleVals) {
                        return this.getFontColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList(quickStyleVals, this.fontColors)
                    }
                    ;
                    mxVsdxTheme.prototype.getConnFontColor = function(quickStyleVals) {
                        return this.getFontColor$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList(quickStyleVals, this.connFontColors)
                    }
                    ;
                    mxVsdxTheme.prototype.getArrowType = function(quickStyleVals, isStart, lineStylesExt, lineStyles) {
                        var lineStyleExt = this.getLineStyleExt(quickStyleVals.getQuickStyleLineMatrix(), lineStylesExt);
                        if (lineStyleExt != null)
                            return isStart ? lineStyleExt.getStart() : lineStyleExt.getEnd();
                        else {
                            var lineStyle = this.getLineStyle(quickStyleVals.getQuickStyleLineMatrix(), lineStyles);
                            return lineStyle != null ? isStart ? lineStyle.getStart() : lineStyle.getEnd() : 0
                        }
                    }
                    ;
                    mxVsdxTheme.prototype.getEdgeMarker = function(isStart, quickStyleVals) {
                        return this.getArrowType(quickStyleVals, isStart, this.lineStylesExt, this.lineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getConnEdgeMarker = function(isStart, quickStyleVals) {
                        return this.getArrowType(quickStyleVals, isStart, this.connLineStylesExt, this.connLineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getLineWidth$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList = function(quickStyleVals, lineStyles) {
                        var lineStyle = this.getLineStyle(quickStyleVals.getQuickStyleLineMatrix(), lineStyles);
                        return lineStyle != null ? lineStyle.getLineWidth() : 0
                    }
                    ;
                    mxVsdxTheme.prototype.getLineWidth = function(quickStyleVals, lineStyles) {
                        if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && (lineStyles != null && lineStyles instanceof Array || lineStyles === null))
                            return this.getLineWidth$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList(quickStyleVals, lineStyles);
                        else if ((quickStyleVals != null && quickStyleVals instanceof com.mxgraph.io.vsdx.theme.QuickStyleVals || quickStyleVals === null) && lineStyles === undefined)
                            return this.getLineWidth$com_mxgraph_io_vsdx_theme_QuickStyleVals(quickStyleVals);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    mxVsdxTheme.prototype.getLineWidth$com_mxgraph_io_vsdx_theme_QuickStyleVals = function(quickStyleVals) {
                        return this.getLineWidth$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList(quickStyleVals, this.lineStyles)
                    }
                    ;
                    mxVsdxTheme.prototype.getConnLineWidth = function(quickStyleVals) {
                        return this.getLineWidth$com_mxgraph_io_vsdx_theme_QuickStyleVals$java_util_ArrayList(quickStyleVals, this.connLineStyles)
                    }
                    ;
                    return mxVsdxTheme
                }();
                mxVsdxTheme.__static_initialized = false;
                vsdx.mxVsdxTheme = mxVsdxTheme;
                mxVsdxTheme["__class"] = "com.mxgraph.io.vsdx.mxVsdxTheme"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var mxVsdxUtils = function() {
                    function mxVsdxUtils() {}
                    mxVsdxUtils.conversionFactor_$LI$ = function() {
                        if (mxVsdxUtils.conversionFactor == null)
                            mxVsdxUtils.conversionFactor = mxVsdxUtils.screenCoordinatesPerCm * mxVsdxUtils.CENTIMETERS_PER_INCHES;
                        return mxVsdxUtils.conversionFactor
                    }
                    ;
                    mxVsdxUtils.getDirectChildNamedElements = function(parent, name) {
                        var result = [];
                        for (var child = parent.firstChild; child != null; child = child.nextSibling)
                            if (child != null && child.nodeType == 1 && function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(name, child.nodeName))
                                result.push(child) > 0;
                        return result
                    }
                    ;
                    mxVsdxUtils.getDirectChildElements = function(parent) {
                        var result = [];
                        for (var child = parent.firstChild; child != null; child = child.nextSibling)
                            if (child != null && child.nodeType == 1)
                                result.push(child) > 0;
                        return result
                    }
                    ;
                    mxVsdxUtils.getDirectFirstChildElement = function(parent) {
                        for (var child = parent.firstChild; child != null; child = child.nextSibling)
                            if (child != null && child.nodeType == 1)
                                return child;
                        return null
                    }
                    ;
                    mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String$int = function(elem, attName, defVal) {
                        try {
                            var val = elem.getAttribute(attName);
                            if (val != null)
                                return parseInt(val)
                        } catch (e) {}
                        return defVal
                    }
                    ;
                    mxVsdxUtils.getIntAttr = function(elem, attName, defVal) {
                        if ((elem != null && elem.nodeType == 1 || elem === null) && (typeof attName === "string" || attName === null) && (typeof defVal === "number" || defVal === null))
                            return com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String$int(elem, attName, defVal);
                        else if ((elem != null && elem.nodeType == 1 || elem === null) && (typeof attName === "string" || attName === null) && defVal === undefined)
                            return com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(elem, attName);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String = function(elem, attName) {
                        return mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String$int(elem, attName, 0)
                    }
                    ;
                    mxVsdxUtils.getStyleString = function(styleMap, asig) {
                        var style = "";
                        var it = function(a) {
                            var i = 0;
                            return {
                                next: function() {
                                    return i < a.length ? a[i++] : null
                                },
                                hasNext: function() {
                                    return i < a.length
                                }
                            }
                        }(function(obj) {
                            return Object.keys(obj).map(function(key) {
                                return obj[key]
                            })
                        }(styleMap));
                        var kit = function(a) {
                            var i = 0;
                            return {
                                next: function() {
                                    return i < a.length ? a[i++] : null
                                },
                                hasNext: function() {
                                    return i < a.length
                                }
                            }
                        }(Object.keys(styleMap));
                        while (kit.hasNext()) {
                            var key = kit.next();
                            var value = it.next();
                            if (!function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(key, mxConstants.STYLE_SHAPE) || !function(str, searchString, position) {
                                if (position === void 0)
                                    position = 0;
                                return str.substr(position, searchString.length) === searchString
                            }(function(m, k) {
                                return m[k] ? m[k] : null
                            }(styleMap, key), "image") && !function(str, searchString, position) {
                                if (position === void 0)
                                    position = 0;
                                return str.substr(position, searchString.length) === searchString
                            }(function(m, k) {
                                return m[k] ? m[k] : null
                            }(styleMap, key), "rounded="))
                                try {
                                    style = style + key + asig
                                } catch (e) {
                                    console.error("mxVsdxUtils.getStyleString," + e + ",style.length=" + style.length + ",key.length=" + key.length + ",asig.length=" + asig.length)
                                }
                            style = style + value + ";"
                        }
                        return style
                    }
                    ;
                    mxVsdxUtils.surroundByTags = function(text, tag) {
                        return "<" + tag + ">" + text + "</" + tag + ">"
                    }
                    ;
                    mxVsdxUtils.htmlEntities = function(text) {
                        return text.replace(new RegExp("&","g"), "&amp;").replace(new RegExp('"',"g"), "&quot;").replace(new RegExp("'","g"), "&prime;").replace(new RegExp("<","g"), "&lt;").replace(new RegExp(">","g"), "&gt;")
                    }
                    ;
                    mxVsdxUtils.toInitialCapital = function(text) {
                        var words = text.split(" ");
                        var ret = "";
                        for (var index150 = 0; index150 < words.length; index150++) {
                            var word = words[index150];
                            {
                                var begin = word.substring(0, 1);
                                word = word.substring(1);
                                begin = begin.toUpperCase();
                                ret += begin + word
                            }
                        }
                        return ret.substring(0, ret.length)
                    }
                    ;
                    mxVsdxUtils.toSmallCaps = function(text, size) {
                        var ret = "";
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(size, ret)) {
                            var a = "a";
                            var z = "z";
                            var letters = text.split("");
                            for (var index151 = 0; index151 < letters.length; index151++) {
                                var c = letters[index151];
                                {
                                    if (function(c) {
                                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                                    }(c) >= function(c) {
                                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                                    }(a) && function(c) {
                                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                                    }(c) <= function(c) {
                                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                                    }(z)) {
                                        var s = (new String(c)).toString();
                                        s = s.toUpperCase();
                                        ret += '<font style="font-size:' + parseFloat(size) / 1.28 + 'px">' + s + "</font>"
                                    } else
                                        ret += c
                                }
                            }
                        } else
                            ret = text;
                        return ret
                    }
                    ;
                    mxVsdxUtils.getStyleMap = function(style, asig) {
                        var styleMap = {};
                        var entries = style.split(";");
                        for (var index152 = 0; index152 < entries.length; index152++) {
                            var entry = entries[index152];
                            {
                                var index = entry.indexOf(asig);
                                var key = entry.substring(0, index);
                                var value = entry.substring(index + 1);
                                styleMap[key] = value
                            }
                        }
                        return styleMap
                    }
                    ;
                    mxVsdxUtils.isInsideTriangle = function(x, y, ax, ay, bx, by, cx, cy) {
                        bx = bx - ax;
                        by = by - ay;
                        cx = cx - ax;
                        cy = cy - ay;
                        ax = 0;
                        ay = 0;
                        var d = bx * cy - cx * by;
                        var wa = (x * (by - cy) + y * (cx - bx) + bx * cy - cx * by) / d;
                        var wb = (x * cy - y * cx) / d;
                        var wc = (y * bx - x * by) / d;
                        if (wa > 0 && wa < 1 && wb > 0 && wb < 1 && wc > 0 && wc < 1)
                            return true;
                        return false
                    }
                    ;
                    return mxVsdxUtils
                }();
                mxVsdxUtils.screenCoordinatesPerCm = 40;
                mxVsdxUtils.CENTIMETERS_PER_INCHES = 2.54;
                vsdx.mxVsdxUtils = mxVsdxUtils;
                mxVsdxUtils["__class"] = "com.mxgraph.io.vsdx.mxVsdxUtils"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var Paragraph = function() {
                    function Paragraph(val, ch, pg, field) {
                        this.values = null;
                        this.charIndices = null;
                        this.fields = null;
                        this.paraIndex = null;
                        this.values = [];
                        this.values.push(val) > 0;
                        this.charIndices = [];
                        this.charIndices.push(ch) > 0;
                        this.fields = [];
                        this.fields.push(field) > 0;
                        this.paraIndex = pg
                    }
                    Paragraph.prototype.addText = function(val, ch, field) {
                        this.values.push(val) > 0;
                        this.charIndices.push(ch) > 0;
                        this.fields.push(field) > 0
                    }
                    ;
                    Paragraph.prototype.getParagraphIndex = function() {
                        return this.paraIndex
                    }
                    ;
                    Paragraph.prototype.getValue = function(index) {
                        return this.values[index]
                    }
                    ;
                    Paragraph.prototype.numValues = function() {
                        return this.values.length
                    }
                    ;
                    Paragraph.prototype.getChar = function(index) {
                        return this.charIndices[index]
                    }
                    ;
                    Paragraph.prototype.getField = function(index) {
                        return this.fields[index]
                    }
                    ;
                    return Paragraph
                }();
                vsdx.Paragraph = Paragraph;
                Paragraph["__class"] = "com.mxgraph.io.vsdx.Paragraph"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var Section = function() {
                    function Section(elem) {
                        this.elem = null;
                        this.elem = elem
                    }
                    Section.prototype.getIndexedCell = function(index, cellKey) {
                        var rows = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(this.elem, "Row");
                        for (var i = 0; i < rows.length; i++) {
                            var row = rows[i];
                            var n = row.getAttribute("IX");
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(n, index) || index == null) {
                                var cells = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(row, "Cell");
                                for (var j = 0; j < cells.length; j++) {
                                    var cell = cells[j];
                                    n = cell.getAttribute("N");
                                    if (function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(n, cellKey))
                                        return cell
                                }
                            }
                        }
                        return null
                    }
                    ;
                    return Section
                }();
                vsdx.Section = Section;
                Section["__class"] = "com.mxgraph.io.vsdx.Section"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var ShapePageId = function() {
                    function ShapePageId(pageNumber, Id) {
                        this.pageNumber = 0;
                        this.Id = 0;
                        this.pageNumber = pageNumber;
                        this.Id = Id
                    }
                    ShapePageId.prototype.getId = function() {
                        return this.Id
                    }
                    ;
                    ShapePageId.prototype.getPageNumber = function() {
                        return this.pageNumber
                    }
                    ;
                    ShapePageId.prototype.equals = function(obj) {
                        if (obj == null || this.constructor !== obj.constructor)
                            return false;
                        var other = obj;
                        if (this.pageNumber !== other.pageNumber || this.Id !== other.Id)
                            return false;
                        return true
                    }
                    ;
                    ShapePageId.prototype.hashCode = function() {
                        return 1E5 * this.pageNumber + this.Id
                    }
                    ;
                    return ShapePageId
                }();
                vsdx.ShapePageId = ShapePageId;
                ShapePageId["__class"] = "com.mxgraph.io.vsdx.ShapePageId"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var Color = function() {
                        function Color(red, green, blue) {
                            this.red = 0;
                            this.green = 0;
                            this.blue = 0;
                            this.gradientClr = null;
                            this.red = red;
                            this.green = green;
                            this.blue = blue
                        }
                        Color.NONE_$LI$ = function() {
                            if (Color.NONE == null)
                                Color.NONE = new Color(-1,-1,-1);
                            return Color.NONE
                        }
                        ;
                        Color.prototype.getRed = function() {
                            return this.red
                        }
                        ;
                        Color.prototype.setRed = function(red) {
                            this.red = red
                        }
                        ;
                        Color.prototype.getGreen = function() {
                            return this.green
                        }
                        ;
                        Color.prototype.setGreen = function(green) {
                            this.green = green
                        }
                        ;
                        Color.prototype.getBlue = function() {
                            return this.blue
                        }
                        ;
                        Color.prototype.setBlue = function(blue) {
                            this.blue = blue
                        }
                        ;
                        Color.prototype.toHsl = function() {
                            var r = this.getRed() / 255;
                            var g = this.getGreen() / 255;
                            var b = this.getBlue() / 255;
                            var max = Math.max(r, Math.max(g, b));
                            var min = Math.min(r, Math.min(g, b));
                            var l = (max + min) / 2;
                            var h;
                            var s;
                            if (max === min)
                                h = s = 0;
                            else {
                                var d = max - min;
                                s = l > .5 ? d / (2 - max - min) : d / (max + min);
                                if (max === r)
                                    h = (g - b) / d + (g < b ? 6 : 0);
                                else if (max === g)
                                    h = (b - r) / d + 2;
                                else
                                    h = (r - g) / d + 4;
                                h /= 6
                            }
                            return new com.mxgraph.io.vsdx.theme.HSLColor(h,s,l)
                        }
                        ;
                        Color.prototype.toHsv = function() {
                            var r = this.getRed() / 255;
                            var g = this.getGreen() / 255;
                            var b = this.getBlue() / 255;
                            var max = Math.max(r, Math.max(g, b));
                            var min = Math.min(r, Math.min(g, b));
                            var h;
                            var s;
                            var v = max;
                            var d = max - min;
                            s = max === 0 ? 0 : d / max;
                            if (max === min)
                                h = 0;
                            else {
                                if (max === r)
                                    h = (g - b) / d + (g < b ? 6 : 0);
                                else if (max === g)
                                    h = (b - r) / d + 2;
                                else
                                    h = (r - g) / d + 4;
                                h /= 6
                            }
                            return new com.mxgraph.io.vsdx.theme.HSVColor(h,s,v)
                        }
                        ;
                        Color.decodeColorHex = function(hex) {
                            var color = parseInt(hex, 16);
                            return new Color(color >> 16 & 255,color >> 8 & 255,color & 255)
                        }
                        ;
                        Color.prototype.toHexStr = function() {
                            var r = this.red.toString(16);
                            r = r.length == 1 ? "0" + r : r;
                            var g = this.green.toString(16);
                            g = g.length == 1 ? "0" + g : g;
                            var b = this.blue.toString(16);
                            b = b.length == 1 ? "0" + b : b;
                            return "#" + r + g + b
                        }
                        ;
                        Color.prototype.getGradientClr = function() {
                            return this.gradientClr
                        }
                        ;
                        Color.prototype.setGradientClr = function(gradientClr) {
                            this.gradientClr = gradientClr
                        }
                        ;
                        return Color
                    }();
                    theme.Color = Color;
                    Color["__class"] = "com.mxgraph.io.vsdx.theme.Color"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var FillStyleFactory = function() {
                        function FillStyleFactory() {}
                        FillStyleFactory.getFillStyle = function(fillStyle) {
                            var fillObj = null;
                            switch (fillStyle.nodeName) {
                            case "a:solidFill":
                                fillObj = new com.mxgraph.io.vsdx.theme.SolidFillStyle(com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(fillStyle)));
                                break;
                            case "a:noFill":
                                fillObj = new com.mxgraph.io.vsdx.theme.NoFillStyle;
                                break;
                            case "a:gradFill":
                                fillObj = new com.mxgraph.io.vsdx.theme.GradFill(fillStyle);
                                break;
                            case "a:blipFill":
                                break;
                            case "a:pattFill":
                                break;
                            case "a:grpFill":
                                break
                            }
                            return fillObj
                        }
                        ;
                        return FillStyleFactory
                    }();
                    theme.FillStyleFactory = FillStyleFactory;
                    FillStyleFactory["__class"] = "com.mxgraph.io.vsdx.theme.FillStyleFactory"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme_2) {
                    var GradFill = function() {
                        function GradFill(elem) {
                            this.color1 = null;
                            this.color2 = null;
                            var gsLst = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(elem, "a:gsLst");
                            if (gsLst.length > 0) {
                                var gs = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(gsLst[0]);
                                if (gs.length >= 2) {
                                    this.color2 = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(gs[0]));
                                    this.color1 = com.mxgraph.io.vsdx.theme.OoxmlColorFactory.getOoxmlColor(com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(gs[gs.length - 1]))
                                }
                            }
                            if (this.color1 == null)
                                this.color1 = this.color2 = new com.mxgraph.io.vsdx.theme.SrgbClr("FFFFFF")
                        }
                        GradFill.prototype.applyStyle = function(styleValue, theme) {
                            var color = this.color1.getColor$int$com_mxgraph_io_vsdx_mxVsdxTheme(styleValue, theme);
                            color.setGradientClr(this.color2.getColor$int$com_mxgraph_io_vsdx_mxVsdxTheme(styleValue, theme));
                            return color
                        }
                        ;
                        return GradFill
                    }();
                    theme_2.GradFill = GradFill;
                    GradFill["__class"] = "com.mxgraph.io.vsdx.theme.GradFill";
                    GradFill["__interfaces"] = ["com.mxgraph.io.vsdx.theme.FillStyle"]
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var HSLColor = function() {
                        function HSLColor(hue, sat, lum) {
                            this.hue = 0;
                            this.sat = 0;
                            this.lum = 0;
                            this.hue = hue;
                            this.sat = sat;
                            this.lum = lum
                        }
                        HSLColor.prototype.getHue = function() {
                            return this.hue
                        }
                        ;
                        HSLColor.prototype.setHue = function(hue) {
                            this.hue = hue
                        }
                        ;
                        HSLColor.prototype.getSat = function() {
                            return this.sat
                        }
                        ;
                        HSLColor.prototype.setSat = function(sat) {
                            this.sat = sat
                        }
                        ;
                        HSLColor.prototype.getLum = function() {
                            return this.lum
                        }
                        ;
                        HSLColor.prototype.setLum = function(lum) {
                            this.lum = lum
                        }
                        ;
                        HSLColor.prototype.hue2rgb = function(p, q, t) {
                            if (t < 0)
                                t += 1;
                            if (t > 1)
                                t -= 1;
                            if (t < 1 / 6)
                                return p + (q - p) * 6 * t;
                            if (t < .5)
                                return q;
                            if (t < 2 / 3)
                                return p + (q - p) * (2 / 3 - t) * 6;
                            return p
                        }
                        ;
                        HSLColor.prototype.toRgb = function() {
                            var r;
                            var g;
                            var b;
                            var h = this.hue;
                            var s = this.sat;
                            var l = this.lum;
                            if (s === 0)
                                r = g = b = l;
                            else {
                                var q = l < .5 ? l * (1 + s) : l + s - l * s;
                                var p = 2 * l - q;
                                r = this.hue2rgb(p, q, h + 1 / 3);
                                g = this.hue2rgb(p, q, h);
                                b = this.hue2rgb(p, q, h - 1 / 3)
                            }
                            return new com.mxgraph.io.vsdx.theme.Color(r * 255 | 0,g * 255 | 0,b * 255 | 0)
                        }
                        ;
                        HSLColor.prototype.clamp01 = function(val) {
                            return Math.min(1, Math.max(0, val))
                        }
                        ;
                        HSLColor.prototype.tint = function(amount) {
                            this.lum *= 1 + amount / 100;
                            this.lum = this.clamp01(this.lum);
                            return this
                        }
                        ;
                        HSLColor.prototype.shade = function(amount) {
                            this.lum *= amount / 100;
                            this.lum = this.clamp01(this.lum);
                            return this
                        }
                        ;
                        HSLColor.prototype.satMod = function(amount) {
                            this.sat *= amount / 100;
                            this.sat = this.clamp01(this.sat);
                            return this
                        }
                        ;
                        HSLColor.prototype.lumMod = function(amount) {
                            this.lum *= amount / 100;
                            this.lum = this.clamp01(this.lum);
                            return this
                        }
                        ;
                        return HSLColor
                    }();
                    theme.HSLColor = HSLColor;
                    HSLColor["__class"] = "com.mxgraph.io.vsdx.theme.HSLColor"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var HSVColor = function() {
                        function HSVColor(h, s, v) {
                            this.h = 0;
                            this.s = 0;
                            this.v = 0;
                            this.h = h;
                            this.s = s;
                            this.v = v
                        }
                        HSVColor.prototype.toRgb = function() {
                            var h = this.h * 6;
                            var s = this.s;
                            var l = this.v;
                            var i = Math.floor(h);
                            var f = h - i;
                            var p = this.v * (1 - s);
                            var q = this.v * (1 - f * s);
                            var t = this.v * (1 - (1 - f) * s);
                            var mod = (i | 0) % 6;
                            var rArr = [this.v, q, p, p, t, this.v];
                            var gArr = [t, this.v, this.v, q, p, p];
                            var bArr = [p, p, t, this.v, this.v, q];
                            var r = rArr[mod];
                            var g = gArr[mod];
                            var b = bArr[mod];
                            return new com.mxgraph.io.vsdx.theme.Color(r * 255 | 0,g * 255 | 0,b * 255 | 0)
                        }
                        ;
                        HSVColor.prototype.clamp01 = function(val) {
                            return Math.min(1, Math.max(0, val))
                        }
                        ;
                        HSVColor.prototype.tint = function(amount) {
                            this.v *= 1 + amount / 100;
                            this.v = this.clamp01(this.v);
                            return this
                        }
                        ;
                        HSVColor.prototype.shade = function(amount) {
                            this.v *= amount / 100;
                            this.v = this.clamp01(this.v);
                            return this
                        }
                        ;
                        HSVColor.prototype.satMod = function(amount) {
                            this.s *= amount / 100;
                            this.s = this.clamp01(this.s);
                            return this
                        }
                        ;
                        HSVColor.prototype.lumMod = function(amount) {
                            this.v *= amount / 100;
                            this.v = this.clamp01(this.v);
                            return this
                        }
                        ;
                        HSVColor.prototype.hueMod = function(amount) {
                            this.h *= amount / 100;
                            this.h = this.clamp01(this.h);
                            return this
                        }
                        ;
                        return HSVColor
                    }();
                    theme.HSVColor = HSVColor;
                    HSVColor["__class"] = "com.mxgraph.io.vsdx.theme.HSVColor"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme_3) {
                    var LineStyle = function() {
                        function LineStyle(elem) {
                            var _this = this;
                            this.isLineDashed = false;
                            this.lineDashPattern = [];
                            this.isRoundJoin = false;
                            this.isBevelJoin = false;
                            this.isMiterJoin = false;
                            if (elem != null && elem.nodeType == 1 || elem === null) {
                                var __args = Array.prototype.slice.call(arguments);
                                this.lineWidth = 0;
                                this.lineCap = null;
                                this.lineComp = null;
                                this.fillStyle = null;
                                this.headEndType = null;
                                this.headEndWidth = 0;
                                this.headEndLen = 0;
                                this.tailEndType = null;
                                this.tailEndWidth = 0;
                                this.tailEndLen = 0;
                                this.isLineDashed = false;
                                this.lineDashPattern = [];
                                this.isRoundJoin = false;
                                this.isBevelJoin = false;
                                this.isMiterJoin = false;
                                this.lineWidth = 0;
                                this.lineCap = null;
                                this.lineComp = null;
                                this.fillStyle = null;
                                this.headEndType = null;
                                this.headEndWidth = 0;
                                this.headEndLen = 0;
                                this.tailEndType = null;
                                this.tailEndWidth = 0;
                                this.tailEndLen = 0;
                                (function() {
                                    _this.lineWidth = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(elem, "w");
                                    var lineCapAtt = elem.getAttribute("cap");
                                    if (lineCapAtt != null)
                                        switch (lineCapAtt) {
                                        case "rnd":
                                            _this.lineCap = LineStyle.LineCapType.ROUND;
                                            break;
                                        case "sq":
                                            _this.lineCap = LineStyle.LineCapType.SQUARE;
                                            break;
                                        case "flat":
                                            _this.lineCap = LineStyle.LineCapType.FLAT;
                                            break
                                        }
                                    var lineCompAtt = elem.getAttribute("cmpd");
                                    if (lineCompAtt != null)
                                        switch (lineCompAtt) {
                                        case "sng":
                                            _this.lineComp = LineStyle.CompoundLineType.SINGLE;
                                            break;
                                        case "dbl":
                                            _this.lineComp = LineStyle.CompoundLineType.DOUBLE;
                                            break;
                                        case "thickThin":
                                            _this.lineComp = LineStyle.CompoundLineType.THICK_THIN_DOUBLE;
                                            break;
                                        case "thinThick":
                                            _this.lineComp = LineStyle.CompoundLineType.THIN_THICK_DOUBLE;
                                            break;
                                        case "tri":
                                            _this.lineComp = LineStyle.CompoundLineType.THIN_THICK_THIN_TRIPLE;
                                            break
                                        }
                                    var subElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(elem);
                                    for (var index153 = 0; index153 < subElems.length; index153++) {
                                        var subElem = subElems[index153];
                                        {
                                            var name_8 = subElem.nodeName;
                                            switch (name_8) {
                                            case "a:noFill":
                                            case "a:solidFill":
                                            case "a:gradFill":
                                            case "a:pattFill":
                                                _this.fillStyle = com.mxgraph.io.vsdx.theme.FillStyleFactory.getFillStyle(subElem);
                                                break;
                                            case "a:prstDash":
                                                var val = subElem.getAttribute("val");
                                                _this.isLineDashed = true;
                                                switch (val) {
                                                case "solid":
                                                    _this.isLineDashed = false;
                                                    break;
                                                case "sysDot":
                                                case "dot":
                                                    _this.lineDashPattern.push(1) > 0;
                                                    _this.lineDashPattern.push(4) > 0;
                                                    break;
                                                case "sysDash":
                                                case "dash":
                                                    break;
                                                case "lgDash":
                                                    _this.lineDashPattern.push(12) > 0;
                                                    _this.lineDashPattern.push(4) > 0;
                                                    break;
                                                case "sysDashDot":
                                                case "dashDot":
                                                    _this.lineDashPattern.push(8) > 0;
                                                    _this.lineDashPattern.push(4) > 0;
                                                    _this.lineDashPattern.push(1) > 0;
                                                    _this.lineDashPattern.push(4) > 0;
                                                    break;
                                                case "lgDashDot":
                                                    _this.lineDashPattern.push(12) > 0;
                                                    _this.lineDashPattern.push(4) > 0;
                                                    _this.lineDashPattern.push(1) > 0;
                                                    _this.lineDashPattern.push(4) > 0;
                                                    break;
                                                case "sysDashDotDot":
                                                case "lgDashDotDot":
                                                    _this.lineDashPattern.push(12) > 0;
                                                    _this.lineDashPattern.push(4) > 0;
                                                    _this.lineDashPattern.push(1) > 0;
                                                    _this.lineDashPattern.push(4) > 0;
                                                    _this.lineDashPattern.push(1) > 0;
                                                    _this.lineDashPattern.push(4) > 0;
                                                    break
                                                }
                                                break;
                                            case "a:custDash":
                                                _this.isLineDashed = true;
                                                var dsElems = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(subElem, "a:ds");
                                                for (var index154 = 0; index154 < dsElems.length; index154++) {
                                                    var dsElem = dsElems[index154];
                                                    {
                                                        var dashLen = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(dsElem, "d");
                                                        var spaceLen = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(dsElem, "sp");
                                                        _this.lineDashPattern.push(dashLen / 1E4) > 0;
                                                        _this.lineDashPattern.push(spaceLen / 1E4) > 0
                                                    }
                                                }
                                                break;
                                            case "a:round":
                                                _this.isRoundJoin = true;
                                                break;
                                            case "a:bevel":
                                                _this.isBevelJoin = true;
                                                break;
                                            case "a:miter":
                                                var limit = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(subElem, "lim");
                                                _this.isMiterJoin = true;
                                                break;
                                            case "a:headEnd":
                                                _this.headEndType = _this.getLineEndType(subElem);
                                                _this.headEndWidth = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(subElem, "w");
                                                _this.headEndLen = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(subElem, "len");
                                                break;
                                            case "a:tailEnd":
                                                _this.tailEndType = _this.getLineEndType(subElem);
                                                _this.tailEndWidth = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(subElem, "w");
                                                _this.tailEndLen = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(subElem, "len");
                                                break;
                                            case "a:extLst":
                                                break
                                            }
                                        }
                                    }
                                }
                                )()
                            } else if (elem === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                this.lineWidth = 0;
                                this.lineCap = null;
                                this.lineComp = null;
                                this.fillStyle = null;
                                this.headEndType = null;
                                this.headEndWidth = 0;
                                this.headEndLen = 0;
                                this.tailEndType = null;
                                this.tailEndWidth = 0;
                                this.tailEndLen = 0;
                                this.isLineDashed = false;
                                this.lineDashPattern = [];
                                this.isRoundJoin = false;
                                this.isBevelJoin = false;
                                this.isMiterJoin = false;
                                this.lineWidth = 0;
                                this.lineCap = null;
                                this.lineComp = null;
                                this.fillStyle = null;
                                this.headEndType = null;
                                this.headEndWidth = 0;
                                this.headEndLen = 0;
                                this.tailEndType = null;
                                this.tailEndWidth = 0;
                                this.tailEndLen = 0
                            } else
                                throw new Error("invalid overload");
                        }
                        LineStyle.prototype.getLineEndType = function(subElem) {
                            var type = subElem.getAttribute("type");
                            var endType = null;
                            switch (type) {
                            case "none":
                                endType = LineStyle.LineEndType.NONE;
                                break;
                            case "triangle":
                                endType = LineStyle.LineEndType.TRIANGLE;
                                break;
                            case "stealth":
                                endType = LineStyle.LineEndType.STEALTH;
                                break;
                            case "diamond":
                                endType = LineStyle.LineEndType.DIAMOND;
                                break;
                            case "oval":
                                endType = LineStyle.LineEndType.OVAL;
                                break;
                            case "arrow":
                                endType = LineStyle.LineEndType.ARROW;
                                break
                            }
                            return endType
                        }
                        ;
                        LineStyle.prototype.getLineColor = function(lineColorStyle, theme) {
                            if (this.fillStyle != null)
                                return this.fillStyle.applyStyle(lineColorStyle, theme);
                            else
                                return theme.getDefaultLineClr()
                        }
                        ;
                        LineStyle.prototype.isDashed = function() {
                            return this.isLineDashed
                        }
                        ;
                        LineStyle.prototype.getLineDashPattern = function() {
                            return this.lineDashPattern
                        }
                        ;
                        LineStyle.prototype.getStartSize = function() {
                            return 4
                        }
                        ;
                        LineStyle.prototype.getEndSize = function() {
                            return 4
                        }
                        ;
                        LineStyle.prototype.getStart = function() {
                            return 0
                        }
                        ;
                        LineStyle.prototype.getEnd = function() {
                            return 0
                        }
                        ;
                        LineStyle.prototype.getLineWidth = function() {
                            return this.lineWidth
                        }
                        ;
                        return LineStyle
                    }();
                    theme_3.LineStyle = LineStyle;
                    LineStyle["__class"] = "com.mxgraph.io.vsdx.theme.LineStyle";
                    (function(LineStyle) {
                        var LineCapType;
                        (function(LineCapType) {
                            LineCapType[LineCapType["ROUND"] = 0] = "ROUND";
                            LineCapType[LineCapType["SQUARE"] = 1] = "SQUARE";
                            LineCapType[LineCapType["FLAT"] = 2] = "FLAT"
                        }
                        )(LineCapType = LineStyle.LineCapType || (LineStyle.LineCapType = {}));
                        var CompoundLineType;
                        (function(CompoundLineType) {
                            CompoundLineType[CompoundLineType["SINGLE"] = 0] = "SINGLE";
                            CompoundLineType[CompoundLineType["DOUBLE"] = 1] = "DOUBLE";
                            CompoundLineType[CompoundLineType["THICK_THIN_DOUBLE"] = 2] = "THICK_THIN_DOUBLE";
                            CompoundLineType[CompoundLineType["THIN_THICK_DOUBLE"] = 3] = "THIN_THICK_DOUBLE";
                            CompoundLineType[CompoundLineType["THIN_THICK_THIN_TRIPLE"] = 4] = "THIN_THICK_THIN_TRIPLE"
                        }
                        )(CompoundLineType = LineStyle.CompoundLineType || (LineStyle.CompoundLineType = {}));
                        var LineEndType;
                        (function(LineEndType) {
                            LineEndType[LineEndType["NONE"] = 0] = "NONE";
                            LineEndType[LineEndType["TRIANGLE"] = 1] = "TRIANGLE";
                            LineEndType[LineEndType["STEALTH"] = 2] = "STEALTH";
                            LineEndType[LineEndType["DIAMOND"] = 3] = "DIAMOND";
                            LineEndType[LineEndType["OVAL"] = 4] = "OVAL";
                            LineEndType[LineEndType["ARROW"] = 5] = "ARROW"
                        }
                        )(LineEndType = LineStyle.LineEndType || (LineStyle.LineEndType = {}))
                    }
                    )(LineStyle = theme_3.LineStyle || (theme_3.LineStyle = {}))
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var LineStyleExt = function() {
                        function LineStyleExt(elem) {
                            this.rndg = 0;
                            this.start = 0;
                            this.startSize = 0;
                            this.end = 0;
                            this.endSize = 0;
                            this.pattern = 0;
                            this.lineDashPattern = null;
                            var lineEx = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectFirstChildElement(elem);
                            this.rndg = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(lineEx, "rndg");
                            this.start = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(lineEx, "start");
                            this.startSize = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(lineEx, "startSize");
                            this.end = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(lineEx, "end");
                            this.endSize = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(lineEx, "endSize");
                            this.pattern = com.mxgraph.io.vsdx.mxVsdxUtils.getIntAttr$org_w3c_dom_Element$java_lang_String(lineEx, "pattern");
                            this.lineDashPattern = com.mxgraph.io.vsdx.Style.getLineDashPattern(this.pattern)
                        }
                        LineStyleExt.prototype.getRndg = function() {
                            return this.rndg
                        }
                        ;
                        LineStyleExt.prototype.getStart = function() {
                            return this.start
                        }
                        ;
                        LineStyleExt.prototype.getStartSize = function() {
                            return this.startSize
                        }
                        ;
                        LineStyleExt.prototype.getEnd = function() {
                            return this.end
                        }
                        ;
                        LineStyleExt.prototype.getEndSize = function() {
                            return this.endSize
                        }
                        ;
                        LineStyleExt.prototype.isDashed = function() {
                            return this.pattern > 1
                        }
                        ;
                        LineStyleExt.prototype.getLineDashPattern = function() {
                            return this.lineDashPattern
                        }
                        ;
                        return LineStyleExt
                    }();
                    theme.LineStyleExt = LineStyleExt;
                    LineStyleExt["__class"] = "com.mxgraph.io.vsdx.theme.LineStyleExt"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme_4) {
                    var NoFillStyle = function() {
                        function NoFillStyle() {}
                        NoFillStyle.prototype.applyStyle = function(styleValue, theme) {
                            return com.mxgraph.io.vsdx.theme.Color.NONE_$LI$()
                        }
                        ;
                        return NoFillStyle
                    }();
                    theme_4.NoFillStyle = NoFillStyle;
                    NoFillStyle["__class"] = "com.mxgraph.io.vsdx.theme.NoFillStyle";
                    NoFillStyle["__interfaces"] = ["com.mxgraph.io.vsdx.theme.FillStyle"]
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme_5) {
                    var OoxmlColor = function() {
                        function OoxmlColor() {
                            this.tint = 0;
                            this.shade = 0;
                            this.comp = 0;
                            this.inv = 0;
                            this.gray = 0;
                            this.alpha = 0;
                            this.alphaOff = 0;
                            this.alphaMod = 0;
                            this.hue = 0;
                            this.hueOff = 0;
                            this.hueMod = 0;
                            this.sat = 0;
                            this.satOff = 0;
                            this.satMod = 0;
                            this.lum = 0;
                            this.lumOff = 0;
                            this.lumMod = 0;
                            this.red = 0;
                            this.redOff = 0;
                            this.redMod = 0;
                            this.green = 0;
                            this.greenOff = 0;
                            this.greenMod = 0;
                            this.blue = 0;
                            this.blueOff = 0;
                            this.blueMod = 0;
                            this.gamma = 0;
                            this.invGamma = 0;
                            this.isDynamic = false;
                            this.isInitialized = false;
                            this.hasEffects = false;
                            this.color = null
                        }
                        OoxmlColor.prototype.calcColor = function(styleColor, theme) {
                            if (this.hasEffects) {
                                var hsvColor = this.color.toHsv();
                                if (this.tint !== 0)
                                    hsvColor.tint(this.tint);
                                if (this.shade !== 0)
                                    hsvColor.shade(this.shade);
                                if (this.satMod !== 0)
                                    hsvColor.satMod(this.satMod);
                                if (this.lumMod !== 0)
                                    hsvColor.lumMod(this.lumMod);
                                if (this.hueMod !== 0)
                                    hsvColor.hueMod(this.hueMod);
                                this.color = hsvColor.toRgb()
                            }
                        }
                        ;
                        OoxmlColor.prototype.getColor$int$com_mxgraph_io_vsdx_mxVsdxTheme = function(styleColor, theme) {
                            if (this.isDynamic || !this.isInitialized) {
                                this.calcColor(styleColor, theme);
                                this.isInitialized = true
                            }
                            return this.color
                        }
                        ;
                        OoxmlColor.prototype.getColor = function(styleColor, theme) {
                            if ((typeof styleColor === "number" || styleColor === null) && (theme != null && theme instanceof com.mxgraph.io.vsdx.mxVsdxTheme || theme === null))
                                return this.getColor$int$com_mxgraph_io_vsdx_mxVsdxTheme(styleColor, theme);
                            else if ((styleColor != null && styleColor instanceof com.mxgraph.io.vsdx.mxVsdxTheme || styleColor === null) && theme === undefined)
                                return this.getColor$com_mxgraph_io_vsdx_mxVsdxTheme(styleColor);
                            else
                                throw new Error("invalid overload");
                        }
                        ;
                        OoxmlColor.prototype.getColor$com_mxgraph_io_vsdx_mxVsdxTheme = function(theme) {
                            return this.getColor$int$com_mxgraph_io_vsdx_mxVsdxTheme(-1, theme)
                        }
                        ;
                        OoxmlColor.prototype.setTint = function(tint) {
                            this.tint = tint;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setShade = function(shade) {
                            this.shade = shade;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setComp = function(comp) {
                            this.comp = comp;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setInv = function(inv) {
                            this.inv = inv;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setGray = function(gray) {
                            this.gray = gray;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setAlpha = function(alpha) {
                            this.alpha = alpha;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setAlphaOff = function(alphaOff) {
                            this.alphaOff = alphaOff;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setAlphaMod = function(alphaMod) {
                            this.alphaMod = alphaMod;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setHue = function(hue) {
                            this.hue = hue;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setHueOff = function(hueOff) {
                            this.hueOff = hueOff;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setHueMod = function(hueMod) {
                            this.hueMod = hueMod;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setSat = function(sat) {
                            this.sat = sat;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setSatOff = function(satOff) {
                            this.satOff = satOff;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setSatMod = function(satMod) {
                            this.satMod = satMod;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setLum = function(lum) {
                            this.lum = lum;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setLumOff = function(lumOff) {
                            this.lumOff = lumOff;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setLumMod = function(lumMod) {
                            this.lumMod = lumMod;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setRed = function(red) {
                            this.red = red;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setRedOff = function(redOff) {
                            this.redOff = redOff;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setRedMod = function(redMod) {
                            this.redMod = redMod;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setGreen = function(green) {
                            this.green = green;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setGreenOff = function(greenOff) {
                            this.greenOff = greenOff;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setGreenMod = function(greenMod) {
                            this.greenMod = greenMod;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setBlue = function(blue) {
                            this.blue = blue;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setBlueOff = function(blueOff) {
                            this.blueOff = blueOff;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setBlueMod = function(blueMod) {
                            this.blueMod = blueMod;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setGamma = function(gamma) {
                            this.gamma = gamma;
                            this.hasEffects = true
                        }
                        ;
                        OoxmlColor.prototype.setInvGamma = function(invGamma) {
                            this.invGamma = invGamma;
                            this.hasEffects = true
                        }
                        ;
                        return OoxmlColor
                    }();
                    theme_5.OoxmlColor = OoxmlColor;
                    OoxmlColor["__class"] = "com.mxgraph.io.vsdx.theme.OoxmlColor"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var OoxmlColorFactory = function() {
                        function OoxmlColorFactory() {}
                        OoxmlColorFactory.getOoxmlColor = function(element) {
                            var color = null;
                            var nodeName = element.nodeName;
                            switch (nodeName) {
                            case "a:scrgbClr":
                                color = new com.mxgraph.io.vsdx.theme.ScrgbClr(parseInt(element.getAttribute("r")),parseInt(element.getAttribute("g")),parseInt(element.getAttribute("b")));
                                break;
                            case "a:srgbClr":
                                color = new com.mxgraph.io.vsdx.theme.SrgbClr(element.getAttribute("val"));
                                break;
                            case "a:hslClr":
                                color = new com.mxgraph.io.vsdx.theme.HslClr(parseInt(element.getAttribute("hue")),parseInt(element.getAttribute("sat")),parseInt(element.getAttribute("lum")));
                                break;
                            case "a:sysClr":
                                color = new com.mxgraph.io.vsdx.theme.SysClr(element.getAttribute("val"),element.getAttribute("lastClr"));
                                break;
                            case "a:schemeClr":
                                color = new com.mxgraph.io.vsdx.theme.SchemeClr(element.getAttribute("val"));
                                break;
                            case "a:prstClr":
                                color = new com.mxgraph.io.vsdx.theme.SrgbClr(element.getAttribute("val"));
                                break
                            }
                            var effects = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildElements(element);
                            for (var index155 = 0; index155 < effects.length; index155++) {
                                var effect = effects[index155];
                                {
                                    var effVal = parseInt(effect.getAttribute("val")) / 1E3 | 0;
                                    var effName = effect.nodeName;
                                    switch (effName) {
                                    case "a:tint":
                                        color.setTint(effVal);
                                        break;
                                    case "a:shade":
                                        color.setShade(effVal);
                                        break;
                                    case "a:satMod":
                                        color.setSatMod(effVal);
                                        break;
                                    case "a:lumMod":
                                        color.setLumMod(effVal);
                                        break;
                                    case "a:hueMod":
                                        color.setHueMod(effVal);
                                        break
                                    }
                                }
                            }
                            return color
                        }
                        ;
                        return OoxmlColorFactory
                    }();
                    theme.OoxmlColorFactory = OoxmlColorFactory;
                    OoxmlColorFactory["__class"] = "com.mxgraph.io.vsdx.theme.OoxmlColorFactory"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var QuickStyleVals = function() {
                        function QuickStyleVals(quickStyleEffectsMatrix, quickStyleFillColor, quickStyleFillMatrix, quickStyleFontColor, quickStyleFontMatrix, quickStyleLineColor, quickStyleLineMatrix, quickStyleShadowColor, quickStyleType, quickStyleVariation) {
                            this.quickStyleEffectsMatrix = 0;
                            this.quickStyleFillColor = 0;
                            this.quickStyleFillMatrix = 0;
                            this.quickStyleFontColor = 0;
                            this.quickStyleFontMatrix = 0;
                            this.quickStyleLineColor = 0;
                            this.quickStyleLineMatrix = 0;
                            this.quickStyleShadowColor = 0;
                            this.quickStyleType = 0;
                            this.quickStyleVariation = 0;
                            this.quickStyleEffectsMatrix = quickStyleEffectsMatrix;
                            this.quickStyleFillColor = quickStyleFillColor;
                            this.quickStyleFillMatrix = quickStyleFillMatrix;
                            this.quickStyleFontColor = quickStyleFontColor;
                            this.quickStyleFontMatrix = quickStyleFontMatrix;
                            this.quickStyleLineColor = quickStyleLineColor;
                            this.quickStyleLineMatrix = quickStyleLineMatrix;
                            this.quickStyleShadowColor = quickStyleShadowColor;
                            this.quickStyleType = quickStyleType;
                            this.quickStyleVariation = quickStyleVariation
                        }
                        QuickStyleVals.prototype.getQuickStyleEffectsMatrix = function() {
                            return this.quickStyleEffectsMatrix
                        }
                        ;
                        QuickStyleVals.prototype.getQuickStyleFillColor = function() {
                            return this.quickStyleFillColor
                        }
                        ;
                        QuickStyleVals.prototype.getQuickStyleFillMatrix = function() {
                            return this.quickStyleFillMatrix
                        }
                        ;
                        QuickStyleVals.prototype.getQuickStyleFontColor = function() {
                            return this.quickStyleFontColor
                        }
                        ;
                        QuickStyleVals.prototype.getQuickStyleFontMatrix = function() {
                            return this.quickStyleFontMatrix
                        }
                        ;
                        QuickStyleVals.prototype.getQuickStyleLineColor = function() {
                            return this.quickStyleLineColor
                        }
                        ;
                        QuickStyleVals.prototype.getQuickStyleLineMatrix = function() {
                            return this.quickStyleLineMatrix
                        }
                        ;
                        QuickStyleVals.prototype.getQuickStyleShadowColor = function() {
                            return this.quickStyleShadowColor
                        }
                        ;
                        QuickStyleVals.prototype.getQuickStyleType = function() {
                            return this.quickStyleType
                        }
                        ;
                        QuickStyleVals.prototype.getQuickStyleVariation = function() {
                            return this.quickStyleVariation
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleEffectsMatrix = function(quickStyleEffectsMatrix) {
                            this.quickStyleEffectsMatrix = quickStyleEffectsMatrix
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleFillColor = function(quickStyleFillColor) {
                            this.quickStyleFillColor = quickStyleFillColor
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleFillMatrix = function(quickStyleFillMatrix) {
                            this.quickStyleFillMatrix = quickStyleFillMatrix
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleFontColor = function(quickStyleFontColor) {
                            this.quickStyleFontColor = quickStyleFontColor
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleFontMatrix = function(quickStyleFontMatrix) {
                            this.quickStyleFontMatrix = quickStyleFontMatrix
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleLineColor = function(quickStyleLineColor) {
                            this.quickStyleLineColor = quickStyleLineColor
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleLineMatrix = function(quickStyleLineMatrix) {
                            this.quickStyleLineMatrix = quickStyleLineMatrix
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleShadowColor = function(quickStyleShadowColor) {
                            this.quickStyleShadowColor = quickStyleShadowColor
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleType = function(quickStyleType) {
                            this.quickStyleType = quickStyleType
                        }
                        ;
                        QuickStyleVals.prototype.setQuickStyleVariation = function(quickStyleVariation) {
                            this.quickStyleVariation = quickStyleVariation
                        }
                        ;
                        return QuickStyleVals
                    }();
                    theme.QuickStyleVals = QuickStyleVals;
                    QuickStyleVals["__class"] = "com.mxgraph.io.vsdx.theme.QuickStyleVals"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme_6) {
                    var SolidFillStyle = function() {
                        function SolidFillStyle(color) {
                            this.color = null;
                            this.color = color
                        }
                        SolidFillStyle.prototype.applyStyle = function(styleValue, theme) {
                            return this.color.getColor$int$com_mxgraph_io_vsdx_mxVsdxTheme(styleValue, theme)
                        }
                        ;
                        return SolidFillStyle
                    }();
                    theme_6.SolidFillStyle = SolidFillStyle;
                    SolidFillStyle["__class"] = "com.mxgraph.io.vsdx.theme.SolidFillStyle";
                    SolidFillStyle["__interfaces"] = ["com.mxgraph.io.vsdx.theme.FillStyle"]
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var online;
        (function(online) {
            var Constants = function() {
                function Constants() {}
                Constants.MAX_AREA_$LI$ = function() {
                    if (Constants.MAX_AREA == null)
                        Constants.MAX_AREA = 1E4 * 1E4;
                    return Constants.MAX_AREA
                }
                ;
                return Constants
            }();
            Constants.MAX_REQUEST_SIZE = 52428800;
            Constants.IMAGE_DOMAIN = "http://img.diagramly.com/";
            online.Constants = Constants;
            Constants["__class"] = "com.mxgraph.online.Constants"
        }
        )(online = mxgraph.online || (mxgraph.online = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var online;
        (function(online) {
            var Utils = function() {
                function Utils() {}
                Utils.getRotatedPoint = function(pt, cos, sin, c) {
                    var x = pt.x - c.x;
                    var y = pt.y - c.y;
                    var x1 = x * cos - y * sin;
                    var y1 = y * cos + x * sin;
                    return new mxPoint(x1 + c.x,y1 + c.y)
                }
                ;
                Utils.rotatedGeometry = function(geo, rotation, cx, cy) {
                    rotation = function(x) {
                        return x * Math.PI / 180
                    }(rotation);
                    var cos = Math.cos(rotation);
                    var sin = Math.sin(rotation);
                    var x = geo.getCenterX() - cx;
                    var y = geo.getCenterY() - cy;
                    var x1 = x * cos - y * sin;
                    var y1 = y * cos + x * sin;
                    geo.x = Math.round(x1 + cx - geo.width / 2);
                    geo.y = Math.round(y1 + cy - geo.height / 2)
                }
                ;
                return Utils
            }();
            Utils.CHARSET_FOR_URL_ENCODING = "ISO-8859-1";
            online.Utils = Utils;
            Utils["__class"] = "com.mxgraph.online.Utils"
        }
        )(online = mxgraph.online || (mxgraph.online = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var ArcTo = function(_super) {
                        __extends(ArcTo, _super);
                        function ArcTo(index, x, y, a) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.a = a;
                            return _this
                        }
                        ArcTo.prototype.handle = function(p, shape) {
                            if (this.x != null && this.y != null && this.a != null) {
                                var h = shape.getHeight();
                                var w = shape.getWidth();
                                var x0 = Math.floor(Math.round(shape.getLastX() * w) / 100);
                                var y0 = Math.floor(Math.round(shape.getLastY() * h) / 100);
                                var x = this.x * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var y = this.y * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                y = h - y;
                                var a = this.a * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var dx = Math.abs(x - x0);
                                var dy = Math.abs(y - y0);
                                var rx = a * .5 + (dx * dx + dy * dy) / (8 * a);
                                var ry = rx;
                                var r0 = Math.abs(rx);
                                rx = rx * 100 / w;
                                ry = ry * 100 / h;
                                x = x * 100 / w;
                                y = y * 100 / h;
                                rx = Math.round(rx * 100) / 100;
                                ry = Math.round(ry * 100) / 100;
                                x = Math.round(x * 100) / 100;
                                y = Math.round(y * 100) / 100;
                                a = Math.round(a * 100) / 100;
                                rx = Math.abs(rx);
                                ry = Math.abs(ry);
                                var sf = a < 0 ? "1" : "0";
                                var laf = r0 < Math.abs(a) ? "1" : "0";
                                shape.setLastX(x);
                                shape.setLastY(y);
                                return '<arc rx="' + (new String(rx)).toString() + '" ry="' + (new String(ry)).toString() + '" x="' + (new String(x)).toString() + '" y="' + (new String(y)).toString() + '" x-axis-rotation="0" large-arc-flag="' + laf + '" sweep-flag="' + sf + '"/>'
                            }
                            return ""
                        }
                        ;
                        return ArcTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.ArcTo = ArcTo;
                    ArcTo["__class"] = "com.mxgraph.io.vsdx.geometry.ArcTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var DelRow = function(_super) {
                        __extends(DelRow, _super);
                        function DelRow(index) {
                            return _super.call(this, index, null, null) || this
                        }
                        DelRow.prototype.handle = function(p, shape) {
                            return ""
                        }
                        ;
                        return DelRow
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.DelRow = DelRow;
                    DelRow["__class"] = "com.mxgraph.io.vsdx.geometry.DelRow"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var Ellipse = function(_super) {
                        __extends(Ellipse, _super);
                        function Ellipse(index, x, y, a, b, c, d) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.a = a;
                            _this.b = b;
                            _this.c = c;
                            _this.d = d;
                            return _this
                        }
                        Ellipse.prototype.handle = function(p, shape) {
                            if (this.x != null && this.y != null && this.a != null && this.b != null && this.c != null && this.d != null) {
                                var h = shape.getHeight();
                                var w = shape.getWidth();
                                var x = this.x * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var y = this.y * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                y = h - y;
                                var a = this.a * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var b = this.b * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                b = h - b;
                                var c = this.c * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var d = this.d * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                d = h - d;
                                var dx1 = Math.abs(a - x);
                                var dy1 = Math.abs(b - y);
                                var r1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
                                var dx2 = Math.abs(c - x);
                                var dy2 = Math.abs(d - y);
                                var r2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
                                var newX = x * 100 / w;
                                var newY = y * 100 / h;
                                var newW = r1 * 100 / w / 2;
                                var newH = r2 * 100 / h / 2;
                                newH = Math.round(newH * 100) / 100;
                                newW = Math.round(newW * 100) / 100;
                                var newX1 = Math.round((newX - 2 * newW) * 100) / 100;
                                var newX2 = Math.round((newX + 2 * newW) * 100) / 100;
                                newY = Math.round(newY * 100) / 100;
                                return '<move x="' + (new String(newX1)).toString() + '" y="' + (new String(newY)).toString() + '"/><arc rx="' + (new String(newW)).toString() + '" ry="' + (new String(newH)).toString() + '" x="' + (new String(newX2)).toString() + '" y="' + (new String(newY)).toString() + '" x-axis-rotation="0" large-arc-flag="1" sweep-flag="0"/><arc rx="' + (new String(newW)).toString() + '" ry="' + (new String(newH)).toString() + '" x="' + (new String(newX1)).toString() + '" y="' + (new String(newY)).toString() + '" x-axis-rotation="0" large-arc-flag="1" sweep-flag="0"/>'
                            }
                            return ""
                        }
                        ;
                        return Ellipse
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.Ellipse = Ellipse;
                    Ellipse["__class"] = "com.mxgraph.io.vsdx.geometry.Ellipse"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var EllipticalArcTo = function(_super) {
                        __extends(EllipticalArcTo, _super);
                        function EllipticalArcTo(index, x, y, a, b, c, d) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.a = a;
                            _this.b = b;
                            _this.c = c;
                            _this.d = d;
                            return _this
                        }
                        EllipticalArcTo.prototype.handle = function(p, shape) {
                            if (this.x != null && this.y != null && this.a != null && this.b != null && this.c != null && this.d != null) {
                                var h = shape.getHeight();
                                var w = shape.getWidth();
                                var x = this.x * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var y = this.y * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                y = h - y;
                                var a = this.a * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var b = this.b * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var c = this.c;
                                var d = this.d;
                                x = x * 100 / w;
                                y = y * 100 / h;
                                var x1 = shape.getLastX() * w / 100;
                                var y1 = shape.getLastY() * h / 100;
                                var x2 = x * w / 100;
                                var y2 = y * h / 100;
                                var x3 = a;
                                var y3 = h - b;
                                var ang = -c;
                                var p1x = Math.sqrt(x1 * x1 + y1 * y1) * Math.cos(Math.atan2(y1, x1) - ang);
                                var p1y = Math.sqrt(x1 * x1 + y1 * y1) * Math.sin(Math.atan2(y1, x1) - ang);
                                var p2x = Math.sqrt(x2 * x2 + y2 * y2) * Math.cos(Math.atan2(y2, x2) - ang);
                                var p2y = Math.sqrt(x2 * x2 + y2 * y2) * Math.sin(Math.atan2(y2, x2) - ang);
                                var p3x = Math.sqrt(x3 * x3 + y3 * y3) * Math.cos(Math.atan2(y3, x3) - ang);
                                var p3y = Math.sqrt(x3 * x3 + y3 * y3) * Math.sin(Math.atan2(y3, x3) - ang);
                                var p0x = ((p1x - p2x) * (p1x + p2x) * (p2y - p3y) - (p2x - p3x) * (p2x + p3x) * (p1y - p2y) + d * d * (p1y - p2y) * (p2y - p3y) * (p1y - p3y)) / (2 * ((p1x - p2x) * (p2y - p3y) - (p2x - p3x) * (p1y - p2y)));
                                var p0y = ((p1x - p2x) * (p2x - p3x) * (p1x - p3x) / (d * d) + (p2x - p3x) * (p1y - p2y) * (p1y + p2y) - (p1x - p2x) * (p2y - p3y) * (p2y + p3y)) / (2 * ((p2x - p3x) * (p1y - p2y) - (p1x - p2x) * (p2y - p3y)));
                                var newX = Math.sqrt(p0x * p0x + p0y * p0y) * Math.cos(Math.atan2(p0y, p0x) + ang);
                                var newY = Math.sqrt(p0x * p0x + p0y * p0y) * Math.sin(Math.atan2(p0y, p0x) + ang);
                                newX = newX * w / 100;
                                newY = newY * h / 100;
                                var dx = p1x - p0x;
                                var dy = p1y - p0y;
                                var rx = Math.sqrt(dx * dx + dy * dy * d * d);
                                var ry = rx / d;
                                var rot = function(x) {
                                    return x * 180 / Math.PI
                                }(ang);
                                rx = rx * 100 / w;
                                ry = ry * 100 / h;
                                x = Math.round(x * 100) / 100;
                                y = Math.round(y * 100) / 100;
                                rx = Math.round(rx * 100) / 100;
                                ry = Math.round(ry * 100) / 100;
                                rot = Math.round(rot * 100) / 100;
                                var sweep = (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1);
                                var sf = sweep > 0 ? "0" : "1";
                                var laf = "0";
                                if (com.mxgraph.io.vsdx.mxVsdxUtils.isInsideTriangle(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) && this.isReflexAngle(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y))
                                    laf = "1";
                                shape.setLastX(x);
                                shape.setLastY(y);
                                return '<arc rx="' + (new String(rx)).toString() + '" ry="' + (new String(ry)).toString() + '" x="' + (new String(x)).toString() + '" y="' + (new String(y)).toString() + '" x-axis-rotation="' + (new String(rot)).toString() + '" large-arc-flag="' + laf + '" sweep-flag="' + sf + '"/>'
                            }
                            return ""
                        }
                        ;
                        EllipticalArcTo.prototype.isReflexAngle = function(x0, y0, x1, y1, x2, y2, x3, y3) {
                            x1 = x1 - x0;
                            y1 = y1 - y0;
                            x2 = x2 - x0;
                            y2 = y2 - y0;
                            x2 = x3 - x0;
                            y3 = y3 - y0;
                            x0 = 0;
                            y0 = 0;
                            var aStart = function(x) {
                                return x * 180 / Math.PI
                            }(Math.atan2(y1, x1) - Math.atan2(y0, x0));
                            var aEnd = function(x) {
                                return x * 180 / Math.PI
                            }(Math.atan2(y2, x2) - Math.atan2(y0, x0));
                            var aCP = function(x) {
                                return x * 180 / Math.PI
                            }(Math.atan2(y3, x3) - Math.atan2(y0, x0));
                            aStart = (aStart - aCP) % 360;
                            aEnd = (aEnd - aCP) % 360;
                            if (aStart > 180)
                                aStart = aStart - 360;
                            else if (aStart < -180)
                                aStart = aStart + 360;
                            if (aEnd > 180)
                                aEnd = aEnd - 360;
                            else if (aEnd < -180)
                                aEnd = aEnd + 360;
                            if (aStart > 0 && aEnd < 0 || aStart < 0 && aEnd > 0)
                                if (Math.abs(aStart - aEnd) > 180)
                                    return true;
                            return false
                        }
                        ;
                        return EllipticalArcTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.EllipticalArcTo = EllipticalArcTo;
                    EllipticalArcTo["__class"] = "com.mxgraph.io.vsdx.geometry.EllipticalArcTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var InfiniteLine = function(_super) {
                        __extends(InfiniteLine, _super);
                        function InfiniteLine(index, x, y, a, b) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.a = a;
                            _this.b = b;
                            return _this
                        }
                        InfiniteLine.prototype.handle = function(p, shape) {
                            return ""
                        }
                        ;
                        return InfiniteLine
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.InfiniteLine = InfiniteLine;
                    InfiniteLine["__class"] = "com.mxgraph.io.vsdx.geometry.InfiniteLine"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var LineTo = function(_super) {
                        __extends(LineTo, _super);
                        function LineTo(index, x, y) {
                            return _super.call(this, index, x, y) || this
                        }
                        LineTo.prototype.handle = function(p, shape) {
                            var x = p.x;
                            var y = p.y;
                            var h = shape.getHeight();
                            var w = shape.getWidth();
                            if (this.x != null && this.y != null) {
                                x = this.x * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                y = this.y * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$()
                            }
                            x = x * 100 / w;
                            y = y * 100 / h;
                            y = 100 - y;
                            x = Math.round(x * 100) / 100;
                            y = Math.round(y * 100) / 100;
                            p.x = x;
                            p.y = y;
                            shape.setLastX(x);
                            shape.setLastY(y);
                            return '<line x="' + (new String(x)).toString() + '" y="' + (new String(y)).toString() + '"/>'
                        }
                        ;
                        return LineTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.LineTo = LineTo;
                    LineTo["__class"] = "com.mxgraph.io.vsdx.geometry.LineTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var MoveTo = function(_super) {
                        __extends(MoveTo, _super);
                        function MoveTo(index, x, y) {
                            return _super.call(this, index, x, y) || this
                        }
                        MoveTo.prototype.handle = function(p, shape) {
                            var x = p.x;
                            var y = p.y;
                            var h = shape.getHeight();
                            var w = shape.getWidth();
                            if (this.x != null && this.y != null) {
                                x = this.x * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                y = this.y * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$()
                            }
                            x = x * 100 / w;
                            y = y * 100 / h;
                            y = 100 - y;
                            x = Math.round(x * 100) / 100;
                            y = Math.round(y * 100) / 100;
                            p.x = x;
                            p.y = y;
                            shape.setLastX(x);
                            shape.setLastY(y);
                            shape.setLastMoveX(x);
                            shape.setLastMoveY(y);
                            return '<move x="' + (new String(x)).toString() + '" y="' + (new String(y)).toString() + '"/>'
                        }
                        ;
                        return MoveTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.MoveTo = MoveTo;
                    MoveTo["__class"] = "com.mxgraph.io.vsdx.geometry.MoveTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var NURBSTo = function(_super) {
                        __extends(NURBSTo, _super);
                        function NURBSTo(index, x, y, a, b, c, d, e) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.a = a;
                            _this.b = b;
                            _this.c = c;
                            _this.d = d;
                            _this.formulaE = e;
                            return _this
                        }
                        NURBSTo.prototype.handle = function(p, shape) {
                            if (this.x != null && this.y != null && this.formulaE != null) {
                                var h = shape.getHeight();
                                var w = shape.getWidth();
                                var x = this.x * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var y = this.y * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var eValue = this.formulaE.split("NURBS(").join("");
                                eValue = eValue.split(")").join("");
                                var nurbs = new NURBSTo.Nurbs(this,eValue,w,h);
                                if (nurbs.getSize() >= 2) {
                                    var x1 = nurbs.getX(0);
                                    var y1 = nurbs.getY(0);
                                    var x2 = nurbs.getX(1);
                                    var y2 = nurbs.getY(1);
                                    y = y * 100 / h;
                                    x = x * 100 / w;
                                    y = 100 - y;
                                    x = Math.round(x * 100) / 100;
                                    y = Math.round(y * 100) / 100;
                                    x1 = Math.round(x1 * 100) / 100;
                                    y1 = Math.round(y1 * 100) / 100;
                                    x2 = Math.round(x2 * 100) / 100;
                                    y2 = Math.round(y2 * 100) / 100;
                                    shape.setLastX(x);
                                    shape.setLastY(y);
                                    if (nurbs.getDegree() === 3 && nurbs.isOrderedByThree(this.getA())) {
                                        var cp1 = [];
                                        var cp2 = [];
                                        var nut = [];
                                        var nurbsize = nurbs.getSize();
                                        for (var i = 0; i < nurbsize - 1; i = i + 3) {
                                            cp1.push(new mxPoint(nurbs.getX(i),nurbs.getY(i))) > 0;
                                            cp2.push(new mxPoint(nurbs.getX(i + 1),nurbs.getY(i + 1))) > 0;
                                            if (i < nurbsize - 2)
                                                nut.push(new mxPoint(nurbs.getX(i + 2),nurbs.getY(i + 2))) > 0;
                                            else
                                                nut.push(new mxPoint(x,y)) > 0
                                        }
                                        var result = "";
                                        for (var i = 0; i < cp1.length; i++)
                                            result += '<curve x1="' + cp1[i].x + '" y1="' + cp1[i].y + '" x2="' + cp2[i].x + '" y2="' + cp2[i].y + '" x3="' + nut[i].x + '" y3="' + nut[i].y + '"/>\n';
                                        return result
                                    } else
                                        return '<curve x1="' + (new String(x1)).toString() + '" y1="' + (new String(y1)).toString() + '" x2="' + (new String(x2)).toString() + '" y2="' + (new String(y2)).toString() + '" x3="' + (new String(x)).toString() + '" y3="' + (new String(y)).toString() + '"/>'
                                }
                            }
                            return ""
                        }
                        ;
                        return NURBSTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.NURBSTo = NURBSTo;
                    NURBSTo["__class"] = "com.mxgraph.io.vsdx.geometry.NURBSTo";
                    (function(NURBSTo) {
                        var Nurbs = function() {
                            function Nurbs(__parent, s, w, h) {
                                this.__parent = __parent;
                                this.nurbsValues = [];
                                var n = s.split(/\s*,\s*/).slice(0);
                                for (var i = 0; i < n.length; i++)
                                    if (i > 3 && i % 4 === 0)
                                        this.nurbsValues.push(parseFloat(n[i]) * 100) > 0;
                                    else if (i > 3 && i % 4 === 1)
                                        this.nurbsValues.push(100 - parseFloat(n[i]) * 100) > 0;
                                    else
                                        this.nurbsValues.push(parseFloat(n[i])) > 0
                            }
                            Nurbs.prototype.isOrderedByThree = function(lastKnot) {
                                for (var i = 0; i + 2 < this.getSize(); i = i + 3) {
                                    var k_1 = Math.round(this.getKnot(i) * 100) / 100;
                                    var k1_1 = Math.round(this.getKnot(i + 1) * 100) / 100;
                                    var k2 = Math.round(this.getKnot(i + 2) * 100) / 100;
                                    if (k_1 !== k1_1 || k_1 !== k2 || k1_1 !== k2)
                                        return false
                                }
                                var k = Math.round(this.getKnot(this.getSize() - 2) * 10) / 10;
                                var k1 = Math.round(this.getKnot(this.getSize() - 1) * 10) / 10;
                                var lk = Math.round(lastKnot * 10) / 10;
                                if (k !== k1 || k !== lk || k1 !== lk)
                                    return false;
                                return true
                            }
                            ;
                            Nurbs.prototype.getSize = function() {
                                return (this.nurbsValues.length / 4 | 0) - 1
                            }
                            ;
                            Nurbs.prototype.getKnotLast = function() {
                                return this.nurbsValues[0]
                            }
                            ;
                            Nurbs.prototype.getDegree = function() {
                                return this.nurbsValues[1]
                            }
                            ;
                            Nurbs.prototype.getXType = function() {
                                return this.nurbsValues[2]
                            }
                            ;
                            Nurbs.prototype.getYType = function() {
                                return this.nurbsValues[3]
                            }
                            ;
                            Nurbs.prototype.getX = function(i) {
                                return this.nurbsValues[(i + 1) * 4]
                            }
                            ;
                            Nurbs.prototype.getY = function(i) {
                                return this.nurbsValues[(i + 1) * 4 + 1]
                            }
                            ;
                            Nurbs.prototype.getKnot = function(i) {
                                return this.nurbsValues[(i + 1) * 4 + 2]
                            }
                            ;
                            Nurbs.prototype.getWeight = function(i) {
                                return this.nurbsValues[(i + 1) * 4 + 3]
                            }
                            ;
                            return Nurbs
                        }();
                        NURBSTo.Nurbs = Nurbs;
                        Nurbs["__class"] = "com.mxgraph.io.vsdx.geometry.NURBSTo.Nurbs"
                    }
                    )(NURBSTo = geometry.NURBSTo || (geometry.NURBSTo = {}))
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var PolylineTo = function(_super) {
                        __extends(PolylineTo, _super);
                        function PolylineTo(index, x, y, a) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.formulaA = a;
                            return _this
                        }
                        PolylineTo.prototype.handle = function(p, shape) {
                            var result = "";
                            if (this.x != null && this.y != null && this.formulaA != null) {
                                var h = shape.getHeight();
                                var w = shape.getWidth();
                                var x = this.x * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var y = this.y * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                x = x * 100 / w;
                                y = y * 100 / h;
                                y = 100 - y;
                                x = Math.round(x * 100) / 100;
                                y = Math.round(y * 100) / 100;
                                var aValue = this.formulaA.replace(new RegExp("\\s","g"), "").toLowerCase().replace(new RegExp("polyline\\(","g"), "").replace(new RegExp("\\)","g"), "");
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(aValue, "inh"))
                                    throw Object.defineProperty(new Error, "__classes", {
                                        configurable: true,
                                        value: ["java.lang.Throwable", "java.lang.Object", "java.lang.RuntimeException", "java.lang.IllegalArgumentException", "java.lang.Exception"]
                                    });
                                var polyEntriesList = aValue.split(",").slice(0).slice(0);
                                var xRel = parseFloat(polyEntriesList.splice(0, 1));
                                var yRel = parseFloat(polyEntriesList.splice(0, 1));
                                var currX = 0;
                                var currY = 0;
                                while (polyEntriesList.length > 0) {
                                    currX = parseFloat(polyEntriesList.splice(0, 1)) * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                    currY = parseFloat(polyEntriesList.splice(0, 1)) * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                    if (xRel === 1)
                                        currX = currX * 100 / w;
                                    if (xRel === 1)
                                        currY = currY * 100 / h;
                                    currY = 100 - currY;
                                    currX = Math.round(currX * 100) / 100;
                                    currY = Math.round(currY * 100) / 100;
                                    shape.setLastX(currX);
                                    shape.setLastY(currY);
                                    result += '<line x="' + (new String(currX)).toString() + '" y="' + (new String(currY)).toString() + '"/>'
                                }
                                result += '<line x="' + (new String(x)).toString() + '" y="' + (new String(y)).toString() + '"/>';
                                if (shape.getLastMoveX() === x && shape.getLastMoveY() === y)
                                    result += "<close/>"
                            }
                            return result
                        }
                        ;
                        return PolylineTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.PolylineTo = PolylineTo;
                    PolylineTo["__class"] = "com.mxgraph.io.vsdx.geometry.PolylineTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var RelCubBezTo = function(_super) {
                        __extends(RelCubBezTo, _super);
                        function RelCubBezTo(index, x, y, a, b, c, d) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.a = a;
                            _this.b = b;
                            _this.c = c;
                            _this.d = d;
                            return _this
                        }
                        RelCubBezTo.prototype.handle = function(p, shape) {
                            if (this.x != null && this.y != null && this.a != null && this.b != null && this.c != null && this.d != null) {
                                var x = this.x * 100;
                                var y = 100 - this.y * 100;
                                var x1 = this.a * 100;
                                var y1 = 100 - this.b * 100;
                                var x2 = this.c * 100;
                                var y2 = 100 - this.d * 100;
                                x = Math.round(x * 100) / 100;
                                y = Math.round(y * 100) / 100;
                                x1 = Math.round(x1 * 100) / 100;
                                y1 = Math.round(y1 * 100) / 100;
                                x2 = Math.round(x2 * 100) / 100;
                                y2 = Math.round(y2 * 100) / 100;
                                shape.setLastX(x);
                                shape.setLastY(y);
                                return '<curve x1="' + (new String(x1)).toString() + '" y1="' + (new String(y1)).toString() + '" x2="' + (new String(x2)).toString() + '" y2="' + (new String(y2)).toString() + '" x3="' + (new String(x)).toString() + '" y3="' + (new String(y)).toString() + '"/>'
                            }
                            return ""
                        }
                        ;
                        return RelCubBezTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.RelCubBezTo = RelCubBezTo;
                    RelCubBezTo["__class"] = "com.mxgraph.io.vsdx.geometry.RelCubBezTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var RelLineTo = function(_super) {
                        __extends(RelLineTo, _super);
                        function RelLineTo(index, x, y) {
                            return _super.call(this, index, x, y) || this
                        }
                        RelLineTo.prototype.handle = function(p, shape) {
                            var x = p.x;
                            var y = p.y;
                            if (this.x != null && this.y != null) {
                                x = this.x * 100;
                                y = 100 - this.y * 100
                            }
                            x = Math.round(x * 100) / 100;
                            y = Math.round(y * 100) / 100;
                            p.x = x;
                            p.y = y;
                            shape.setLastX(x);
                            shape.setLastY(y);
                            return '<line x="' + (new String(x)).toString() + '" y="' + (new String(y)).toString() + '"/>'
                        }
                        ;
                        return RelLineTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.RelLineTo = RelLineTo;
                    RelLineTo["__class"] = "com.mxgraph.io.vsdx.geometry.RelLineTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var RelMoveTo = function(_super) {
                        __extends(RelMoveTo, _super);
                        function RelMoveTo(index, x, y) {
                            return _super.call(this, index, x, y) || this
                        }
                        RelMoveTo.prototype.handle = function(p, shape) {
                            var x = p.x;
                            var y = p.y;
                            if (this.x != null && this.y != null) {
                                x = this.x * 100;
                                y = 100 - this.y * 100
                            }
                            x = Math.round(x * 100) / 100;
                            y = Math.round(y * 100) / 100;
                            p.x = x;
                            p.y = y;
                            shape.setLastX(x);
                            shape.setLastY(y);
                            shape.setLastMoveX(x);
                            shape.setLastMoveY(y);
                            return '<move x="' + (new String(x)).toString() + '" y="' + (new String(y)).toString() + '"/>'
                        }
                        ;
                        return RelMoveTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.RelMoveTo = RelMoveTo;
                    RelMoveTo["__class"] = "com.mxgraph.io.vsdx.geometry.RelMoveTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var RelQuadBezTo = function(_super) {
                        __extends(RelQuadBezTo, _super);
                        function RelQuadBezTo(index, x, y, a, b) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.a = a;
                            _this.b = b;
                            return _this
                        }
                        RelQuadBezTo.prototype.handle = function(p, shape) {
                            if (this.x != null && this.y != null && this.a != null && this.b != null) {
                                var x = this.x * 100;
                                var y = 100 - this.y * 100;
                                var x1 = this.a * 100;
                                var y1 = 100 - this.b * 100;
                                x = Math.round(x * 100) / 100;
                                y = Math.round(y * 100) / 100;
                                x1 = Math.round(x1 * 100) / 100;
                                y1 = Math.round(y1 * 100) / 100;
                                shape.setLastX(x);
                                shape.setLastY(y);
                                return '<quad x1="' + (new String(x1)).toString() + '" y1="' + (new String(y1)).toString() + '" x2="' + (new String(x)).toString() + '" y2="' + (new String(y)).toString() + '"/>'
                            }
                            return ""
                        }
                        ;
                        return RelQuadBezTo
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.RelQuadBezTo = RelQuadBezTo;
                    RelQuadBezTo["__class"] = "com.mxgraph.io.vsdx.geometry.RelQuadBezTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var SplineKnot = function(_super) {
                        __extends(SplineKnot, _super);
                        function SplineKnot(index, x, y, a) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.a = a;
                            return _this
                        }
                        SplineKnot.prototype.handle = function(p, shape) {
                            if (this.x != null && this.y != null && this.a != null) {
                                var x = this.x * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var y = this.y * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var a = this.a;
                                var knot = a;
                                y = 100 - y;
                                x = Math.round(x * 100) / 100;
                                y = Math.round(y * 100) / 100;
                                knot = Math.round(knot * 100) / 100;
                                shape.setLastX(x);
                                shape.setLastY(y)
                            }
                            return ""
                        }
                        ;
                        return SplineKnot
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.SplineKnot = SplineKnot;
                    SplineKnot["__class"] = "com.mxgraph.io.vsdx.geometry.SplineKnot"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var SplineStart = function(_super) {
                        __extends(SplineStart, _super);
                        function SplineStart(index, x, y, a, b, c, d) {
                            var _this = _super.call(this, index, x, y) || this;
                            _this.a = a;
                            _this.b = b;
                            _this.c = c;
                            _this.d = d;
                            return _this
                        }
                        SplineStart.prototype.handle = function(p, shape) {
                            if (this.x != null && this.y != null && this.a != null && this.b != null && this.c != null && this.d != null) {
                                var h = shape.getHeight();
                                var w = shape.getWidth();
                                var x = this.x * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var y = this.y * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var c = this.c;
                                var d = this.d | 0;
                                var lastKnot = c;
                                shape.setLastKnot(lastKnot);
                                var degree = d;
                                y = 100 - y;
                                x = Math.round(x * 100) / 100;
                                y = Math.round(y * 100) / 100;
                                lastKnot = Math.round(lastKnot * 100) / 100;
                                var x0 = shape.getLastX() * w / 100;
                                var y0 = shape.getLastY() * h / 100;
                                shape.setLastX(x);
                                shape.setLastY(y);
                                return "<curve "
                            }
                            return ""
                        }
                        ;
                        return SplineStart
                    }(com.mxgraph.io.vsdx.geometry.Row);
                    geometry.SplineStart = SplineStart;
                    SplineStart["__class"] = "com.mxgraph.io.vsdx.geometry.SplineStart"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var Style = function() {
                    function Style(shape, model) {
                        this.cellElements = {};
                        this.sections = {};
                        this.styleParents = {};
                        this.shape = null;
                        this.Id = null;
                        this.pm = null;
                        this.style = null;
                        this.shape = shape;
                        this.pm = model.getPropertiesManager();
                        var Id = shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.ID);
                        try {
                            this.Id = Id != null && !(Id.length === 0) ? parseFloat(Id) : -1
                        } catch (e) {
                            this.Id = -1
                        }
                        this.cacheCells(model);
                        this.stylesheetRefs(model)
                    }
                    Style.__static_initialize = function() {
                        if (!Style.__static_initialized) {
                            Style.__static_initialized = true;
                            Style.__static_initializer_0();
                            Style.__static_initializer_1()
                        }
                    }
                    ;
                    Style.styleTypes_$LI$ = function() {
                        Style.__static_initialize();
                        if (Style.styleTypes == null)
                            Style.styleTypes = {};
                        return Style.styleTypes
                    }
                    ;
                    Style.__static_initializer_0 = function() {
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.FILL] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.FILL_BKGND] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.FILL_BKGND_TRANS] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.FILL_FOREGND] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.FILL_FOREGND_TRANS] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.FILL_PATTERN] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.SHDW_PATTERN] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()["QuickStyleFillColor"] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()["QuickStyleFillMatrix"] = com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.BEGIN_ARROW] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.END_ARROW] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.LINE_PATTERN] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.LINE_COLOR] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.LINE_COLOR_TRANS] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.LINE_WEIGHT] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()["QuickStyleLineColor"] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()["QuickStyleLineMatrix"] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.BEGIN_ARROW_SIZE] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.END_ARROW_SIZE] = com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_BKGND] = com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.BOTTOM_MARGIN] = com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.LEFT_MARGIN] = com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.RIGHT_MARGIN] = com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.TOP_MARGIN] = com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH] = com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE;
                        Style.styleTypes_$LI$()[com.mxgraph.io.vsdx.mxVsdxConstants.CHARACTER] = com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE;
                        Style.styleTypes_$LI$()["QuickStyleFontColor"] = com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE;
                        Style.styleTypes_$LI$()["QuickStyleFontMatrix"] = com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE
                    }
                    ;
                    Style.prototype.getTheme = function() {
                        return null
                    }
                    ;
                    Style.prototype.getQuickStyleVals = function() {
                        return null
                    }
                    ;
                    Style.prototype.isVertex = function() {
                        return false
                    }
                    ;
                    Style.prototype.styleDebug = function(debug) {
                        if (Style.vsdxStyleDebug)
                            console.info(debug)
                    }
                    ;
                    Style.prototype.stylesheetRefs = function(model) {
                        this.styleParents[com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE] = model.getStylesheet(this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.FILL_STYLE));
                        this.styleParents[com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE] = model.getStylesheet(this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_STYLE));
                        this.styleParents[com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE] = model.getStylesheet(this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_STYLE));
                        var style = model.getStylesheet("0");
                        this.style = style
                    }
                    ;
                    Style.prototype.cacheCells = function(model) {
                        if (this.shape != null) {
                            var children = this.shape.childNodes;
                            if (children != null) {
                                var childNode = children.item(0);
                                while (childNode != null) {
                                    if (childNode != null && childNode.nodeType == 1)
                                        this.parseShapeElem(childNode, model);
                                    childNode = childNode.nextSibling
                                }
                            }
                        }
                    }
                    ;
                    Style.prototype.parseShapeElem = function(elem, model) {
                        var childName = elem.nodeName;
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(childName, "Cell"))
                            this.cellElements[elem.getAttribute("N")] = elem;
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(childName, "Section"))
                            this.parseSection(elem)
                    }
                    ;
                    Style.prototype.parseSection = function(elem) {
                        var sect = new com.mxgraph.io.vsdx.Section(elem);
                        this.sections[elem.getAttribute("N")] = sect
                    }
                    ;
                    Style.prototype.hasProperty = function(nodeName, tag) {
                        return this.cellElements.hasOwnProperty(tag)
                    }
                    ;
                    Style.prototype.getValue = function(elem, defaultValue) {
                        if (elem != null)
                            return elem.getAttribute("V") || "";
                        return defaultValue
                    }
                    ;
                    Style.prototype.getValueAsDouble = function(cell, defaultValue) {
                        if (cell != null) {
                            var value = cell.getAttribute("V");
                            if (value != null) {
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(value, "Themed"))
                                    return 0;
                                try {
                                    var parsedValue = parseFloat(value);
                                    var units = cell.getAttribute("U");
                                    if (function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(units, "PT"))
                                        parsedValue = parsedValue * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                    return Math.round(parsedValue * 100) / 100
                                } catch (e) {
                                    console.error(e.message, e)
                                }
                            }
                        }
                        return defaultValue
                    }
                    ;
                    Style.prototype.getScreenNumericalValue$org_w3c_dom_Element$double = function(cell, defaultValue) {
                        if (cell != null) {
                            var value = cell.getAttribute("V");
                            if (value != null)
                                try {
                                    var parsedValue = parseFloat(value);
                                    return this.getScreenNumericalValue$double(parsedValue)
                                } catch (e) {
                                    console.error(e.message, e)
                                }
                        }
                        return defaultValue
                    }
                    ;
                    Style.prototype.getScreenNumericalValue = function(cell, defaultValue) {
                        if ((cell != null && cell.nodeType == 1 || cell === null) && (typeof defaultValue === "number" || defaultValue === null))
                            return this.getScreenNumericalValue$org_w3c_dom_Element$double(cell, defaultValue);
                        else if ((typeof cell === "number" || cell === null) && defaultValue === undefined)
                            return this.getScreenNumericalValue$double(cell);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    Style.prototype.getScreenNumericalValue$double = function(val) {
                        var conVal = val * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                        return conVal
                    }
                    ;
                    Style.prototype.getAttribute = function(tag, attribute, defaultValue) {
                        var result = defaultValue;
                        var cell = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.cellElements, tag);
                        if (cell != null)
                            result = cell.getAttribute(attribute) || "";
                        return result
                    }
                    ;
                    Style.prototype.getChildValues = function(parent, requiredValues) {
                        var result = {};
                        var child = parent.firstChild;
                        while (child != null) {
                            if (child != null && child.nodeType == 1) {
                                var childElem = child;
                                var childName = childElem.nodeName;
                                var name_9 = null;
                                var nodeValue = null;
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(childName, "Cell")) {
                                    name_9 = childElem.getAttribute("N") || "";
                                    nodeValue = childElem.getAttribute("V") || ""
                                } else {
                                    name_9 = childElem.nodeName;
                                    nodeValue = childElem.textContent
                                }
                                if (requiredValues != null) {
                                    var nodeOverride = function(m, k) {
                                        return m[k] ? m[k] : null
                                    }(requiredValues, name_9);
                                    if (nodeOverride != null)
                                        nodeValue = childElem.getAttribute(nodeOverride) || ""
                                }
                                result[name_9] = nodeValue
                            }
                            child = child.nextSibling
                        }
                        return result
                    }
                    ;
                    Style.prototype.getCellElement$java_lang_String$java_lang_String$java_lang_String = function(cellKey, index, sectKey) {
                        var sect = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.sections, sectKey);
                        var elem = null;
                        var inherit = false;
                        if (sect != null)
                            elem = sect.getIndexedCell(index, cellKey);
                        if (elem != null) {
                            var form = elem.getAttribute("F");
                            var value = elem.getAttribute("V");
                            if (form != null && value != null)
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(form, "Inh") && function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(value, "Themed"))
                                    inherit = true;
                                else if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(form, "THEMEVAL()") && function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(value, "Themed") && this.style != null) {
                                    if (function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(com.mxgraph.io.vsdx.mxVsdxConstants.COLOR, cellKey))
                                        return elem;
                                    var themeElem = this.style.getCellElement$java_lang_String$java_lang_String$java_lang_String(cellKey, index, sectKey);
                                    if (themeElem != null)
                                        return themeElem
                                }
                        }
                        if (elem == null || inherit) {
                            var styleType = function(m, k) {
                                return m[k] ? m[k] : null
                            }(Style.styleTypes_$LI$(), sectKey);
                            var parentStyle = function(m, k) {
                                return m[k] ? m[k] : null
                            }(this.styleParents, styleType);
                            if (parentStyle != null) {
                                var parentElem = parentStyle.getCellElement$java_lang_String$java_lang_String$java_lang_String(cellKey, index, sectKey);
                                if (parentElem != null)
                                    return parentElem
                            }
                        }
                        return elem
                    }
                    ;
                    Style.prototype.getCellElement = function(cellKey, index, sectKey) {
                        if ((typeof cellKey === "string" || cellKey === null) && (typeof index === "string" || index === null) && (typeof sectKey === "string" || sectKey === null))
                            return this.getCellElement$java_lang_String$java_lang_String$java_lang_String(cellKey, index, sectKey);
                        else if ((typeof cellKey === "string" || cellKey === null) && index === undefined && sectKey === undefined)
                            return this.getCellElement$java_lang_String(cellKey);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    Style.prototype.getCellElement$java_lang_String = function(key) {
                        var elem = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.cellElements, key);
                        var inherit = false;
                        if (elem != null) {
                            var form = elem.getAttribute("F");
                            var value = elem.getAttribute("V");
                            if (form != null && value != null)
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(form, "Inh") && function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(value, "Themed"))
                                    inherit = true;
                                else if (form.indexOf("THEMEVAL()") != -1 && function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(value, "Themed") && this.style != null) {
                                    if (function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }("FillForegnd", key) || function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_COLOR, key) || function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_PATTERN, key) || function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(com.mxgraph.io.vsdx.mxVsdxConstants.BEGIN_ARROW_SIZE, key) || function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(com.mxgraph.io.vsdx.mxVsdxConstants.END_ARROW_SIZE, key) || function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(com.mxgraph.io.vsdx.mxVsdxConstants.BEGIN_ARROW, key) || function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(com.mxgraph.io.vsdx.mxVsdxConstants.END_ARROW, key) || function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_WEIGHT, key))
                                        return elem;
                                    var themeElem = this.style.getCellElement$java_lang_String(key);
                                    if (themeElem != null)
                                        return themeElem
                                }
                        }
                        if (elem == null || inherit) {
                            var styleType = function(m, k) {
                                return m[k] ? m[k] : null
                            }(Style.styleTypes_$LI$(), key);
                            var parentStyle = function(m, k) {
                                return m[k] ? m[k] : null
                            }(this.styleParents, styleType);
                            if (parentStyle != null) {
                                var parentElem = parentStyle.getCellElement$java_lang_String(key);
                                if (parentElem != null)
                                    return parentElem
                            }
                        }
                        return elem
                    }
                    ;
                    Style.prototype.getStrokeColor = function() {
                        var color = "";
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_PATTERN), "1"), "0"))
                            color = "none";
                        else {
                            color = this.getColor(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_COLOR));
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }("Themed", color)) {
                                var theme_7 = this.getTheme();
                                if (theme_7 != null) {
                                    var colorObj = this.isVertex() ? theme_7.getLineColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(this.getQuickStyleVals()) : theme_7.getConnLineColor(this.getQuickStyleVals());
                                    color = colorObj.toHexStr()
                                } else
                                    color = ""
                            }
                        }
                        return color
                    }
                    ;
                    Style.prototype.getFillColor = function() {
                        var fillGradientEnabled = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FILL_GRADIENT_ENABLED), "0");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }("1", fillGradientEnabled)) {
                            var fillGradient = function(m, k) {
                                return m[k] ? m[k] : null
                            }(this.sections, "FillGradient");
                            if (fillGradient != null) {
                                var color = this.getColor(fillGradient.getIndexedCell("0", "GradientStopColor"));
                                if (color != null && !(color.length === 0))
                                    return color
                            }
                        }
                        var fillForeColor = this.getColor(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FILL_FOREGND));
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }("Themed", fillForeColor)) {
                            var theme_8 = this.getTheme();
                            if (theme_8 != null) {
                                var color = theme_8.getFillColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(this.getQuickStyleVals());
                                fillForeColor = color.toHexStr()
                            } else
                                fillForeColor = "#FFFFFF"
                        }
                        var fillPattern = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FILL_PATTERN), "0");
                        if (fillPattern != null && function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(fillPattern, "0"))
                            return "none";
                        else
                            return fillForeColor
                    }
                    ;
                    Style.prototype.getColor = function(elem) {
                        var color = this.getValue(elem, "");
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }("Themed", color) && !function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(color, "#"))
                            color = this.pm.getColor(color);
                        return color
                    }
                    ;
                    Style.prototype.getTextBkgndColor = function(elem) {
                        var color = this.getValue(elem, "");
                        if (!function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(color, "#")) {
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(color, "0") || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(color, "255") || color.length === 0)
                                return "none";
                            return this.pm.getColor((new String(parseInt(color) - 1)).toString())
                        }
                        return color
                    }
                    ;
                    Style.prototype.getLineWeight = function() {
                        return this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_WEIGHT), 0)
                    }
                    ;
                    Style.prototype.getStrokeTransparency = function() {
                        return this.getValueAsDouble(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_COLOR_TRANS), 0)
                    }
                    ;
                    Style.prototype.getNameU = function() {
                        return this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.NAME_U) || ""
                    }
                    ;
                    Style.prototype.getName = function() {
                        return this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.NAME) || ""
                    }
                    ;
                    Style.prototype.getUniqueID = function() {
                        return this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.UNIQUE_ID) || ""
                    }
                    ;
                    Style.prototype.getId = function() {
                        return this.Id
                    }
                    ;
                    Style.prototype.getTextColor = function(index) {
                        var colorElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.COLOR, index, com.mxgraph.io.vsdx.mxVsdxConstants.CHARACTER);
                        var color = this.getValue(colorElem, "#000000");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }("Themed", color)) {
                            var theme_9 = this.getTheme();
                            if (theme_9 != null) {
                                var colorObj = this.isVertex() ? theme_9.getFontColor$com_mxgraph_io_vsdx_theme_QuickStyleVals(this.getQuickStyleVals()) : theme_9.getConnFontColor(this.getQuickStyleVals());
                                color = colorObj.toHexStr()
                            } else
                                color = "#000000"
                        } else if (!function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(color, "#"))
                            color = this.pm.getColor(color);
                        return color
                    }
                    ;
                    Style.prototype.getTextTopMargin = function() {
                        return this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.TOP_MARGIN), 0)
                    }
                    ;
                    Style.prototype.getTextBottomMargin = function() {
                        return this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.BOTTOM_MARGIN), 0)
                    }
                    ;
                    Style.prototype.getTextLeftMargin = function() {
                        return this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.LEFT_MARGIN), 0)
                    }
                    ;
                    Style.prototype.getTextRightMargin = function() {
                        return this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.RIGHT_MARGIN), 0)
                    }
                    ;
                    Style.prototype.getTextStyle = function(index) {
                        var styleElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.STYLE, index, com.mxgraph.io.vsdx.mxVsdxConstants.CHARACTER);
                        return this.getValue(styleElem, "")
                    }
                    ;
                    Style.prototype.getTextFont = function(index) {
                        var fontElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FONT, index, com.mxgraph.io.vsdx.mxVsdxConstants.CHARACTER);
                        return this.getValue(fontElem, "")
                    }
                    ;
                    Style.prototype.getTextPos = function(index) {
                        var posElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.POS, index, com.mxgraph.io.vsdx.mxVsdxConstants.CHARACTER);
                        return this.getValue(posElem, "")
                    }
                    ;
                    Style.prototype.getTextStrike = function(index) {
                        var strikeElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.STRIKETHRU, index, com.mxgraph.io.vsdx.mxVsdxConstants.CHARACTER);
                        return function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(this.getValue(strikeElem, ""), "1")
                    }
                    ;
                    Style.prototype.getTextCase = function(index) {
                        var caseElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.CASE, index, com.mxgraph.io.vsdx.mxVsdxConstants.CHARACTER);
                        return this.getValue(caseElem, "")
                    }
                    ;
                    Style.prototype.getHorizontalAlign = function(index, html) {
                        var ret = "center";
                        var horAlign = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.HORIZONTAL_ALIGN, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        var align = this.getValue(horAlign, "");
                        switch (align) {
                        case "0":
                            ret = html ? "left" : mxConstants.ALIGN_LEFT;
                            break;
                        case "2":
                            ret = html ? "right" : mxConstants.ALIGN_RIGHT;
                            break;
                        case "3":
                        case "4":
                            ret = html ? "justify" : mxConstants.ALIGN_CENTER;
                            break;
                        default:
                            ret = html ? "center" : mxConstants.ALIGN_CENTER
                        }
                        return ret
                    }
                    ;
                    Style.prototype.getIndentFirst = function(index) {
                        var indentFirstElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.INDENT_FIRST, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        return (new String(this.getScreenNumericalValue$org_w3c_dom_Element$double(indentFirstElem, 0))).toString()
                    }
                    ;
                    Style.prototype.getIndentLeft = function(index) {
                        var indentLeftElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.INDENT_LEFT, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        return (new String(Math.round(this.getScreenNumericalValue$org_w3c_dom_Element$double(indentLeftElem, 0)) | 0)).toString()
                    }
                    ;
                    Style.prototype.getIndentRight = function(index) {
                        var indentRightElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.INDENT_RIGHT, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        return (new String(Math.round(this.getScreenNumericalValue$org_w3c_dom_Element$double(indentRightElem, 0)) | 0)).toString()
                    }
                    ;
                    Style.prototype.getSpBefore = function(index) {
                        var spBeforeElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.SPACE_BEFORE, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        return (new String(Math.round(this.getScreenNumericalValue$org_w3c_dom_Element$double(spBeforeElem, 0)) | 0)).toString()
                    }
                    ;
                    Style.prototype.getSpAfter = function(index) {
                        var spAfterElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.SPACE_AFTER, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        return (new String(Math.round(this.getScreenNumericalValue$org_w3c_dom_Element$double(spAfterElem, 0)) | 0)).toString()
                    }
                    ;
                    Style.prototype.getSpLine = function(index) {
                        var spLineElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.SPACE_LINE, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        var val = this.getValue(spLineElem, "");
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(val, ""))
                            return parseFloat(val);
                        return 0
                    }
                    ;
                    Style.prototype.getFlags = function(index) {
                        var flagsElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FLAGS, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        return this.getValue(flagsElem, "0")
                    }
                    ;
                    Style.prototype.getLetterSpace = function(index) {
                        var letterSpaceElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.LETTER_SPACE, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        return (new String(this.getScreenNumericalValue$org_w3c_dom_Element$double(letterSpaceElem, 0))).toString()
                    }
                    ;
                    Style.prototype.getBullet = function(index) {
                        var bulletElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.BULLET, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        return this.getValue(bulletElem, "0")
                    }
                    ;
                    Style.prototype.getShape = function() {
                        return this.shape
                    }
                    ;
                    Style.prototype.setShape = function(shape) {
                        this.shape = shape
                    }
                    ;
                    Style.lineDashPatterns_$LI$ = function() {
                        Style.__static_initialize();
                        if (Style.lineDashPatterns == null)
                            Style.lineDashPatterns = [];
                        return Style.lineDashPatterns
                    }
                    ;
                    Style.__static_initializer_1 = function() {
                        Style.lineDashPatterns_$LI$().push([]) > 0;
                        Style.lineDashPatterns_$LI$().push([]) > 0;
                        Style.lineDashPatterns_$LI$().push([]) > 0;
                        var lineDashPattern = [];
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.DASH) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.DASH) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.DASH) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        lineDashPattern.push(Style.DASH) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.LONG_DASH) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.LONG_DASH) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        lineDashPattern.push(Style.SHORT_DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.LONG_DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.LONG_DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.LONG_DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.LONG_DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        lineDashPattern.push(Style.LONG_DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        lineDashPattern.push(Style.DOT) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.XLONG_DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        lineDashPattern.push(Style.DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.XLONG_DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        lineDashPattern.push(Style.DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        lineDashPattern.push(Style.DASH) > 0;
                        lineDashPattern.push(Style.LONG_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0;
                        lineDashPattern = [];
                        lineDashPattern.push(Style.XSHORT_DASH) > 0;
                        lineDashPattern.push(Style.SHORT_SPACE) > 0;
                        Style.lineDashPatterns_$LI$().push(lineDashPattern) > 0
                    }
                    ;
                    Style.getLineDashPattern = function(pattern) {
                        if (pattern >= 0 && pattern <= 23)
                            return Style.lineDashPatterns_$LI$()[pattern];
                        else
                            return Style.lineDashPatterns_$LI$()[0]
                    }
                    ;
                    return Style
                }();
                Style.__static_initialized = false;
                Style.vsdxStyleDebug = false;
                Style.SPACE = 4;
                Style.SHORT_SPACE = 2;
                Style.LONG_SPACE = 6;
                Style.DOT = 1;
                Style.DASH = 8;
                Style.LONG_DASH = 12;
                Style.SHORT_DASH = 4;
                Style.XLONG_DASH = 20;
                Style.XSHORT_DASH = 2;
                vsdx.Style = Style;
                Style["__class"] = "com.mxgraph.io.vsdx.Style"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var HslClr = function(_super) {
                        __extends(HslClr, _super);
                        function HslClr(hue, sat, lum) {
                            var _this = _super.call(this) || this;
                            _this.__com_mxgraph_io_vsdx_theme_HslClr_hue = 0;
                            _this.__com_mxgraph_io_vsdx_theme_HslClr_sat = 0;
                            _this.__com_mxgraph_io_vsdx_theme_HslClr_lum = 0;
                            _this.__com_mxgraph_io_vsdx_theme_HslClr_hue = hue / 360;
                            _this.__com_mxgraph_io_vsdx_theme_HslClr_sat = sat / 100;
                            _this.__com_mxgraph_io_vsdx_theme_HslClr_lum = lum / 100;
                            _this.color = (new com.mxgraph.io.vsdx.theme.HSLColor(hue,sat,lum)).toRgb();
                            return _this
                        }
                        return HslClr
                    }(com.mxgraph.io.vsdx.theme.OoxmlColor);
                    theme.HslClr = HslClr;
                    HslClr["__class"] = "com.mxgraph.io.vsdx.theme.HslClr"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var PrstClr = function(_super) {
                        __extends(PrstClr, _super);
                        function PrstClr(val) {
                            var _this = _super.call(this) || this;
                            _this.val = null;
                            _this.val = val;
                            _this.color = new com.mxgraph.io.vsdx.theme.Color(255,255,255);
                            return _this
                        }
                        return PrstClr
                    }(com.mxgraph.io.vsdx.theme.OoxmlColor);
                    theme.PrstClr = PrstClr;
                    PrstClr["__class"] = "com.mxgraph.io.vsdx.theme.PrstClr"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme_10) {
                    var SchemeClr = function(_super) {
                        __extends(SchemeClr, _super);
                        function SchemeClr(val) {
                            var _this = _super.call(this) || this;
                            _this.val = null;
                            _this.isDynamic = true;
                            _this.val = val;
                            return _this
                        }
                        SchemeClr.prototype.calcColor = function(styleColor, theme) {
                            if (!function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }("phClr", this.val)) {
                                this.color = theme.getSchemeColor(this.val);
                                this.isDynamic = false
                            } else
                                this.color = theme.getStyleColor(styleColor);
                            _super.prototype.calcColor.call(this, styleColor, theme)
                        }
                        ;
                        return SchemeClr
                    }(com.mxgraph.io.vsdx.theme.OoxmlColor);
                    theme_10.SchemeClr = SchemeClr;
                    SchemeClr["__class"] = "com.mxgraph.io.vsdx.theme.SchemeClr"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var ScrgbClr = function(_super) {
                        __extends(ScrgbClr, _super);
                        function ScrgbClr(r, g, b) {
                            var _this = _super.call(this) || this;
                            _this.r = 0;
                            _this.g = 0;
                            _this.b = 0;
                            _this.r = r;
                            _this.g = g;
                            _this.b = b;
                            _this.color = new com.mxgraph.io.vsdx.theme.Color(r,g,b);
                            return _this
                        }
                        return ScrgbClr
                    }(com.mxgraph.io.vsdx.theme.OoxmlColor);
                    theme.ScrgbClr = ScrgbClr;
                    ScrgbClr["__class"] = "com.mxgraph.io.vsdx.theme.ScrgbClr"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var SrgbClr = function(_super) {
                        __extends(SrgbClr, _super);
                        function SrgbClr(hexVal) {
                            var _this = _super.call(this) || this;
                            _this.hexVal = null;
                            _this.hexVal = hexVal;
                            _this.color = com.mxgraph.io.vsdx.theme.Color.decodeColorHex(hexVal);
                            return _this
                        }
                        return SrgbClr
                    }(com.mxgraph.io.vsdx.theme.OoxmlColor);
                    theme.SrgbClr = SrgbClr;
                    SrgbClr["__class"] = "com.mxgraph.io.vsdx.theme.SrgbClr"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var theme;
                (function(theme) {
                    var SysClr = function(_super) {
                        __extends(SysClr, _super);
                        function SysClr(val, lastClr) {
                            var _this = _super.call(this) || this;
                            _this.val = null;
                            _this.lastClr = null;
                            _this.val = val;
                            _this.lastClr = lastClr;
                            var hexVal = lastClr;
                            if (hexVal == null)
                                switch (val) {
                                case "windowText":
                                    hexVal = "000000";
                                    break;
                                case "window":
                                    hexVal = "FFFFFF";
                                    break;
                                default:
                                    hexVal = "FFFFFF"
                                }
                            _this.color = com.mxgraph.io.vsdx.theme.Color.decodeColorHex(hexVal);
                            return _this
                        }
                        return SysClr
                    }(com.mxgraph.io.vsdx.theme.OoxmlColor);
                    theme.SysClr = SysClr;
                    SysClr["__class"] = "com.mxgraph.io.vsdx.theme.SysClr"
                }
                )(theme = vsdx.theme || (vsdx.theme = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var geometry;
                (function(geometry) {
                    var RelEllipticalArcTo = function(_super) {
                        __extends(RelEllipticalArcTo, _super);
                        function RelEllipticalArcTo(index, x, y, a, b, c, d) {
                            return _super.call(this, index, x, y, a, b, c, d) || this
                        }
                        RelEllipticalArcTo.prototype.handle = function(p, shape) {
                            if (this.x != null && this.y != null && this.a != null && this.b != null && this.c != null && this.d != null) {
                                var h = shape.getHeight() / com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                var w = shape.getWidth() / com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                                this.x *= w;
                                this.y *= h;
                                this.a *= w;
                                this.b *= h
                            }
                            return _super.prototype.handle.call(this, p, shape)
                        }
                        ;
                        return RelEllipticalArcTo
                    }(com.mxgraph.io.vsdx.geometry.EllipticalArcTo);
                    geometry.RelEllipticalArcTo = RelEllipticalArcTo;
                    RelEllipticalArcTo["__class"] = "com.mxgraph.io.vsdx.geometry.RelEllipticalArcTo"
                }
                )(geometry = vsdx.geometry || (vsdx.geometry = {}))
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var Shape = function(_super) {
                    __extends(Shape, _super);
                    function Shape(shape, model) {
                        var _this = this;
                        _this.text = null;
                        _this.fields = null;
                        _this.geom = null;
                        _this.imageData = null;
                        _this.theme = null;
                        _this.quickStyleVals = null;
                        _this = _super.call(this, shape, model) || this;
                        _this.paragraphs = null;
                        _this.styleMap = {};
                        _this.width = 0;
                        _this.height = 0;
                        _this.rotation = 0;
                        _this.lastX = 0;
                        _this.lastY = 0;
                        _this.lastMoveX = 0;
                        _this.lastMoveY = 0;
                        _this.lastKnot = -1;
                        _this.geomList = null;
                        _this.geomListProcessed = false;
                        _this.themeVariant = 0;
                        _this.cp = "0";
                        _this.pp = "0";
                        _this.tp = "0";
                        _this.fld = "0";
                        _this.width = _this.getScreenNumericalValue$org_w3c_dom_Element$double(function(m, k) {
                            return m[k] ? m[k] : null
                        }(_this.cellElements, com.mxgraph.io.vsdx.mxVsdxConstants.WIDTH), 0);
                        _this.height = _this.getScreenNumericalValue$org_w3c_dom_Element$double(function(m, k) {
                            return m[k] ? m[k] : null
                        }(_this.cellElements, com.mxgraph.io.vsdx.mxVsdxConstants.HEIGHT), 0);
                        return _this
                    }
                    Shape.UNICODE_LINE_SEP_$LI$ = function() {
                        if (Shape.UNICODE_LINE_SEP == null) {
                            Shape.ERROR_IMAGE = "";
                            Shape.UNICODE_LINE_SEP = String.fromCharCode(8232)
                        }
                        return Shape.UNICODE_LINE_SEP
                    }
                    ;
                    Shape.prototype.setThemeAndVariant = function(theme, themeVariant) {
                        this.theme = theme;
                        this.themeVariant = themeVariant
                    }
                    ;
                    Shape.prototype.getTheme = function() {
                        if (this.theme != null)
                            this.theme.setVariant(this.themeVariant);
                        return this.theme
                    }
                    ;
                    Shape.prototype.getQuickStyleVals = function() {
                        return this.quickStyleVals
                    }
                    ;
                    Shape.prototype.processGeomList = function(parentGeoList) {
                        if (!this.geomListProcessed) {
                            this.geomList = new com.mxgraph.io.vsdx.mxVsdxGeometryList(parentGeoList);
                            if (this.geom != null)
                                for (var index156 = 0; index156 < this.geom.length; index156++) {
                                    var geoElem = this.geom[index156];
                                    {
                                        this.geomList.addGeometry(geoElem)
                                    }
                                }
                            this.geomListProcessed = true
                        }
                    }
                    ;
                    Shape.prototype.parseShapeElem = function(elem, model) {
                        _super.prototype.parseShapeElem.call(this, elem, model);
                        var childName = elem.nodeName;
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(childName, "ForeignData")) {
                            var filename = elem.ownerDocument.vsdxFileName;
                            var iType = elem.getAttribute("ForeignType");
                            var compression = elem.getAttribute("CompressionType") || "";
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(iType, "Bitmap"))
                                compression = compression.toLowerCase();
                            else if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(iType, "MetaFile"))
                                compression = "png";
                            else if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(iType, "Enhanced Metafile") || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(iType, "EnhMetaFile"))
                                compression = "png";
                            else
                                return;
                            var fdChild = elem.firstChild;
                            if (fdChild != null) {
                                if (fdChild != null && fdChild.nodeType == 1) {
                                    var fdElem = fdChild;
                                    var grandchildName = fdElem.nodeName;
                                    if (function(o1, o2) {
                                        if (o1 && o1.equals)
                                            return o1.equals(o2);
                                        else
                                            return o1 === o2
                                    }(grandchildName.toLowerCase(), "rel")) {
                                        var rid = fdElem.getAttribute("r:id");
                                        if (rid != null && !(rid.length === 0)) {
                                            var index = filename.lastIndexOf("/");
                                            var pre = "";
                                            var post = "";
                                            try {
                                                pre = filename.substring(0, index);
                                                post = filename.substring(index, filename.length)
                                            } catch (e) {
                                                return
                                            }
                                            var relElem = model.getRelationship(rid, pre + "/_rels" + post + ".rels");
                                            if (relElem != null) {
                                                var target = relElem.getAttribute("Target") || "";
                                                var type = relElem.getAttribute("Type");
                                                index = target.lastIndexOf("/");
                                                try {
                                                    target = target.substring(index + 1, target.length)
                                                } catch (e$1) {
                                                    return
                                                }
                                                if (type != null && function(str, searchString) {
                                                    var pos = str.length - searchString.length;
                                                    var lastIndex = str.indexOf(searchString, pos);
                                                    return lastIndex !== -1 && lastIndex === pos
                                                }(type, "image")) {
                                                    this.imageData = {};
                                                    var iData = model.getMedia(com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder + "/media/" + target);
                                                    if (!iData) {
                                                        this.imageData["iData"] = Shape.ERROR_IMAGE;
                                                        this.imageData["iType"] = "svg+xml"
                                                    } else {
                                                        this.imageData["iData"] = iData;
                                                        if (function(str, searchString) {
                                                            var pos = str.length - searchString.length;
                                                            var lastIndex = str.indexOf(searchString, pos);
                                                            return lastIndex !== -1 && lastIndex === pos
                                                        }(target.toLowerCase(), ".bmp"))
                                                            compression = "jpg";
                                                        this.imageData["iType"] = compression
                                                    }
                                                }
                                            } else
                                                ;return
                                        }
                                    }
                                }
                                fdChild = fdChild.nextSibling
                            }
                        } else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(childName, com.mxgraph.io.vsdx.mxVsdxConstants.TEXT))
                            this.text = elem
                    }
                    ;
                    Shape.prototype.parseSection = function(elem) {
                        var n = elem.getAttribute("N");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(n, "Geometry")) {
                            if (this.geom == null)
                                this.geom = [];
                            this.geom.push(elem) > 0
                        } else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(n, "Field")) {
                            var rows = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(elem, "Row");
                            for (var index157 = 0; index157 < rows.length; index157++) {
                                var row = rows[index157];
                                {
                                    var ix = row.getAttribute("IX") || "";
                                    if (!(ix.length === 0)) {
                                        if (this.fields == null)
                                            this.fields = {};
                                        var del = row.getAttribute("Del");
                                        if (function(o1, o2) {
                                            if (o1 && o1.equals)
                                                return o1.equals(o2);
                                            else
                                                return o1 === o2
                                        }("1", del)) {
                                            this.fields[ix] = "";
                                            continue
                                        }
                                        var cells = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(row, "Cell");
                                        var value = "";
                                        var format = "";
                                        var calendar = "";
                                        var type = "";
                                        for (var index158 = 0; index158 < cells.length; index158++) {
                                            var cell = cells[index158];
                                            {
                                                n = cell.getAttribute("N");
                                                var v = cell.getAttribute("V");
                                                switch (n) {
                                                case "Value":
                                                    value = v;
                                                    break;
                                                case "Format":
                                                    format = v;
                                                    break;
                                                case "Calendar":
                                                    calendar = v;
                                                    break;
                                                case "Type":
                                                    type = v;
                                                    break
                                                }
                                            }
                                        }
                                        if (!(value.length === 0)) {
                                            try {
                                                if (function(str, searchString, position) {
                                                    if (position === void 0)
                                                        position = 0;
                                                    return str.substr(position, searchString.length) === searchString
                                                }(format, "{{"))
                                                    value = (new Date(Shape.VSDX_START_TIME + Math.floor(parseFloat(value) * 24 * 60 * 60 * 1E3))).toString()
                                            } catch (e) {}
                                            this.fields[ix] = value
                                        }
                                    }
                                }
                            }
                        } else
                            _super.prototype.parseSection.call(this, elem)
                    }
                    ;
                    Shape.prototype.parseGeom = function() {
                        if (!this.hasGeomList())
                            return "";
                        return this.geomList.getShapeXML(this)
                    }
                    ;
                    Shape.prototype.getText = function() {
                        return this.text != null ? this.text.textContent : null
                    }
                    ;
                    Shape.prototype.getTextChildren = function() {
                        return this.text != null ? this.text.childNodes : null
                    }
                    ;
                    Shape.prototype.getWidth = function() {
                        return this.width === 0 && this.height > 0 ? 1 : this.width
                    }
                    ;
                    Shape.prototype.getHeight = function() {
                        return this.height === 0 && this.width > 0 ? 1 : this.height
                    }
                    ;
                    Shape.prototype.getRotation = function() {
                        return this.rotation
                    }
                    ;
                    Shape.prototype.getStyleMap = function() {
                        return this.styleMap
                    }
                    ;
                    Shape.prototype.hasGeom = function() {
                        return !(this.geom == null || this.geom.length == 0)
                    }
                    ;
                    Shape.prototype.hasGeomList = function() {
                        return this.geomList != null && this.geomList.hasGeom()
                    }
                    ;
                    Shape.prototype.textToList = function(text, pp) {
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(pp, "")) {
                            var bullet = this.getBullet(pp);
                            if (!function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(bullet, "0")) {
                                var entries = text.split("\n");
                                if (!entries[entries.length - 1])
                                    entries.pop();
                                var ret = "";
                                for (var index159 = 0; index159 < entries.length; index159++) {
                                    var entry = entries[index159];
                                    {
                                        ret += com.mxgraph.io.vsdx.mxVsdxUtils.surroundByTags(entry, "li")
                                    }
                                }
                                ret = com.mxgraph.io.vsdx.mxVsdxUtils.surroundByTags(ret, "ul");
                                var styleMap = {};
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(bullet, "4"))
                                    styleMap["list-style-type"] = "square";
                                else
                                    styleMap["list-style-type"] = "disc";
                                ret = this.insertAttributes(ret, styleMap);
                                return ret
                            }
                        }
                        return text
                    }
                    ;
                    Shape.prototype.getTextParagraphFormated = function(para) {
                        var ret = "";
                        var styleMap = {};
                        styleMap["align"] = this.getHorizontalAlign(this.pp, true);
                        styleMap["margin-left"] = this.getIndentLeft(this.pp);
                        styleMap["margin-right"] = this.getIndentRight(this.pp);
                        styleMap["margin-top"] = this.getSpBefore(this.pp) + "px";
                        styleMap["margin-bottom"] = this.getSpAfter(this.pp) + "px";
                        styleMap["text-indent"] = this.getIndentFirst(this.pp);
                        styleMap["valign"] = this.getAlignVertical();
                        styleMap["direction"] = this.getTextDirection(this.pp);
                        ret += this.insertAttributes(para, styleMap);
                        return ret
                    }
                    ;
                    Shape.prototype.getTextCharFormated = function(text) {
                        var ret = "";
                        var color = "color:" + this.getTextColor(this.cp) + ";";
                        var size = "font-size:" + parseFloat(this.getTextSize(this.cp)) + "px;";
                        var font = "font-family:" + this.getTextFont(this.cp) + ";";
                        var direction = "direction:" + this.getRtlText(this.cp) + ";";
                        var space = "letter-spacing:" + parseFloat(this.getLetterSpace(this.cp)) / .71 + "px;";
                        var lineHeight = "line-height:" + this.getSpcLine(this.pp);
                        var opacity = ";opacity:" + this.getTextOpacity(this.cp);
                        var pos = this.getTextPos(this.cp);
                        var tCase = this.getTextCase(this.cp);
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(tCase, "1"))
                            text = text.toUpperCase();
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(tCase, "2"))
                            text = com.mxgraph.io.vsdx.mxVsdxUtils.toInitialCapital(text);
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(pos, "1"))
                            text = com.mxgraph.io.vsdx.mxVsdxUtils.surroundByTags(text, "sup");
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(pos, "2"))
                            text = com.mxgraph.io.vsdx.mxVsdxUtils.surroundByTags(text, "sub");
                        text = this.isBold(this.cp) ? com.mxgraph.io.vsdx.mxVsdxUtils.surroundByTags(text, "b") : text;
                        text = this.isItalic(this.cp) ? com.mxgraph.io.vsdx.mxVsdxUtils.surroundByTags(text, "i") : text;
                        text = this.isUnderline(this.cp) ? com.mxgraph.io.vsdx.mxVsdxUtils.surroundByTags(text, "u") : text;
                        text = this.getTextStrike(this.cp) ? com.mxgraph.io.vsdx.mxVsdxUtils.surroundByTags(text, "s") : text;
                        text = this.isSmallCaps(this.cp) ? com.mxgraph.io.vsdx.mxVsdxUtils.toSmallCaps(text, this.getTextSize(this.cp)) : text;
                        ret += '<font style="' + size + font + color + direction + space + lineHeight + opacity + '">' + text + "</font>";
                        return ret
                    }
                    ;
                    Shape.prototype.getTextDirection = function(index) {
                        var direction = this.getFlags(index);
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(direction, "0"))
                            direction = "ltr";
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(direction, "1"))
                            direction = "rtl";
                        return direction
                    }
                    ;
                    Shape.prototype.getSpcLine = function(index) {
                        var ret = "0";
                        var isPercent = false;
                        var space = this.getSpLine(index);
                        if (space > 0)
                            space = space * com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
                        else if (space === 0) {
                            space = 100;
                            isPercent = true
                        } else {
                            space = Math.abs(space) * 100;
                            isPercent = true
                        }
                        ret = (new String(space)).toString();
                        ret += isPercent ? "%" : "px";
                        return ret
                    }
                    ;
                    Shape.prototype.getSpcBefore = function(index) {
                        return this.getSpBefore(index)
                    }
                    ;
                    Shape.prototype.insertAttributes = function(text, attr) {
                        if (text.indexOf(">") != -1) {
                            var i = text.indexOf(">");
                            var tail = text.substring(i);
                            var head = text.substring(0, i);
                            var style = ' style="' + com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(attr, ":") + '"';
                            return head + style + tail
                        }
                        return text
                    }
                    ;
                    Shape.prototype.getRtlText = function(index) {
                        var rtlElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.RTL_TEXT, index, com.mxgraph.io.vsdx.mxVsdxConstants.PARAGRAPH);
                        var direction = this.getValue(rtlElem, "ltr");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(direction, "0"))
                            direction = "ltr";
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(direction, "1"))
                            direction = "rtl";
                        return direction
                    }
                    ;
                    Shape.prototype.isBold = function(index) {
                        var isBold = false;
                        var style = this.getTextStyle(index);
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(style, ""))
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(style.toLowerCase(), "themed"))
                                ;
                            else {
                                var value = parseInt(style);
                                isBold = (value & 1) === 1
                            }
                        return isBold
                    }
                    ;
                    Shape.prototype.isItalic = function(index) {
                        var isItalic = false;
                        var style = this.getTextStyle(index);
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(style, ""))
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(style.toLowerCase(), "themed"))
                                ;
                            else {
                                var value = parseInt(style);
                                isItalic = (value & 2) === 2
                            }
                        return isItalic
                    }
                    ;
                    Shape.prototype.isUnderline = function(index) {
                        var isUnderline = false;
                        var style = this.getTextStyle(index);
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(style, ""))
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(style.toLowerCase(), "themed"))
                                ;
                            else {
                                var value = parseInt(style);
                                isUnderline = (value & 4) === 4
                            }
                        return isUnderline
                    }
                    ;
                    Shape.prototype.isSmallCaps = function(index) {
                        var isSmallCaps = false;
                        var style = this.getTextStyle(index);
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(style, ""))
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(style.toLowerCase(), "themed"))
                                ;
                            else {
                                var value = parseInt(style);
                                isSmallCaps = (value & 8) === 8
                            }
                        return isSmallCaps
                    }
                    ;
                    Shape.prototype.getTextOpacity = function(index) {
                        var colorTrans = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.COLOR_TRANS, index, com.mxgraph.io.vsdx.mxVsdxConstants.CHARACTER);
                        var trans = this.getValue(colorTrans, "0");
                        var result = "1";
                        if (trans != null && !(trans.length === 0)) {
                            var tmp = 1 - parseFloat(trans);
                            result = (new String(tmp)).toString()
                        }
                        return result
                    }
                    ;
                    Shape.prototype.getTextSize = function(index) {
                        var sizeElem = this.getCellElement$java_lang_String$java_lang_String$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.SIZE, index, com.mxgraph.io.vsdx.mxVsdxConstants.CHARACTER);
                        var size = this.getScreenNumericalValue$org_w3c_dom_Element$double(sizeElem, 12);
                        return "" + Math.floor(Math.round(size * 100) / 100)
                    }
                    ;
                    Shape.prototype.getAlignVertical = function() {
                        var vertical = mxConstants.ALIGN_MIDDLE;
                        var align = parseInt(this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.VERTICAL_ALIGN), "1"));
                        if (align === 0)
                            vertical = mxConstants.ALIGN_TOP;
                        else if (align === 2)
                            vertical = mxConstants.ALIGN_BOTTOM;
                        return vertical
                    }
                    ;
                    Shape.prototype.getGeomList = function() {
                        return this.geomList
                    }
                    ;
                    Shape.prototype.getLastX = function() {
                        return this.lastX
                    }
                    ;
                    Shape.prototype.getLastY = function() {
                        return this.lastY
                    }
                    ;
                    Shape.prototype.getLastMoveX = function() {
                        return this.lastMoveX
                    }
                    ;
                    Shape.prototype.getLastMoveY = function() {
                        return this.lastMoveY
                    }
                    ;
                    Shape.prototype.getLastKnot = function() {
                        return this.lastKnot
                    }
                    ;
                    Shape.prototype.setLastX = function(lastX) {
                        this.lastX = lastX
                    }
                    ;
                    Shape.prototype.setLastY = function(lastY) {
                        this.lastY = lastY
                    }
                    ;
                    Shape.prototype.setLastMoveX = function(lastMoveX) {
                        this.lastMoveX = lastMoveX
                    }
                    ;
                    Shape.prototype.setLastMoveY = function(lastMoveY) {
                        this.lastMoveY = lastMoveY
                    }
                    ;
                    Shape.prototype.setLastKnot = function(lastKnot) {
                        this.lastKnot = lastKnot
                    }
                    ;
                    return Shape
                }(com.mxgraph.io.vsdx.Style);
                Shape.VSDX_START_TIME = -22091688E5;
                vsdx.Shape = Shape;
                Shape["__class"] = "com.mxgraph.io.vsdx.Shape"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var io;
        (function(io) {
            var vsdx;
            (function(vsdx) {
                var VsdxShape = function(_super) {
                    __extends(VsdxShape, _super);
                    function VsdxShape(page, shape, vertex, masters, master, model) {
                        var _this = this;
                        _this.masterShape = null;
                        _this.master = null;
                        _this.parentHeight = 0;
                        _this = _super.call(this, shape, model) || this;
                        _this.htmlLabels = true;
                        _this.rootShape = _this;
                        _this.shapeName = null;
                        _this.shapeIndex = 0;
                        _this.vertex = true;
                        _this.childShapes = {};
                        var masterId = _this.getMasterId();
                        var masterShapeLocal = _this.getShapeMasterId();
                        if (masterId != null)
                            _this.master = function(m, k) {
                                return m[k] ? m[k] : null
                            }(masters, masterId);
                        else
                            _this.master = master;
                        if (_this.master != null)
                            if (masterId == null && masterShapeLocal != null)
                                _this.masterShape = _this.master.getSubShape(masterShapeLocal);
                            else
                                _this.masterShape = _this.master.getMasterShape();
                        var name = _this.getNameU();
                        var index = name.lastIndexOf(".");
                        if (index !== -1)
                            name = name.substring(0, index);
                        _this.shapeName = name;
                        var shapesList = shape.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.SHAPES);
                        if (shapesList != null && shapesList.length > 0) {
                            var shapesElement = shapesList.item(0);
                            _this.childShapes = page.parseShapes(shapesElement, _this.master, false)
                        }
                        var rotation = _this.calcRotation();
                        _this.rotation = rotation * 100 / 100;
                        _this.rotation = _this.rotation % 360;
                        var themeIndex = page.getCellIntValue("ThemeIndex", -100);
                        if (themeIndex === -100)
                            themeIndex = parseInt(_this.getValue(_this.getCellElement$java_lang_String("ThemeIndex"), "0"));
                        var theme = function(m, k) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                    return m.entries[i].value;
                            return null
                        }(model.getThemes(), themeIndex);
                        var variant = page.getCellIntValue("VariationColorIndex", 0);
                        _this.setThemeAndVariant(theme, variant);
                        {
                            var array161 = function(m) {
                                if (m.entries == null)
                                    m.entries = [];
                                return m.entries
                            }(_this.childShapes);
                            for (var index160 = 0; index160 < array161.length; index160++) {
                                var entry = array161[index160];
                                {
                                    var childShape = entry.getValue();
                                    childShape.setRootShape(_this);
                                    if (childShape.theme == null)
                                        childShape.setThemeAndVariant(theme, variant)
                                }
                            }
                        }
                        _this.quickStyleVals = new com.mxgraph.io.vsdx.theme.QuickStyleVals(parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleEffectsMatrix"), "0")),parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleFillColor"), "1")),parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleFillMatrix"), "0")),parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleFontColor"), "1")),parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleFontMatrix"), "0")),parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleLineColor"), "1")),parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleLineMatrix"), "0")),parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleShadowColor"), "1")),parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleType"), "0")),parseInt(_this.getValue(_this.getCellElement$java_lang_String("QuickStyleVariation"), "0")));
                        if (_this.masterShape != null) {
                            _this.masterShape.processGeomList(null);
                            _this.processGeomList(_this.masterShape.getGeomList());
                            if (_this.width === 0)
                                _this.width = _this.getScreenNumericalValue$org_w3c_dom_Element$double(_this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.WIDTH), 0);
                            if (_this.height === 0)
                                _this.height = _this.getScreenNumericalValue$org_w3c_dom_Element$double(_this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.HEIGHT), 0)
                        } else
                            _this.processGeomList(null);
                        _this.vertex = vertex || _this.childShapes != null && !function(m) {
                            if (m.entries == null)
                                m.entries = [];
                            return m.entries.length == 0
                        }(_this.childShapes) || _this.geomList != null && (!_this.geomList.isNoFill() || _this.geomList.getGeoCount() > 1);
                        _this.layerMember = _this.getValue(_this.getCellElement$java_lang_String("LayerMember"));
                        return _this
                    }
                    VsdxShape.__static_initialize = function() {
                        if (!VsdxShape.__static_initialized) {
                            VsdxShape.__static_initialized = true;
                            VsdxShape.__static_initializer_0()
                        }
                    }
                    ;
                    VsdxShape.OFFSET_ARRAY_$LI$ = function() {
                        VsdxShape.__static_initialize();
                        if (VsdxShape.OFFSET_ARRAY == null)
                            VsdxShape.OFFSET_ARRAY = ["Organizational unit", "Domain 3D"].slice(0).slice(0);
                        return VsdxShape.OFFSET_ARRAY
                    }
                    ;
                    VsdxShape.arrowSizes_$LI$ = function() {
                        VsdxShape.__static_initialize();
                        if (VsdxShape.arrowSizes == null)
                            VsdxShape.arrowSizes = [2, 3, 5, 7, 9, 22, 45];
                        return VsdxShape.arrowSizes
                    }
                    ;
                    VsdxShape.arrowTypes_$LI$ = function() {
                        VsdxShape.__static_initialize();
                        return VsdxShape.arrowTypes
                    }
                    ;
                    VsdxShape.__static_initializer_0 = function() {
                        VsdxShape.arrowTypes = {};
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 0, mxConstants.NONE);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 1, mxConstants.ARROW_OPEN);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 2, "blockThin");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 3, mxConstants.ARROW_OPEN);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 4, mxConstants.ARROW_BLOCK);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 5, mxConstants.ARROW_CLASSIC);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 10, mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 13, mxConstants.ARROW_BLOCK);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 14, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_BLOCK);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 17, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_CLASSIC);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 20, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 22, VsdxShape.ARROW_NO_FILL_MARKER + "diamond");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 23, "dash");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 24, "ERone");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 25, "ERmandOne");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 27, "ERmany");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 28, "ERoneToMany");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 29, "ERzeroToMany");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 30, "ERzeroToOne");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 6, mxConstants.ARROW_BLOCK);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 7, mxConstants.ARROW_OPEN);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 8, mxConstants.ARROW_CLASSIC);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 9, "openAsync");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 11, "diamond");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 12, mxConstants.ARROW_OPEN);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 15, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_BLOCK);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 16, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_BLOCK);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 18, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_BLOCK);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 19, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_CLASSIC);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 21, VsdxShape.ARROW_NO_FILL_MARKER + "diamond");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 26, "ERmandOne");
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 31, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 32, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 33, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 34, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 35, mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 36, mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 37, mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 38, mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 39, mxConstants.ARROW_BLOCK);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 40, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_BLOCK);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 41, VsdxShape.ARROW_NO_FILL_MARKER + mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 42, mxConstants.ARROW_OVAL);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 43, mxConstants.ARROW_OPEN);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 44, mxConstants.ARROW_OPEN);
                        (function(m, k, v) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    m.entries[i].value = v;
                                    return
                                }
                            m.entries.push({
                                key: k,
                                value: v,
                                getKey: function() {
                                    return this.key
                                },
                                getValue: function() {
                                    return this.value
                                }
                            })
                        }
                        )(VsdxShape.arrowTypes_$LI$(), 45, mxConstants.ARROW_OPEN)
                    }
                    ;
                    VsdxShape.__com_mxgraph_io_vsdx_VsdxShape_LOGGER_$LI$ = function() {
                        VsdxShape.__static_initialize();
                        if (VsdxShape.__com_mxgraph_io_vsdx_VsdxShape_LOGGER == null)
                            VsdxShape.__com_mxgraph_io_vsdx_VsdxShape_LOGGER = {};
                        return VsdxShape.__com_mxgraph_io_vsdx_VsdxShape_LOGGER
                    }
                    ;
                    VsdxShape.prototype.getShapeNode = function(key) {
                        var elem = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.cellElements, key);
                        if (elem == null && this.masterShape != null)
                            return this.masterShape.getCellElement$java_lang_String(key);
                        return elem
                    }
                    ;
                    VsdxShape.prototype.getTextLabel = function() {
                        var hideText = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.HIDE_TEXT), "0");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }("1", hideText))
                            return null;
                        var txtChildren = this.getTextChildren();
                        if (txtChildren == null && this.masterShape != null)
                            txtChildren = this.masterShape.getTextChildren();
                        if (this.htmlLabels) {
                            if (txtChildren != null) {
                                this.styleMap[mxConstants.STYLE_VERTICAL_ALIGN] = this.getAlignVertical();
                                this.styleMap[mxConstants.STYLE_ALIGN] = this.getHorizontalAlign("0", false);
                                return this.getHtmlTextContent(txtChildren)
                            }
                        } else {
                            var text = this.getText();
                            if (text == null && this.masterShape != null)
                                return this.masterShape.getText();
                            else
                                return text
                        }
                        return null
                    }
                    ;
                    VsdxShape.prototype.getIndex = function(elem) {
                        var ix = elem.getAttribute("IX") || "";
                        return ix.length === 0 ? "0" : ix
                    }
                    ;
                    VsdxShape.prototype.initLabels = function(children) {
                        this.paragraphs = {};
                        var ch = null;
                        var pg = null;
                        var fld = null;
                        for (var index = 0; index < children.length; index++) {
                            var value = null;
                            var node = children.item(index);
                            var nodeName = node.nodeName;
                            switch (nodeName) {
                            case "cp":
                                {
                                    var elem = node;
                                    ch = this.getIndex(elem)
                                }
                                break;
                            case "tp":
                                {
                                    var elem = node;
                                    this.getIndex(elem)
                                }
                                break;
                            case "pp":
                                {
                                    var elem = node;
                                    pg = this.getIndex(elem)
                                }
                                break;
                            case "fld":
                                {
                                    var elem = node;
                                    fld = this.getIndex(elem);
                                    break
                                }
                            case "#text":
                                {
                                    value = node.textContent;
                                    var para = function(m, k) {
                                        return m[k] ? m[k] : null
                                    }(this.paragraphs, pg);
                                    if (para == null) {
                                        para = new com.mxgraph.io.vsdx.Paragraph(value,ch,pg,fld);
                                        this.paragraphs[pg] = para
                                    } else
                                        para.addText(value, ch, fld)
                                }
                            }
                        }
                    }
                    ;
                    VsdxShape.prototype.createHybridLabel = function(index) {
                        var para = function(m, k) {
                            return m[k] ? m[k] : null
                        }(this.paragraphs, index);
                        this.styleMap[mxConstants.STYLE_ALIGN] = this.getHorizontalAlign(index, false);
                        this.styleMap[mxConstants.STYLE_SPACING_LEFT] = this.getIndentLeft(index);
                        this.styleMap[mxConstants.STYLE_SPACING_RIGHT] = this.getIndentRight(index);
                        this.styleMap[mxConstants.STYLE_SPACING_TOP] = this.getSpBefore(index);
                        this.styleMap[mxConstants.STYLE_SPACING_BOTTOM] = this.getSpAfter(index);
                        this.styleMap[mxConstants.STYLE_VERTICAL_ALIGN] = this.getAlignVertical();
                        this.styleMap["fontColor"] = this.getTextColor(index);
                        this.styleMap["fontSize"] = this.getTextSize(index);
                        this.styleMap["fontFamily"] = this.getTextFont(index);
                        var fontStyle = this.isBold(index) ? mxConstants.FONT_BOLD : 0;
                        fontStyle |= this.isItalic(index) ? mxConstants.FONT_ITALIC : 0;
                        fontStyle |= this.isUnderline(index) ? mxConstants.FONT_UNDERLINE : 0;
                        this.styleMap["fontStyle"] = (new String(fontStyle)).toString();
                        var numValues = para.numValues();
                        var result = null;
                        for (var i = 0; i < numValues; i++) {
                            var value = para.getValue(i);
                            if (value.length === 0 && this.fields != null) {
                                var fieldIx = para.getField(i);
                                if (fieldIx != null) {
                                    value = function(m, k) {
                                        return m[k] ? m[k] : null
                                    }(this.fields, fieldIx);
                                    if (value == null && this.masterShape != null && this.masterShape.fields != null)
                                        value = function(m, k) {
                                            return m[k] ? m[k] : null
                                        }(this.masterShape.fields, fieldIx)
                                }
                            }
                            if (value != null)
                                result = result == null ? value : result + value
                        }
                        return result
                    }
                    ;
                    VsdxShape.prototype.getHtmlTextContent = function(txtChildren) {
                        var ret = "";
                        var first = true;
                        if (txtChildren != null && txtChildren.length > 0)
                            for (var index = 0; index < txtChildren.length; index++) {
                                var node = txtChildren.item(index);
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(node.nodeName, "cp")) {
                                    var elem = node;
                                    this.cp = this.getIndex(elem)
                                } else if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(node.nodeName, "tp")) {
                                    var elem = node;
                                    this.tp = this.getIndex(elem)
                                } else if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(node.nodeName, "pp")) {
                                    var elem = node;
                                    this.pp = this.getIndex(elem);
                                    if (first)
                                        first = false;
                                    else
                                        ret += "</p>";
                                    var para = "<p>";
                                    ret += this.getTextParagraphFormated(para)
                                } else if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(node.nodeName, "fld")) {
                                    var elem = node;
                                    this.fld = this.getIndex(elem);
                                    var text = null;
                                    if (this.fields != null)
                                        text = function(m, k) {
                                            return m[k] ? m[k] : null
                                        }(this.fields, this.fld);
                                    if (text == null && this.masterShape != null && this.masterShape.fields != null)
                                        text = function(m, k) {
                                            return m[k] ? m[k] : null
                                        }(this.masterShape.fields, this.fld);
                                    if (text != null)
                                        ret += this.processLblTxt(text)
                                } else if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(node.nodeName, "#text")) {
                                    var text = node.textContent;
                                    ret += this.processLblTxt(text)
                                }
                            }
                        var end = first ? "" : "</p>";
                        ret += end;
                        com.mxgraph.io.vsdx.mxVsdxUtils.surroundByTags(ret, "div");
                        return ret
                    }
                    ;
                    VsdxShape.prototype.processLblTxt = function(text) {
                        text = com.mxgraph.io.vsdx.mxVsdxUtils.htmlEntities(text);
                        text = this.textToList(text, this.pp);
                        text = text.replace(new RegExp("\n","g"), "<br/>").replace(new RegExp(com.mxgraph.io.vsdx.Shape.UNICODE_LINE_SEP_$LI$(),"g"), "<br/>");
                        return this.getTextCharFormated(text)
                    }
                    ;
                    VsdxShape.prototype.isConnectorBigNameU = function(nameU) {
                        return function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "60 degree single") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "45 degree single") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "45 degree double") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "60 degree double") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "45 degree  tail") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "60 degree  tail") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "45 degree tail") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "60 degree tail") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "Flexi-arrow 2") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "Flexi-arrow 1") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "Flexi-arrow 3") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "Double flexi-arrow") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "Fancy arrow")
                    }
                    ;
                    VsdxShape.prototype.isVertex = function() {
                        return this.vertex
                    }
                    ;
                    VsdxShape.prototype.getOriginPoint = function(parentHeight, rotation) {
                        var px = this.getPinX();
                        var py = this.getPinY();
                        var lpy = this.getLocPinY();
                        var lpx = this.getLocPinX();
                        var w = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.WIDTH), 0);
                        var h = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.HEIGHT), 0);
                        var x = px - lpx;
                        var y = parentHeight - (py + (h - lpy));
                        if (rotation && (lpy !== h / 2 || lpx !== w / 2))
                            if (this.rotation !== 0) {
                                var vecX = w / 2 - lpx;
                                var vecY = lpy - h / 2;
                                var cos = Math.cos(function(x) {
                                    return x * Math.PI / 180
                                }(360 - this.rotation));
                                var sin = Math.sin(function(x) {
                                    return x * Math.PI / 180
                                }(360 - this.rotation));
                                return new mxPoint(x + vecX - (vecX * cos - vecY * sin),vecX * sin + vecY * cos + y - vecY)
                            }
                        return new mxPoint(x,y)
                    }
                    ;
                    VsdxShape.prototype.getDimensions = function() {
                        var w = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.WIDTH), 0);
                        var h = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.HEIGHT), 0);
                        return new mxPoint(w === 0 && h > 0 ? 1 : w,h === 0 && w > 0 ? 1 : h)
                    }
                    ;
                    VsdxShape.prototype.getPinX = function() {
                        return this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.PIN_X), 0)
                    }
                    ;
                    VsdxShape.prototype.getPinY = function() {
                        return this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.PIN_Y), 0)
                    }
                    ;
                    VsdxShape.prototype.getLocPinX = function() {
                        return this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.LOC_PIN_X), 0)
                    }
                    ;
                    VsdxShape.prototype.getLocPinY = function() {
                        return this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.LOC_PIN_Y), 0)
                    }
                    ;
                    VsdxShape.prototype.getOpacity = function(key) {
                        var opacity = 100;
                        if (this.isGroup())
                            opacity = 0;
                        opacity = this.getValueAsDouble(this.getCellElement$java_lang_String(key), 0);
                        opacity = 100 - opacity * 100;
                        opacity = Math.max(opacity, 0);
                        opacity = Math.min(opacity, 100);
                        return opacity
                    }
                    ;
                    VsdxShape.prototype.getGradient = function() {
                        var fillGradientEnabled = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FILL_GRADIENT_ENABLED), "0");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }("1", fillGradientEnabled)) {
                            var fillGradient = function(m, k) {
                                return m[k] ? m[k] : null
                            }(this.sections, "FillGradient");
                            if (fillGradient != null) {
                                var rows = com.mxgraph.io.vsdx.mxVsdxUtils.getDirectChildNamedElements(fillGradient.elem, "Row");
                                var color = this.getColor(fillGradient.getIndexedCell(rows[rows.length - 1].getAttribute("IX"), "GradientStopColor"));
                                if (color != null && !(color.length === 0))
                                    return color
                            }
                        }
                        var gradient = "";
                        var fillPattern = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FILL_PATTERN), "0");
                        if (parseInt(fillPattern) >= 25)
                            gradient = this.getColor(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FILL_BKGND));
                        else {
                            var theme_11 = this.getTheme();
                            if (theme_11 != null) {
                                var gradColor = theme_11.getFillGraientColor(this.getQuickStyleVals());
                                if (gradColor != null)
                                    gradient = gradColor.toHexStr()
                            }
                        }
                        return gradient
                    }
                    ;
                    VsdxShape.prototype.getGradientDirection = function() {
                        var direction = "";
                        var fillPattern = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FILL_PATTERN), "0");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(fillPattern, "25"))
                            direction = mxConstants.DIRECTION_EAST;
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(fillPattern, "27"))
                            direction = mxConstants.DIRECTION_WEST;
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(fillPattern, "28"))
                            direction = mxConstants.DIRECTION_SOUTH;
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(fillPattern, "30"))
                            direction = mxConstants.DIRECTION_NORTH;
                        return direction
                    }
                    ;
                    VsdxShape.prototype.calcRotation = function() {
                        var rotation = parseFloat(this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.ANGLE), "0"));
                        rotation = function(x) {
                            return x * 180 / Math.PI
                        }(rotation);
                        rotation = rotation % 360;
                        rotation = rotation * 100 / 100;
                        return 360 - rotation
                    }
                    ;
                    VsdxShape.prototype.propagateRotation = function(parentRotation) {
                        this.rotation += parentRotation;
                        this.rotation %= 360;
                        this.rotation = this.rotation * 100 / 100
                    }
                    ;
                    VsdxShape.prototype.getTopSpacing = function() {
                        var topMargin = this.getTextTopMargin();
                        topMargin = (topMargin / 2 - 2.8) * 100 / 100;
                        return topMargin
                    }
                    ;
                    VsdxShape.prototype.getBottomSpacing = function() {
                        var bottomMargin = this.getTextBottomMargin();
                        bottomMargin = (bottomMargin / 2 - 2.8) * 100 / 100;
                        return bottomMargin
                    }
                    ;
                    VsdxShape.prototype.getLeftSpacing = function() {
                        var leftMargin = this.getTextLeftMargin();
                        leftMargin = (leftMargin / 2 - 2.8) * 100 / 100;
                        return leftMargin
                    }
                    ;
                    VsdxShape.prototype.getRightSpacing = function() {
                        var rightMargin = this.getTextRightMargin();
                        rightMargin = (rightMargin / 2 - 2.8) * 100 / 100;
                        return rightMargin
                    }
                    ;
                    VsdxShape.prototype.getLabelRotation = function() {
                        var hor = true;
                        var rotation = this.calcRotation();
                        var angle = parseFloat(this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_ANGLE), "0"));
                        angle = function(x) {
                            return x * 180 / Math.PI
                        }(angle);
                        angle = angle - rotation;
                        if (!(Math.abs(angle) < 45 || Math.abs(angle) > 270))
                            hor = false;
                        return hor
                    }
                    ;
                    VsdxShape.prototype.getStyleFromShape = function() {
                        this.styleMap[com.mxgraph.io.vsdx.mxVsdxConstants.VSDX_ID] = this.getId().toString();
                        this.rotation = Math.round(this.rotation);
                        if (this.rotation !== 0)
                            this.styleMap[mxConstants.STYLE_ROTATION] = "" + this.rotation;
                        var fillcolor = this.getFillColor();
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(fillcolor, ""))
                            this.styleMap[mxConstants.STYLE_FILLCOLOR] = fillcolor;
                        else
                            this.styleMap[mxConstants.STYLE_FILLCOLOR] = "none";
                        var id = this.getId();
                        this.styleDebug("ID = " + id + " , Fill Color = " + fillcolor);
                        var gradient = this.getGradient();
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(gradient, "")) {
                            this.styleMap[mxConstants.STYLE_GRADIENTCOLOR] = gradient;
                            var gradientDirection = this.getGradientDirection();
                            if (!function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(gradientDirection, "") && !function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(gradientDirection, mxConstants.DIRECTION_SOUTH))
                                this.styleMap[mxConstants.STYLE_GRADIENT_DIRECTION] = gradientDirection
                        } else
                            this.styleMap[mxConstants.STYLE_GRADIENTCOLOR] = "none";
                        var opacity = this.getOpacity(com.mxgraph.io.vsdx.mxVsdxConstants.FILL_FOREGND_TRANS);
                        if (opacity < 100)
                            this.styleMap[mxConstants.STYLE_FILL_OPACITY] = "" + opacity;
                        opacity = this.getOpacity(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_COLOR_TRANS);
                        if (opacity < 100)
                            this.styleMap[mxConstants.STYLE_STROKE_OPACITY] = "" + opacity;
                        var form = this.getForm();
                        if (form.hasOwnProperty(mxConstants.STYLE_SHAPE) && function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(function(m, k) {
                            return m[k] ? m[k] : null
                        }(form, mxConstants.STYLE_SHAPE), "image;"))
                            this.styleMap[mxConstants.STYLE_WHITE_SPACE] = "wrap";
                        for (var key in form)
                            this.styleMap[key] = form[key];
                        if (this.isDashed()) {
                            this.styleMap[mxConstants.STYLE_DASHED] = "1";
                            var dashPattern = this.getDashPattern();
                            if (dashPattern != null)
                                this.styleMap[mxConstants.STYLE_DASH_PATTERN] = dashPattern
                        }
                        var color = this.getStrokeColor();
                        var tr = this.getStrokeTransparency();
                        this.styleDebug("ID = " + id + " , Color = " + color + " , stroke transparency = " + tr);
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(color, "") && tr !== 1)
                            this.styleMap[mxConstants.STYLE_STROKECOLOR] = color;
                        else
                            ;var lWeight = Math.round(this.getLineWidth()) | 0;
                        if (lWeight !== 1)
                            this.styleMap[mxConstants.STYLE_STROKEWIDTH] = "" + lWeight;
                        if (this.isShadow())
                            this.styleMap[mxConstants.STYLE_SHADOW] = com.mxgraph.io.vsdx.mxVsdxConstants.TRUE;
                        var topMargin = Math.round(this.getTopSpacing()) | 0;
                        if (topMargin !== 0)
                            this.styleMap[mxConstants.STYLE_SPACING_TOP] = "" + topMargin;
                        var bottomMargin = Math.round(this.getBottomSpacing()) | 0;
                        if (bottomMargin !== 0)
                            this.styleMap[mxConstants.STYLE_SPACING_BOTTOM] = "" + bottomMargin;
                        var leftMargin = Math.round(this.getLeftSpacing()) | 0;
                        if (leftMargin !== 0)
                            this.styleMap[mxConstants.STYLE_SPACING_LEFT] = "" + leftMargin;
                        var rightMargin = Math.round(this.getRightSpacing()) | 0;
                        if (rightMargin !== 0)
                            this.styleMap[mxConstants.STYLE_SPACING_RIGHT] = "" + rightMargin;
                        var direction = this.getDirection(form);
                        if (direction !== mxConstants.DIRECTION_EAST)
                            this.styleMap[mxConstants.STYLE_DIRECTION] = direction;
                        var flibX = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FLIP_X), "0");
                        var flibY = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.FLIP_Y), "0");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }("1", flibX))
                            this.styleMap[mxConstants.STYLE_FLIPH] = "1";
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }("1", flibY))
                            this.styleMap[mxConstants.STYLE_FLIPV] = "1";
                        this.resolveCommonStyles();
                        return this.styleMap
                    }
                    ;
                    VsdxShape.prototype.getDashPattern = function() {
                        var pattern = null;
                        var linePattern = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_PATTERN), "0");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(linePattern, "Themed")) {
                            var theme_12 = this.getTheme();
                            if (theme_12 != null)
                                pattern = this.isVertex() ? theme_12.getLineDashPattern$com_mxgraph_io_vsdx_theme_QuickStyleVals(this.getQuickStyleVals()) : theme_12.getConnLineDashPattern(this.getQuickStyleVals())
                        } else
                            pattern = vsdx.Style.getLineDashPattern(parseInt(linePattern));
                        if (pattern != null && !(pattern.length == 0)) {
                            var str = {
                                str: "",
                                toString: function() {
                                    return this.str
                                }
                            };
                            var _loop_4 = function(index162) {
                                var len = pattern[index162];
                                {
                                    (function(sb) {
                                        return sb.str = sb.str.concat(len.toFixed(2) + " ")
                                    }
                                    )(str)
                                }
                            };
                            for (var index162 = 0; index162 < pattern.length; index162++)
                                _loop_4(index162);
                            return str.str.trim()
                        }
                        return null
                    }
                    ;
                    VsdxShape.prototype.isDashed = function() {
                        var linePattern = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_PATTERN), "0");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(linePattern, "Themed")) {
                            var theme_13 = this.getTheme();
                            if (theme_13 != null)
                                return this.isVertex() ? theme_13.isLineDashed$com_mxgraph_io_vsdx_theme_QuickStyleVals(this.getQuickStyleVals()) : theme_13.isConnLineDashed(this.getQuickStyleVals())
                        } else if (!(function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(linePattern, "0") || function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(linePattern, "1")))
                            return true;
                        return false
                    }
                    ;
                    VsdxShape.prototype.getLineWidth = function() {
                        var lineWeight = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.LINE_WEIGHT), "1");
                        var lWeight = 1;
                        try {
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(lineWeight, "Themed")) {
                                var theme_14 = this.getTheme();
                                if (theme_14 != null)
                                    lWeight = (this.isVertex() ? theme_14.getLineWidth$com_mxgraph_io_vsdx_theme_QuickStyleVals(this.getQuickStyleVals()) : theme_14.getConnLineWidth(this.getQuickStyleVals())) / 1E4
                            } else {
                                lWeight = parseFloat(lineWeight);
                                lWeight = this.getScreenNumericalValue$double(lWeight)
                            }
                        } catch (e) {}
                        if (lWeight < 1)
                            lWeight *= 2;
                        return lWeight
                    }
                    ;
                    VsdxShape.prototype.getStartArrowSize = function() {
                        var baSize = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.BEGIN_ARROW_SIZE), "4");
                        try {
                            var size = 4;
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(baSize, "Themed")) {
                                var theme_15 = this.getTheme();
                                if (theme_15 != null)
                                    size = this.isVertex() ? theme_15.getStartSize(this.getQuickStyleVals()) : theme_15.getConnStartSize(this.getQuickStyleVals())
                            } else
                                size = parseFloat(baSize);
                            return VsdxShape.arrowSizes_$LI$()[size]
                        } catch (e) {}
                        return 4
                    }
                    ;
                    VsdxShape.prototype.getFinalArrowSize = function() {
                        var eaSize = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.END_ARROW_SIZE), "4");
                        try {
                            var size = 4;
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(eaSize, "Themed")) {
                                var theme_16 = this.getTheme();
                                if (theme_16 != null)
                                    size = this.isVertex() ? theme_16.getEndSize(this.getQuickStyleVals()) : theme_16.getConnEndSize(this.getQuickStyleVals())
                            } else
                                size = parseFloat(eaSize);
                            return VsdxShape.arrowSizes_$LI$()[size]
                        } catch (e) {}
                        return 4
                    }
                    ;
                    VsdxShape.prototype.isRounded = function() {
                        var val = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.ROUNDING), "0");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }("Themed", val))
                            val = "0";
                        return parseFloat(val) > 0
                    }
                    ;
                    VsdxShape.prototype.isShadow = function() {
                        var shdw = this.getValue(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.SHDW_PATTERN), "0");
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(shdw, "Themed"))
                            ;
                        else if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(shdw, "0"))
                            return true;
                        return false
                    }
                    ;
                    VsdxShape.prototype.getEdgeStyle$java_util_Map = function(edgeShape) {
                        var result = {};
                        var edgeName = function(m, k) {
                            return m[k] ? m[k] : null
                        }(edgeShape, mxConstants.STYLE_SHAPE);
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(edgeName, "mxgraph.lean_mapping.electronic_info_flow_edge")) {
                            result[mxConstants.STYLE_EDGE] = mxConstants.NONE;
                            return result
                        } else {
                            result[mxConstants.STYLE_EDGE] = mxConstants.EDGESTYLE_ELBOW;
                            return result
                        }
                    }
                    ;
                    VsdxShape.prototype.getEdgeStyle = function(edgeShape) {
                        if (edgeShape != null && edgeShape instanceof Object || edgeShape === null)
                            return this.getEdgeStyle$java_util_Map(edgeShape);
                        else if (edgeShape === undefined)
                            return this.getEdgeStyle$();
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    VsdxShape.prototype.getMasterId = function() {
                        if (this.shape.hasAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.MASTER))
                            return this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.MASTER);
                        else
                            return null
                    }
                    ;
                    VsdxShape.prototype.getShapeMasterId = function() {
                        if (this.shape.hasAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.MASTER_SHAPE))
                            return this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.MASTER_SHAPE);
                        else
                            return null
                    }
                    ;
                    VsdxShape.prototype.isGroup = function() {
                        return function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(this.shape.getAttribute("Type"), "Group")
                    }
                    ;
                    VsdxShape.getType = function(shape) {
                        return shape.getAttribute("Type")
                    }
                    ;
                    VsdxShape.prototype.getMaster = function() {
                        return this.master
                    }
                    ;
                    VsdxShape.prototype.getNameU = function() {
                        var result = this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.NAME_U) || "";
                        if ((result == null || function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(result, "")) && this.masterShape != null)
                            result = this.masterShape.getNameU();
                        return result
                    }
                    ;
                    VsdxShape.prototype.getName = function() {
                        var result = this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.NAME);
                        if ((result == null || function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(result, "")) && this.masterShape != null)
                            result = this.masterShape.getName();
                        return result
                    }
                    ;
                    VsdxShape.prototype.getMasterName = function() {
                        return this.shapeName
                    }
                    ;
                    VsdxShape.prototype.setLabelOffset = function(vertex, style) {
                        var nameU = "";
                        var masterNameU = "";
                        if (this.shape.hasAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.NAME_U))
                            nameU = this.shape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.NAME_U);
                        if (this.getMaster() != null && this.getMaster().getMasterElement() != null)
                            if (this.getMaster().getMasterElement().hasAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.NAME_U))
                                masterNameU = this.getMaster().getMasterElement().getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.NAME_U);
                        if (function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "Organizational unit") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(masterNameU, "Organizational unit")) {
                            var control = this.shape.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.CONTROL).item(0);
                            var xEl = null;
                            var xS = "0.0";
                            var yEl = null;
                            var yS = "-0.4";
                            if (control != null) {
                                xEl = control.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.X).item(0);
                                if (xEl.hasAttribute("F"))
                                    xS = xEl.getAttribute("F");
                                else
                                    xS = xEl.textContent;
                                yEl = control.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.Y).item(0);
                                if (yEl.hasAttribute("F"))
                                    yS = yEl.getAttribute("F");
                                else
                                    yS = yEl.textContent
                            }
                            var geometry_3 = vertex.getGeometry();
                            xS = xS.split("Width/2+").join("");
                            xS = xS.split("DL").join("");
                            yS = yS.split("Height*").join("");
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(xS, "Inh"))
                                xS = "0.0";
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(yS, "Inh"))
                                yS = "-0.4";
                            if (yS.indexOf("txtHeight") != -1)
                                yS = "-0.4";
                            var styleArray = style.split(";");
                            var tabHeight = "";
                            for (var i = 0; i < styleArray.length; i++) {
                                var currStyle = styleArray[i];
                                currStyle = currStyle.trim();
                                if (function(str, searchString, position) {
                                    if (position === void 0)
                                        position = 0;
                                    return str.substr(position, searchString.length) === searchString
                                }(currStyle, "tabHeight="))
                                    tabHeight = currStyle.split("tabHeight=").join("")
                            }
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(tabHeight, ""))
                                tabHeight = "20";
                            var tH = parseFloat(tabHeight);
                            var x = parseFloat(xS);
                            var y = parseFloat(yS);
                            var h = geometry_3.height;
                            var xFinal = geometry_3.width * .1 + x * 100;
                            var yFinal = h - h * y - tH / 2;
                            var offset = new mxPoint(xFinal,yFinal);
                            vertex.getGeometry().offset = offset
                        } else if (function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(nameU, "Domain 3D") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(masterNameU, "Domain 3D")) {
                            var control = this.shape.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.CONTROL).item(0);
                            var xEl = null;
                            var xS = "0.0";
                            var yEl = null;
                            var yS = "-0.4";
                            if (control != null) {
                                xEl = control.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.X).item(0);
                                xS = xEl.getAttribute("F");
                                yEl = control.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.Y).item(0);
                                yS = yEl.getAttribute("F")
                            }
                            var geometry_4 = vertex.getGeometry();
                            xS = xS.split("Width/2+").join("");
                            xS = xS.split("DL").join("");
                            yS = yS.split("Height*").join("");
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(xS, "Inh") || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(xS, ""))
                                xS = "0.0";
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(yS, "Inh") || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(yS, ""))
                                yS = "-0.4";
                            if (yS.indexOf("txtHeight") != -1)
                                yS = "-0.4";
                            var x = parseFloat(xS);
                            var y = parseFloat(yS);
                            var h = geometry_4.height;
                            var xFinal = geometry_4.width * .1 + x * 100;
                            var yFinal = h - h * y;
                            var offset = new mxPoint(xFinal,yFinal);
                            vertex.getGeometry().offset = offset
                        }
                    }
                    ;
                    VsdxShape.prototype.getForm = function() {
                        var result = {};
                        if (this.isVertex())
                            try {
                                var type = VsdxShape.getType(this.getShape());
                                this.styleDebug("shape type = " + type);
                                if (this.imageData != null || function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(com.mxgraph.io.vsdx.mxVsdxConstants.FOREIGN, type) && this.masterShape != null && this.masterShape.imageData != null) {
                                    var imageData = this.imageData != null ? this.imageData : this.masterShape.imageData;
                                    result["shape"] = "image";
                                    result["aspect"] = "fixed";
                                    var iType = function(m, k) {
                                        return m[k] ? m[k] : null
                                    }(imageData, "iType");
                                    var iData = function(m, k) {
                                        return m[k] ? m[k] : null
                                    }(imageData, "iData");
                                    result["image"] = "data:image/" + iType + "," + iData;
                                    return result
                                }
                                var parsedGeom = this.parseGeom();
                                if (function(o1, o2) {
                                    if (o1 && o1.equals)
                                        return o1.equals(o2);
                                    else
                                        return o1 === o2
                                }(parsedGeom, "")) {
                                    this.styleDebug("No geom found");
                                    return result
                                }
                                var enc = Graph.prototype.compress(parsedGeom);
                                result[mxConstants.STYLE_SHAPE] = "stencil(" + enc + ")"
                            } catch (e) {
                                console.error(e.message, e)
                            }
                        else
                            return this.getEdgeStyle();
                        return result
                    }
                    ;
                    VsdxShape.prototype.isOff_page_reference = function() {
                        var name = this.getNameU();
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(name, "Off-page reference") || function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(name, "Lined/Shaded process"))
                            return true;
                        return false
                    }
                    ;
                    VsdxShape.prototype.isExternal_process = function() {
                        return function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(this.shapeName, "External process")
                    }
                    ;
                    VsdxShape.prototype.getDirection = function(form) {
                        var offsetS = mxResources.get("mxOffset" + this.shapeName);
                        if (offsetS == null || function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(offsetS, "0") || function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(offsetS, ""))
                            return mxConstants.DIRECTION_EAST;
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(offsetS, "1"))
                            return mxConstants.DIRECTION_SOUTH;
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(offsetS, "2"))
                            return mxConstants.DIRECTION_WEST;
                        else if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(offsetS, "3"))
                            return mxConstants.DIRECTION_NORTH;
                        return mxConstants.DIRECTION_EAST
                    }
                    ;
                    VsdxShape.prototype.isSubproces = function() {
                        return function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(this.shapeName, "Subproces")
                    }
                    ;
                    VsdxShape.prototype.getEdgeStyle$ = function() {
                        var result = {};
                        result["edgeStyle"] = "none";
                        return result
                    }
                    ;
                    VsdxShape.prototype.getChildShapes = function() {
                        return this.childShapes
                    }
                    ;
                    VsdxShape.prototype.setChildShapes = function(childShapes) {
                        this.childShapes = childShapes
                    }
                    ;
                    VsdxShape.prototype.isDisplacedLabel = function() {
                        var txtPinXF = this.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_PIN_X, "F", "");
                        var txtPinYF = this.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_PIN_Y, "F", "");
                        var txtWidthF = this.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_WIDTH, "F", "");
                        var txtHeightF = this.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_HEIGHT, "F", "");
                        if (this.masterShape != null) {
                            if (txtPinXF === "" || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(txtPinXF.toLowerCase(), "inh"))
                                txtPinXF = this.masterShape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_PIN_X, "F", "");
                            if (txtPinYF === "" || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(txtPinYF.toLowerCase(), "inh"))
                                txtPinYF = this.masterShape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_PIN_Y, "F", "");
                            if (txtWidthF === "" || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(txtWidthF.toLowerCase(), "inh"))
                                txtWidthF = this.masterShape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_WIDTH, "F", "");
                            if (txtHeightF === "" || function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(txtHeightF.toLowerCase(), "inh"))
                                txtHeightF = this.masterShape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_HEIGHT, "F", "")
                        }
                        if (function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(txtPinXF.toLowerCase(), "width*0.5") && function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(txtPinYF.toLowerCase(), "height*0.5") && function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(txtWidthF.toLowerCase(), "width*1") && function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(txtHeightF.toLowerCase(), "height*1"))
                            return false;
                        else if (function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(txtPinXF.toLowerCase(), "width*") && function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(txtPinYF.toLowerCase(), "height*") && function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(txtWidthF.toLowerCase(), "width*") && function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(txtHeightF.toLowerCase(), "height*"))
                            return true;
                        else if (function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(txtPinXF.toLowerCase(), "controls.row_") || function(str, searchString, position) {
                            if (position === void 0)
                                position = 0;
                            return str.substr(position, searchString.length) === searchString
                        }(txtPinYF.toLowerCase(), "controls.row_"))
                            return true;
                        return false
                    }
                    ;
                    VsdxShape.prototype.isRotatedLabel = function() {
                        var txtAngleValue = this.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_ANGLE, "V", "");
                        if (this.masterShape != null)
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(txtAngleValue, ""))
                                txtAngleValue = this.masterShape.getAttribute(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_ANGLE, "V", "");
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(txtAngleValue, "0") && !function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(txtAngleValue, "0.0") && !function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(txtAngleValue, ""))
                            return true;
                        return false
                    }
                    ;
                    VsdxShape.prototype.setRootShape = function(shape) {
                        this.rootShape = shape
                    }
                    ;
                    VsdxShape.prototype.getRootShape = function() {
                        return this.rootShape
                    }
                    ;
                    VsdxShape.prototype.getStartXY = function(parentHeight) {
                        var startX = Math.floor(Math.round(this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.BEGIN_X), 0) * 100) / 100);
                        var startY = Math.floor(Math.round((parentHeight - this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.BEGIN_Y), 0)) * 100) / 100);
                        return new mxPoint(startX,startY)
                    }
                    ;
                    VsdxShape.prototype.getEndXY = function(parentHeight) {
                        var endX = Math.floor(Math.round(this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.END_X), 0) * 100) / 100);
                        var endY = Math.floor(Math.round((parentHeight - this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.END_Y), 0)) * 100) / 100);
                        return new mxPoint(endX,endY)
                    }
                    ;
                    VsdxShape.prototype.getRoutingPoints = function(parentHeight, startPoint, rotation) {
                        if (this.geomList != null)
                            return this.geomList.getRoutingPoints(parentHeight, startPoint, rotation);
                        return null
                    }
                    ;
                    VsdxShape.prototype.getControlPoints = function(parentHeight) {
                        var startXY = this.getStartXY(parentHeight);
                        var endXY = this.getEndXY(parentHeight);
                        var pointList = [];
                        if (this.shape != null) {
                            var geomList = this.shape.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.GEOM);
                            if (geomList.length > 0) {
                                var firstGeom = geomList.item(0);
                                var firstNURBS = firstGeom.getElementsByTagName(com.mxgraph.io.vsdx.mxVsdxConstants.NURBS_TO).item(0);
                                var firstE = firstNURBS.getElementsByTagName("E").item(0);
                                if (firstE != null) {
                                    var f = firstE.getAttribute("F");
                                    f = f.replace(new RegExp("NURBS\\(","g"), "");
                                    f = f.replace(new RegExp("\\)","g"), "");
                                    f = f.replace(new RegExp(",","g"), " ");
                                    f = f.replace(new RegExp("\\s\\s","g"), " ");
                                    var pointsS = f.split(" ");
                                    var pointsRaw = function(s) {
                                        var a = [];
                                        while (s-- > 0)
                                            a.push(0);
                                        return a
                                    }(pointsS.length);
                                    for (var i = 0; i < pointsS.length; i++)
                                        pointsRaw[i] = parseFloat(pointsS[i]);
                                    for (var i = 2; i + 4 < pointsS.length; i = i + 4) {
                                        var currPoint = new mxPoint;
                                        var rawX = pointsRaw[i + 2];
                                        var rawY = pointsRaw[i + 3];
                                        var width = Math.abs(endXY.x - startXY.x);
                                        var widthFixed = Math.min(100, width);
                                        var heightFixed = 100;
                                        var finalX = 0;
                                        finalX = startXY.x + widthFixed * rawX;
                                        currPoint.x = Math.floor(Math.round(finalX * 100) / 100);
                                        currPoint.y = Math.floor(Math.round((startXY.y - heightFixed * rawY) * 100) / 100);
                                        pointList.push(currPoint) > 0
                                    }
                                    return pointList
                                } else
                                    return null
                            }
                        }
                        return null
                    }
                    ;
                    VsdxShape.prototype.getStyleFromEdgeShape = function(parentHeight) {
                        this.styleMap[com.mxgraph.io.vsdx.mxVsdxConstants.VSDX_ID] = this.getId().toString();
                        var edgeShape = this.getForm();
                        if (edgeShape != null && !function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(edgeShape, ""))
                            for (var key in edgeShape)
                                this.styleMap[key] = edgeShape[key];
                        if (this.isDashed()) {
                            this.styleMap[mxConstants.STYLE_DASHED] = "1";
                            var dashPattern = this.getDashPattern();
                            if (dashPattern != null)
                                this.styleMap[mxConstants.STYLE_DASH_PATTERN] = dashPattern
                        }
                        var startArrow = this.getEdgeMarker(true);
                        if (startArrow != null) {
                            if (function(str, searchString, position) {
                                if (position === void 0)
                                    position = 0;
                                return str.substr(position, searchString.length) === searchString
                            }(startArrow, VsdxShape.ARROW_NO_FILL_MARKER)) {
                                startArrow = startArrow.substring(VsdxShape.ARROW_NO_FILL_MARKER.length);
                                this.styleMap[mxConstants.STYLE_STARTFILL] = "0"
                            }
                            this.styleMap[mxConstants.STYLE_STARTARROW] = startArrow
                        }
                        var endArrow = this.getEdgeMarker(false);
                        if (endArrow != null) {
                            if (function(str, searchString, position) {
                                if (position === void 0)
                                    position = 0;
                                return str.substr(position, searchString.length) === searchString
                            }(endArrow, VsdxShape.ARROW_NO_FILL_MARKER)) {
                                endArrow = endArrow.substring(VsdxShape.ARROW_NO_FILL_MARKER.length);
                                this.styleMap[mxConstants.STYLE_ENDFILL] = "0"
                            }
                            this.styleMap[mxConstants.STYLE_ENDARROW] = endArrow
                        }
                        var saSize = Math.round(this.getStartArrowSize()) | 0;
                        if (saSize !== 6)
                            this.styleMap[mxConstants.STYLE_STARTSIZE] = "" + saSize;
                        var faSize = Math.round(this.getFinalArrowSize()) | 0;
                        if (faSize !== 6)
                            this.styleMap[mxConstants.STYLE_ENDSIZE] = "" + faSize;
                        var lWeight = Math.round(this.getLineWidth()) | 0;
                        if (lWeight !== 1)
                            this.styleMap[mxConstants.STYLE_STROKEWIDTH] = "" + lWeight;
                        var color = this.getStrokeColor();
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(color, ""))
                            this.styleMap[mxConstants.STYLE_STROKECOLOR] = color;
                        if (this.isShadow())
                            this.styleMap[mxConstants.STYLE_SHADOW] = com.mxgraph.io.vsdx.mxVsdxConstants.TRUE;
                        if (this.isConnectorBigNameU(this.getNameU())) {
                            this.styleMap[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_ARROW;
                            var fillcolor = this.getFillColor();
                            if (!function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(fillcolor, ""))
                                this.styleMap[mxConstants.STYLE_FILLCOLOR] = fillcolor
                        }
                        var topMargin = Math.round(this.getTopSpacing()) | 0;
                        this.styleMap[mxConstants.STYLE_SPACING_TOP] = "" + topMargin;
                        var bottomMargin = Math.round(this.getBottomSpacing()) | 0;
                        this.styleMap[mxConstants.STYLE_SPACING_BOTTOM] = "" + bottomMargin;
                        var leftMargin = Math.round(this.getLeftSpacing()) | 0;
                        this.styleMap[mxConstants.STYLE_SPACING_LEFT] = "" + leftMargin;
                        var rightMargin = Math.round(this.getRightSpacing()) | 0;
                        this.styleMap[mxConstants.STYLE_SPACING_RIGHT] = "" + rightMargin;
                        var verticalAlign = this.getAlignVertical();
                        this.styleMap[mxConstants.STYLE_VERTICAL_ALIGN] = verticalAlign;
                        this.styleMap["html"] = "1";
                        this.resolveCommonStyles();
                        return this.styleMap
                    }
                    ;
                    VsdxShape.prototype.resolveCommonStyles = function() {
                        var lbkgnd = this.getTextBkgndColor(this.getCellElement$java_lang_String(com.mxgraph.io.vsdx.mxVsdxConstants.TEXT_BKGND));
                        if (!function(o1, o2) {
                            if (o1 && o1.equals)
                                return o1.equals(o2);
                            else
                                return o1 === o2
                        }(lbkgnd, ""))
                            this.styleMap[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR] = lbkgnd;
                        this.styleMap[mxConstants.STYLE_ROUNDED] = this.isRounded() ? com.mxgraph.io.vsdx.mxVsdxConstants.TRUE : com.mxgraph.io.vsdx.mxVsdxConstants.FALSE;
                        return this.styleMap
                    }
                    ;
                    VsdxShape.prototype.getEdgeMarker = function(start) {
                        var marker = this.getValue(this.getCellElement$java_lang_String(start ? com.mxgraph.io.vsdx.mxVsdxConstants.BEGIN_ARROW : com.mxgraph.io.vsdx.mxVsdxConstants.END_ARROW), "0");
                        var val = 0;
                        try {
                            if (function(o1, o2) {
                                if (o1 && o1.equals)
                                    return o1.equals(o2);
                                else
                                    return o1 === o2
                            }(marker, "Themed")) {
                                var theme_17 = this.getTheme();
                                if (theme_17 != null)
                                    val = this.isVertex() ? theme_17.getEdgeMarker(start, this.getQuickStyleVals()) : theme_17.getConnEdgeMarker(start, this.getQuickStyleVals())
                            } else
                                val = parseInt(marker)
                        } catch (e) {}
                        var type = function(m, k) {
                            if (m.entries == null)
                                m.entries = [];
                            for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                    return m.entries[i].value;
                            return null
                        }(VsdxShape.arrowTypes_$LI$(), val);
                        if (val > 0 && type == null)
                            type = function(m, k) {
                                if (m.entries == null)
                                    m.entries = [];
                                for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k)
                                        return m.entries[i].value;
                                return null
                            }(VsdxShape.arrowTypes_$LI$(), 1);
                        return type
                    }
                    ;
                    VsdxShape.prototype.getCellElement$java_lang_String = function(key) {
                        var elem = _super.prototype.getCellElement$java_lang_String.call(this, key);
                        if (elem == null && this.masterShape != null)
                            return this.masterShape.getCellElement$java_lang_String(key);
                        return elem
                    }
                    ;
                    VsdxShape.prototype.getCellElement$java_lang_String$java_lang_String$java_lang_String = function(cellKey, index, sectKey) {
                        var elem = _super.prototype.getCellElement$java_lang_String$java_lang_String$java_lang_String.call(this, cellKey, index, sectKey);
                        if (elem == null && this.masterShape != null)
                            return this.masterShape.getCellElement$java_lang_String$java_lang_String$java_lang_String(cellKey, index, sectKey);
                        return elem
                    }
                    ;
                    VsdxShape.prototype.getCellElement = function(cellKey, index, sectKey) {
                        if ((typeof cellKey === "string" || cellKey === null) && (typeof index === "string" || index === null) && (typeof sectKey === "string" || sectKey === null))
                            return this.getCellElement$java_lang_String$java_lang_String$java_lang_String(cellKey, index, sectKey);
                        else if ((typeof cellKey === "string" || cellKey === null) && index === undefined && sectKey === undefined)
                            return this.getCellElement$java_lang_String(cellKey);
                        else
                            throw new Error("invalid overload");
                    }
                    ;
                    VsdxShape.prototype.createLabelSubShape = function(graph, parent) {
                        var txtWV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_WIDTH), this.getWidth());
                        var txtHV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_HEIGHT), this.getHeight());
                        var txtLocPinXV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_LOC_PIN_X), txtWV / 2);
                        var txtLocPinYV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_LOC_PIN_Y), txtHV / 2);
                        var txtPinXV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_PIN_X), txtLocPinXV);
                        var txtPinYV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_PIN_Y), txtLocPinYV);
                        var txtAngleV = this.getValueAsDouble(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_ANGLE), 0);
                        var textLabel = this.getTextLabel();
                        if (textLabel != null && !(textLabel.length === 0)) {
                            var styleMap = mxUtils.clone(this.getStyleMap()) || {};
                            styleMap[mxConstants.STYLE_FILLCOLOR] = mxConstants.NONE;
                            styleMap[mxConstants.STYLE_STROKECOLOR] = mxConstants.NONE;
                            styleMap[mxConstants.STYLE_GRADIENTCOLOR] = mxConstants.NONE;
                            if (!styleMap.hasOwnProperty("align"))
                                styleMap["align"] = "center";
                            if (!styleMap.hasOwnProperty("verticalAlign"))
                                styleMap["verticalAlign"] = "middle";
                            if (!styleMap.hasOwnProperty("whiteSpace"))
                                styleMap["whiteSpace"] = "wrap";
                            delete styleMap["shape"];
                            delete styleMap["image"];
                            var rotation = this.getRotation();
                            if (txtAngleV !== 0) {
                                var labRot = 360 - function(x) {
                                    return x * 180 / Math.PI
                                }(txtAngleV);
                                labRot = Math.round((labRot + rotation) % 360 * 100) / 100;
                                if (labRot !== 0)
                                    styleMap["rotation"] = "" + labRot
                            }
                            var style = "text;" + com.mxgraph.io.vsdx.mxVsdxUtils.getStyleString(styleMap, "=");
                            var y = parent.getGeometry().height - (txtPinYV + txtHV - txtLocPinYV);
                            var x = txtPinXV - txtLocPinXV;
                            if (rotation > 0) {
                                var tmpGeo = new mxGeometry(x,y,txtWV,txtHV);
                                var pgeo = parent.getGeometry();
                                var hw = pgeo.width / 2;
                                var hh = pgeo.height / 2;
                                com.mxgraph.online.Utils.rotatedGeometry(tmpGeo, rotation, hw, hh);
                                x = tmpGeo.x;
                                y = tmpGeo.y
                            }
                            var v1 = graph.insertVertex(parent, null, textLabel, Math.round(x * 100) / 100, Math.round(y * 100) / 100, Math.round(txtWV * 100) / 100, Math.round(txtHV * 100) / 100, style + ";html=1;");
                            return v1
                        }
                        return null
                    }
                    ;
                    VsdxShape.prototype.getLblEdgeOffset = function(view, points) {
                        if (points != null && points.length > 1) {
                            var state = new mxCellState;
                            state.absolutePoints = points;
                            view.updateEdgeBounds(state);
                            var mxOffset = view.getPoint(state);
                            var p0 = points[0];
                            var pe = points[points.length - 1];
                            var txtWV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_WIDTH), this.getWidth());
                            var txtHV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_HEIGHT), this.getHeight());
                            var txtLocPinXV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_LOC_PIN_X), 0);
                            var txtLocPinYV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_LOC_PIN_Y), 0);
                            var txtPinXV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_PIN_X), 0);
                            var txtPinYV = this.getScreenNumericalValue$org_w3c_dom_Element$double(this.getShapeNode(com.mxgraph.io.vsdx.mxVsdxConstants.TXT_PIN_Y), 0);
                            var y = (this.getHeight() - (p0.y - pe.y)) / 2 + p0.y - mxOffset.y - (txtPinYV - txtLocPinYV + txtHV / 2);
                            var x = txtPinXV - txtLocPinXV + txtWV / 2 + (p0.x - mxOffset.x);
                            if (Math.abs(x) > 1E11)
                                return null;
                            return new mxPoint(Math.floor(Math.round(x * 100) / 100),Math.floor(Math.round(y * 100) / 100))
                        } else
                            return null
                    }
                    ;
                    VsdxShape.prototype.getShapeIndex = function() {
                        return this.shapeIndex
                    }
                    ;
                    VsdxShape.prototype.setShapeIndex = function(shapeIndex) {
                        this.shapeIndex = shapeIndex
                    }
                    ;
                    return VsdxShape
                }(com.mxgraph.io.vsdx.Shape);
                VsdxShape.__static_initialized = false;
                VsdxShape.ARROW_NO_FILL_MARKER = "0";
                VsdxShape.maxDp = 2;
                VsdxShape.USE_SHAPE_MATCH = false;
                VsdxShape.stencilTemplate = '<shape h="htemplate" w="wtemplate" aspect="variable" strokewidth="inherit"><connections></connections><background></background><foreground></foreground></shape>';
                vsdx.VsdxShape = VsdxShape;
                VsdxShape["__class"] = "com.mxgraph.io.vsdx.VsdxShape"
            }
            )(vsdx = io.vsdx || (io.vsdx = {}))
        }
        )(io = mxgraph.io || (mxgraph.io = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
var com;
(function(com) {
    var mxgraph;
    (function(mxgraph) {
        var online;
        (function(online) {
            var mxBase64 = function() {
                function mxBase64() {}
                mxBase64.__static_initialize = function() {
                    if (!mxBase64.__static_initialized) {
                        mxBase64.__static_initialized = true;
                        mxBase64.__static_initializer_0()
                    }
                }
                ;
                mxBase64.CA_$LI$ = function() {
                    mxBase64.__static_initialize();
                    if (mxBase64.CA == null)
                        mxBase64.CA = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
                    return mxBase64.CA
                }
                ;
                mxBase64.IA_$LI$ = function() {
                    mxBase64.__static_initialize();
                    if (mxBase64.IA == null)
                        mxBase64.IA = function(s) {
                            var a = [];
                            while (s-- > 0)
                                a.push(0);
                            return a
                        }(256);
                    return mxBase64.IA
                }
                ;
                mxBase64.__static_initializer_0 = function() {
                    (function(a, v) {
                        for (var i = 0; i < a.length; i++)
                            a[i] = v
                    }
                    )(mxBase64.IA_$LI$(), -1);
                    for (var i = 0, iS = mxBase64.CA_$LI$().length; i < iS; i++)
                        mxBase64.IA_$LI$()[mxBase64.CA_$LI$()[i].charCodeAt(0)] = i;
                    mxBase64.IA_$LI$()["=".charCodeAt(0)] = 0
                }
                ;
                mxBase64.encodeToChar = function(sArr, start, lineSep) {
                    var sLen = sArr != null ? sArr.length - start : 0;
                    if (sLen === 0)
                        return new Array(0);
                    var eLen = (sLen / 3 | 0) * 3;
                    var cCnt = ((sLen - 1) / 3 | 0) + 1 << 2;
                    var dLen = cCnt + (lineSep ? ((cCnt - 1) / 76 | 0) << 1 : 0);
                    var dArr = new Array(dLen);
                    for (var s = start, d = 0, cc = 0; s < eLen + start; ) {
                        var i = (sArr[s++] & 255) << 16 | (sArr[s++] & 255) << 8 | sArr[s++] & 255;
                        dArr[d++] = mxBase64.CA_$LI$()[i >>> 18 & 63];
                        dArr[d++] = mxBase64.CA_$LI$()[i >>> 12 & 63];
                        dArr[d++] = mxBase64.CA_$LI$()[i >>> 6 & 63];
                        dArr[d++] = mxBase64.CA_$LI$()[i & 63];
                        if (lineSep && ++cc === 19 && d < dLen - 2) {
                            dArr[d++] = "\r";
                            dArr[d++] = "\n";
                            cc = 0
                        }
                    }
                    var left = sLen - eLen;
                    if (left > 0) {
                        var i = (sArr[eLen + start] & 255) << 10 | (left === 2 ? (sArr[sLen + start - 1] & 255) << 2 : 0);
                        dArr[dLen - 4] = mxBase64.CA_$LI$()[i >> 12];
                        dArr[dLen - 3] = mxBase64.CA_$LI$()[i >>> 6 & 63];
                        dArr[dLen - 2] = left === 2 ? mxBase64.CA_$LI$()[i & 63] : "=";
                        dArr[dLen - 1] = "="
                    }
                    return dArr
                }
                ;
                mxBase64.decode$char_A = function(sArr) {
                    var sLen = sArr != null ? sArr.length : 0;
                    if (sLen === 0)
                        return [];
                    var sepCnt = 0;
                    for (var i = 0; i < sLen; i++)
                        if (mxBase64.IA_$LI$()[sArr[i].charCodeAt(0)] < 0)
                            sepCnt++;
                    if ((sLen - sepCnt) % 4 !== 0)
                        return null;
                    var pad = 0;
                    for (var i = sLen; i > 1 && mxBase64.IA_$LI$()[sArr[--i].charCodeAt(0)] <= 0; )
                        if (function(c) {
                            return c.charCodeAt == null ? c : c.charCodeAt(0)
                        }(sArr[i]) == "=".charCodeAt(0))
                            pad++;
                    var len = ((sLen - sepCnt) * 6 >> 3) - pad;
                    var dArr = function(s) {
                        var a = [];
                        while (s-- > 0)
                            a.push(0);
                        return a
                    }(len);
                    for (var s = 0, d = 0; d < len; ) {
                        var i = 0;
                        for (var j = 0; j < 4; j++) {
                            var c = mxBase64.IA_$LI$()[sArr[s++].charCodeAt(0)];
                            if (c >= 0)
                                i |= c << 18 - j * 6;
                            else
                                j--
                        }
                        dArr[d++] = i >> 16 | 0;
                        if (d < len) {
                            dArr[d++] = i >> 8 | 0;
                            if (d < len)
                                dArr[d++] = i | 0
                        }
                    }
                    return dArr
                }
                ;
                mxBase64.decode = function(sArr) {
                    if (sArr != null && sArr instanceof Array && (sArr.length == 0 || sArr[0] == null || typeof sArr[0] === "string") || sArr === null)
                        return com.mxgraph.online.mxBase64.decode$char_A(sArr);
                    else if (sArr != null && sArr instanceof Array && (sArr.length == 0 || sArr[0] == null || typeof sArr[0] === "number") || sArr === null)
                        return com.mxgraph.online.mxBase64.decode$byte_A(sArr);
                    else if (typeof sArr === "string" || sArr === null)
                        return com.mxgraph.online.mxBase64.decode$java_lang_String(sArr);
                    else
                        throw new Error("invalid overload");
                }
                ;
                mxBase64.decodeFast$char_A = function(sArr) {
                    var sLen = sArr.length;
                    if (sLen === 0)
                        return [];
                    var sIx = 0;
                    var eIx = sLen - 1;
                    while (sIx < eIx && mxBase64.IA_$LI$()[sArr[sIx].charCodeAt(0)] < 0)
                        sIx++;
                    while (eIx > 0 && mxBase64.IA_$LI$()[sArr[eIx].charCodeAt(0)] < 0)
                        eIx--;
                    var pad = function(c) {
                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                    }(sArr[eIx]) == "=".charCodeAt(0) ? function(c) {
                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                    }(sArr[eIx - 1]) == "=".charCodeAt(0) ? 2 : 1 : 0;
                    var cCnt = eIx - sIx + 1;
                    var sepCnt = sLen > 76 ? (function(c) {
                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                    }(sArr[76]) == "\r".charCodeAt(0) ? cCnt / 78 | 0 : 0) << 1 : 0;
                    var len = ((cCnt - sepCnt) * 6 >> 3) - pad;
                    var dArr = function(s) {
                        var a = [];
                        while (s-- > 0)
                            a.push(0);
                        return a
                    }(len);
                    var d = 0;
                    for (var cc = 0, eLen = (len / 3 | 0) * 3; d < eLen; ) {
                        var i = mxBase64.IA_$LI$()[sArr[sIx++].charCodeAt(0)] << 18 | mxBase64.IA_$LI$()[sArr[sIx++].charCodeAt(0)] << 12 | mxBase64.IA_$LI$()[sArr[sIx++].charCodeAt(0)] << 6 | mxBase64.IA_$LI$()[sArr[sIx++].charCodeAt(0)];
                        dArr[d++] = i >> 16 | 0;
                        dArr[d++] = i >> 8 | 0;
                        dArr[d++] = i | 0;
                        if (sepCnt > 0 && ++cc === 19) {
                            sIx += 2;
                            cc = 0
                        }
                    }
                    if (d < len) {
                        var i = 0;
                        for (var j = 0; sIx <= eIx - pad; j++)
                            i |= mxBase64.IA_$LI$()[sArr[sIx++].charCodeAt(0)] << 18 - j * 6;
                        for (var r = 16; d < len; r -= 8)
                            dArr[d++] = i >> r | 0
                    }
                    return dArr
                }
                ;
                mxBase64.decodeFast = function(sArr) {
                    if (sArr != null && sArr instanceof Array && (sArr.length == 0 || sArr[0] == null || typeof sArr[0] === "string") || sArr === null)
                        return com.mxgraph.online.mxBase64.decodeFast$char_A(sArr);
                    else if (sArr != null && sArr instanceof Array && (sArr.length == 0 || sArr[0] == null || typeof sArr[0] === "number") || sArr === null)
                        return com.mxgraph.online.mxBase64.decodeFast$byte_A(sArr);
                    else if (typeof sArr === "string" || sArr === null)
                        return com.mxgraph.online.mxBase64.decodeFast$java_lang_String(sArr);
                    else
                        throw new Error("invalid overload");
                }
                ;
                mxBase64.encodeToByte = function(sArr, lineSep) {
                    var sLen = sArr != null ? sArr.length : 0;
                    if (sLen === 0)
                        return [];
                    var eLen = (sLen / 3 | 0) * 3;
                    var cCnt = ((sLen - 1) / 3 | 0) + 1 << 2;
                    var dLen = cCnt + (lineSep ? ((cCnt - 1) / 76 | 0) << 1 : 0);
                    var dArr = function(s) {
                        var a = [];
                        while (s-- > 0)
                            a.push(0);
                        return a
                    }(dLen);
                    for (var s = 0, d = 0, cc = 0; s < eLen; ) {
                        var i = (sArr[s++] & 255) << 16 | (sArr[s++] & 255) << 8 | sArr[s++] & 255;
                        dArr[d++] = mxBase64.CA_$LI$()[i >>> 18 & 63].charCodeAt(0);
                        dArr[d++] = mxBase64.CA_$LI$()[i >>> 12 & 63].charCodeAt(0);
                        dArr[d++] = mxBase64.CA_$LI$()[i >>> 6 & 63].charCodeAt(0);
                        dArr[d++] = mxBase64.CA_$LI$()[i & 63].charCodeAt(0);
                        if (lineSep && ++cc === 19 && d < dLen - 2) {
                            dArr[d++] = "\r".charCodeAt(0);
                            dArr[d++] = "\n".charCodeAt(0);
                            cc = 0
                        }
                    }
                    var left = sLen - eLen;
                    if (left > 0) {
                        var i = (sArr[eLen] & 255) << 10 | (left === 2 ? (sArr[sLen - 1] & 255) << 2 : 0);
                        dArr[dLen - 4] = mxBase64.CA_$LI$()[i >> 12].charCodeAt(0);
                        dArr[dLen - 3] = mxBase64.CA_$LI$()[i >>> 6 & 63].charCodeAt(0);
                        dArr[dLen - 2] = left === 2 ? mxBase64.CA_$LI$()[i & 63].charCodeAt(0) : "=".charCodeAt(0);
                        dArr[dLen - 1] = "=".charCodeAt(0)
                    }
                    return dArr
                }
                ;
                mxBase64.decode$byte_A = function(sArr) {
                    var sLen = sArr.length;
                    var sepCnt = 0;
                    for (var i = 0; i < sLen; i++)
                        if (mxBase64.IA_$LI$()[sArr[i] & 255] < 0)
                            sepCnt++;
                    if ((sLen - sepCnt) % 4 !== 0)
                        return null;
                    var pad = 0;
                    for (var i = sLen; i > 1 && mxBase64.IA_$LI$()[sArr[--i] & 255] <= 0; )
                        if (sArr[i] == "=".charCodeAt(0))
                            pad++;
                    var len = ((sLen - sepCnt) * 6 >> 3) - pad;
                    var dArr = function(s) {
                        var a = [];
                        while (s-- > 0)
                            a.push(0);
                        return a
                    }(len);
                    for (var s = 0, d = 0; d < len; ) {
                        var i = 0;
                        for (var j = 0; j < 4; j++) {
                            var c = mxBase64.IA_$LI$()[sArr[s++] & 255];
                            if (c >= 0)
                                i |= c << 18 - j * 6;
                            else
                                j--
                        }
                        dArr[d++] = i >> 16 | 0;
                        if (d < len) {
                            dArr[d++] = i >> 8 | 0;
                            if (d < len)
                                dArr[d++] = i | 0
                        }
                    }
                    return dArr
                }
                ;
                mxBase64.decodeFast$byte_A = function(sArr) {
                    var sLen = sArr.length;
                    if (sLen === 0)
                        return [];
                    var sIx = 0;
                    var eIx = sLen - 1;
                    while (sIx < eIx && mxBase64.IA_$LI$()[sArr[sIx] & 255] < 0)
                        sIx++;
                    while (eIx > 0 && mxBase64.IA_$LI$()[sArr[eIx] & 255] < 0)
                        eIx--;
                    var pad = sArr[eIx] == "=".charCodeAt(0) ? sArr[eIx - 1] == "=".charCodeAt(0) ? 2 : 1 : 0;
                    var cCnt = eIx - sIx + 1;
                    var sepCnt = sLen > 76 ? (sArr[76] == "\r".charCodeAt(0) ? cCnt / 78 | 0 : 0) << 1 : 0;
                    var len = ((cCnt - sepCnt) * 6 >> 3) - pad;
                    var dArr = function(s) {
                        var a = [];
                        while (s-- > 0)
                            a.push(0);
                        return a
                    }(len);
                    var d = 0;
                    for (var cc = 0, eLen = (len / 3 | 0) * 3; d < eLen; ) {
                        var i = mxBase64.IA_$LI$()[sArr[sIx++]] << 18 | mxBase64.IA_$LI$()[sArr[sIx++]] << 12 | mxBase64.IA_$LI$()[sArr[sIx++]] << 6 | mxBase64.IA_$LI$()[sArr[sIx++]];
                        dArr[d++] = i >> 16 | 0;
                        dArr[d++] = i >> 8 | 0;
                        dArr[d++] = i | 0;
                        if (sepCnt > 0 && ++cc === 19) {
                            sIx += 2;
                            cc = 0
                        }
                    }
                    if (d < len) {
                        var i = 0;
                        for (var j = 0; sIx <= eIx - pad; j++)
                            i |= mxBase64.IA_$LI$()[sArr[sIx++]] << 18 - j * 6;
                        for (var r = 16; d < len; r -= 8)
                            dArr[d++] = i >> r | 0
                    }
                    return dArr
                }
                ;
                mxBase64.encodeToString = function(sArr, start, lineSep) {
                    return mxBase64.encodeToChar(sArr, start, lineSep).join("")
                }
                ;
                mxBase64.decode$java_lang_String = function(str) {
                    var sLen = str != null ? str.length : 0;
                    if (sLen === 0)
                        return [];
                    var sepCnt = 0;
                    for (var i = 0; i < sLen; i++)
                        if (mxBase64.IA_$LI$()[str.charAt(i).charCodeAt(0)] < 0)
                            sepCnt++;
                    if ((sLen - sepCnt) % 4 !== 0)
                        return null;
                    var pad = 0;
                    for (var i = sLen; i > 1 && mxBase64.IA_$LI$()[str.charAt(--i).charCodeAt(0)] <= 0; )
                        if (function(c) {
                            return c.charCodeAt == null ? c : c.charCodeAt(0)
                        }(str.charAt(i)) == "=".charCodeAt(0))
                            pad++;
                    var len = ((sLen - sepCnt) * 6 >> 3) - pad;
                    var dArr = function(s) {
                        var a = [];
                        while (s-- > 0)
                            a.push(0);
                        return a
                    }(len);
                    for (var s = 0, d = 0; d < len; ) {
                        var i = 0;
                        for (var j = 0; j < 4; j++) {
                            var c = mxBase64.IA_$LI$()[str.charAt(s++).charCodeAt(0)];
                            if (c >= 0)
                                i |= c << 18 - j * 6;
                            else
                                j--
                        }
                        dArr[d++] = i >> 16 | 0;
                        if (d < len) {
                            dArr[d++] = i >> 8 | 0;
                            if (d < len)
                                dArr[d++] = i | 0
                        }
                    }
                    return dArr
                }
                ;
                mxBase64.decodeFast$java_lang_String = function(s) {
                    var sLen = s.length;
                    if (sLen === 0)
                        return [];
                    var sIx = 0;
                    var eIx = sLen - 1;
                    while (sIx < eIx && mxBase64.IA_$LI$()[function(c) {
                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                    }(s.charAt(sIx)) & 255] < 0)
                        sIx++;
                    while (eIx > 0 && mxBase64.IA_$LI$()[function(c) {
                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                    }(s.charAt(eIx)) & 255] < 0)
                        eIx--;
                    var pad = function(c) {
                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                    }(s.charAt(eIx)) == "=".charCodeAt(0) ? function(c) {
                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                    }(s.charAt(eIx - 1)) == "=".charCodeAt(0) ? 2 : 1 : 0;
                    var cCnt = eIx - sIx + 1;
                    var sepCnt = sLen > 76 ? (function(c) {
                        return c.charCodeAt == null ? c : c.charCodeAt(0)
                    }(s.charAt(76)) == "\r".charCodeAt(0) ? cCnt / 78 | 0 : 0) << 1 : 0;
                    var len = ((cCnt - sepCnt) * 6 >> 3) - pad;
                    var dArr = function(s) {
                        var a = [];
                        while (s-- > 0)
                            a.push(0);
                        return a
                    }(len);
                    var d = 0;
                    for (var cc = 0, eLen = (len / 3 | 0) * 3; d < eLen; ) {
                        var i = mxBase64.IA_$LI$()[s.charAt(sIx++).charCodeAt(0)] << 18 | mxBase64.IA_$LI$()[s.charAt(sIx++).charCodeAt(0)] << 12 | mxBase64.IA_$LI$()[s.charAt(sIx++).charCodeAt(0)] << 6 | mxBase64.IA_$LI$()[s.charAt(sIx++).charCodeAt(0)];
                        dArr[d++] = i >> 16 | 0;
                        dArr[d++] = i >> 8 | 0;
                        dArr[d++] = i | 0;
                        if (sepCnt > 0 && ++cc === 19) {
                            sIx += 2;
                            cc = 0
                        }
                    }
                    if (d < len) {
                        var i = 0;
                        for (var j = 0; sIx <= eIx - pad; j++)
                            i |= mxBase64.IA_$LI$()[s.charAt(sIx++).charCodeAt(0)] << 18 - j * 6;
                        for (var r = 16; d < len; r -= 8)
                            dArr[d++] = i >> r | 0
                    }
                    return dArr
                }
                ;
                return mxBase64
            }();
            mxBase64.__static_initialized = false;
            online.mxBase64 = mxBase64;
            mxBase64["__class"] = "com.mxgraph.online.mxBase64"
        }
        )(online = mxgraph.online || (mxgraph.online = {}))
    }
    )(mxgraph = com.mxgraph || (com.mxgraph = {}))
}
)(com || (com = {}));
com.mxgraph.online.mxBase64.IA_$LI$();
com.mxgraph.online.mxBase64.CA_$LI$();
com.mxgraph.online.mxBase64.__static_initialize();
com.mxgraph.io.vsdx.VsdxShape.__com_mxgraph_io_vsdx_VsdxShape_LOGGER_$LI$();
com.mxgraph.io.vsdx.VsdxShape.arrowTypes_$LI$();
com.mxgraph.io.vsdx.VsdxShape.arrowSizes_$LI$();
com.mxgraph.io.vsdx.VsdxShape.OFFSET_ARRAY_$LI$();
com.mxgraph.io.vsdx.VsdxShape.__static_initialize();
com.mxgraph.io.vsdx.Shape.UNICODE_LINE_SEP_$LI$();
com.mxgraph.io.vsdx.Style.lineDashPatterns_$LI$();
com.mxgraph.io.vsdx.Style.styleTypes_$LI$();
com.mxgraph.io.vsdx.Style.__static_initialize();
com.mxgraph.online.Constants.MAX_AREA_$LI$();
com.mxgraph.io.vsdx.theme.Color.NONE_$LI$();
com.mxgraph.io.vsdx.mxVsdxUtils.conversionFactor_$LI$();
com.mxgraph.io.vsdx.mxVsdxTheme.colorIds_$LI$();
com.mxgraph.io.vsdx.mxVsdxTheme.themesIds_$LI$();
com.mxgraph.io.vsdx.mxVsdxTheme.__static_initialize();
com.mxgraph.io.vsdx.mxVsdxConstants.MY_SET_$LI$();
com.mxgraph.io.vsdx.mxVsdxConstants.SET_VALUES_$LI$();
com.mxgraph.io.vsdx.mxPropertiesManager.defaultColors_$LI$();
com.mxgraph.io.vsdx.mxPropertiesManager.__static_initialize();
com.mxgraph.io.mxVsdxCodec.vsdxPlaceholder_$LI$();
com.mxgraph.io.mxVsdxCodec.parsererrorNS_$LI$();
EditorUi.prototype.doImportVisio = function(file, done, onerror) {
    if (file.name != null && /(\.vssx?)($|\?)/i.test(file.name))
        (new com.mxgraph.io.mxVssxCodec).decodeVssx(file, done);
    else
        (new com.mxgraph.io.mxVsdxCodec).decodeVsdx(file, done, null, onerror)
}
;
/*!

JSZip v3.1.3 - A Javascript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/
!function(a) {
    if ("object" == typeof exports && "undefined" != typeof module)
        module.exports = a();
    else if ("function" == typeof define && define.amd)
        define([], a);
    else {
        var b;
        b = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this,
        b.JSZip = a()
    }
}(function() {
    return function a(b, c, d) {
        function e(g, h) {
            if (!c[g]) {
                if (!b[g]) {
                    var i = "function" == typeof require && require;
                    if (!h && i)
                        return i(g, !0);
                    if (f)
                        return f(g, !0);
                    var j = new Error("Cannot find module '" + g + "'");
                    throw j.code = "MODULE_NOT_FOUND",
                    j
                }
                var k = c[g] = {
                    exports: {}
                };
                b[g][0].call(k.exports, function(a) {
                    var c = b[g][1][a];
                    return e(c ? c : a)
                }, k, k.exports, a, b, c, d)
            }
            return c[g].exports
        }
        for (var f = "function" == typeof require && require, g = 0; g < d.length; g++)
            e(d[g]);
        return e
    }({
        1: [function(a, b, c) {
            "use strict";
            var d = a("./utils")
              , e = a("./support")
              , f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            c.encode = function(a) {
                for (var b, c, e, g, h, i, j, k = [], l = 0, m = a.length, n = m, o = "string" !== d.getTypeOf(a); l < a.length; )
                    n = m - l,
                    o ? (b = a[l++],
                    c = l < m ? a[l++] : 0,
                    e = l < m ? a[l++] : 0) : (b = a.charCodeAt(l++),
                    c = l < m ? a.charCodeAt(l++) : 0,
                    e = l < m ? a.charCodeAt(l++) : 0),
                    g = b >> 2,
                    h = (3 & b) << 4 | c >> 4,
                    i = n > 1 ? (15 & c) << 2 | e >> 6 : 64,
                    j = n > 2 ? 63 & e : 64,
                    k.push(f.charAt(g) + f.charAt(h) + f.charAt(i) + f.charAt(j));
                return k.join("")
            }
            ,
            c.decode = function(a) {
                var b, c, d, g, h, i, j, k = 0, l = 0, m = "data:";
                if (a.substr(0, m.length) === m)
                    throw new Error("Invalid base64 input, it looks like a data url.");
                a = a.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                var n = 3 * a.length / 4;
                if (a.charAt(a.length - 1) === f.charAt(64) && n--,
                a.charAt(a.length - 2) === f.charAt(64) && n--,
                n % 1 !== 0)
                    throw new Error("Invalid base64 input, bad content length.");
                var o;
                for (o = e.uint8array ? new Uint8Array(0 | n) : new Array(0 | n); k < a.length; )
                    g = f.indexOf(a.charAt(k++)),
                    h = f.indexOf(a.charAt(k++)),
                    i = f.indexOf(a.charAt(k++)),
                    j = f.indexOf(a.charAt(k++)),
                    b = g << 2 | h >> 4,
                    c = (15 & h) << 4 | i >> 2,
                    d = (3 & i) << 6 | j,
                    o[l++] = b,
                    64 !== i && (o[l++] = c),
                    64 !== j && (o[l++] = d);
                return o
            }
        }
        , {
            "./support": 30,
            "./utils": 32
        }],
        2: [function(a, b, c) {
            "use strict";
            function d(a, b, c, d, e) {
                this.compressedSize = a,
                this.uncompressedSize = b,
                this.crc32 = c,
                this.compression = d,
                this.compressedContent = e
            }
            var e = a("./external")
              , f = a("./stream/DataWorker")
              , g = a("./stream/DataLengthProbe")
              , h = a("./stream/Crc32Probe")
              , g = a("./stream/DataLengthProbe");
            d.prototype = {
                getContentWorker: function() {
                    var a = new f(e.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new g("data_length"))
                      , b = this;
                    return a.on("end", function() {
                        if (this.streamInfo.data_length !== b.uncompressedSize)
                            throw new Error("Bug : uncompressed data size mismatch")
                    }),
                    a
                },
                getCompressedWorker: function() {
                    return new f(e.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression)
                }
            },
            d.createWorkerFrom = function(a, b, c) {
                return a.pipe(new h).pipe(new g("uncompressedSize")).pipe(b.compressWorker(c)).pipe(new g("compressedSize")).withStreamInfo("compression", b)
            }
            ,
            b.exports = d
        }
        , {
            "./external": 6,
            "./stream/Crc32Probe": 25,
            "./stream/DataLengthProbe": 26,
            "./stream/DataWorker": 27
        }],
        3: [function(a, b, c) {
            "use strict";
            var d = a("./stream/GenericWorker");
            c.STORE = {
                magic: "\0\0",
                compressWorker: function(a) {
                    return new d("STORE compression")
                },
                uncompressWorker: function() {
                    return new d("STORE decompression")
                }
            },
            c.DEFLATE = a("./flate")
        }
        , {
            "./flate": 7,
            "./stream/GenericWorker": 28
        }],
        4: [function(a, b, c) {
            "use strict";
            function d() {
                for (var a, b = [], c = 0; c < 256; c++) {
                    a = c;
                    for (var d = 0; d < 8; d++)
                        a = 1 & a ? 3988292384 ^ a >>> 1 : a >>> 1;
                    b[c] = a
                }
                return b
            }
            function e(a, b, c, d) {
                var e = h
                  , f = d + c;
                a ^= -1;
                for (var g = d; g < f; g++)
                    a = a >>> 8 ^ e[255 & (a ^ b[g])];
                return a ^ -1
            }
            function f(a, b, c, d) {
                var e = h
                  , f = d + c;
                a ^= -1;
                for (var g = d; g < f; g++)
                    a = a >>> 8 ^ e[255 & (a ^ b.charCodeAt(g))];
                return a ^ -1
            }
            var g = a("./utils")
              , h = d();
            b.exports = function(a, b) {
                if ("undefined" == typeof a || !a.length)
                    return 0;
                var c = "string" !== g.getTypeOf(a);
                return c ? e(0 | b, a, a.length, 0) : f(0 | b, a, a.length, 0)
            }
        }
        , {
            "./utils": 32
        }],
        5: [function(a, b, c) {
            "use strict";
            c.base64 = !1,
            c.binary = !1,
            c.dir = !1,
            c.createFolders = !0,
            c.date = null,
            c.compression = null,
            c.compressionOptions = null,
            c.comment = null,
            c.unixPermissions = null,
            c.dosPermissions = null
        }
        , {}],
        6: [function(a, b, c) {
            "use strict";
            var d = null;
            d = "undefined" != typeof Promise ? Promise : a("lie"),
            b.exports = {
                Promise: d
            }
        }
        , {
            lie: 58
        }],
        7: [function(a, b, c) {
            "use strict";
            function d(a, b) {
                h.call(this, "FlateWorker/" + a),
                this._pako = new f[a]({
                    raw: !0,
                    level: b.level || -1
                }),
                this.meta = {};
                var c = this;
                this._pako.onData = function(a) {
                    c.push({
                        data: a,
                        meta: c.meta
                    })
                }
            }
            var e = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array
              , f = a("pako")
              , g = a("./utils")
              , h = a("./stream/GenericWorker")
              , i = e ? "uint8array" : "array";
            c.magic = "\b\0",
            g.inherits(d, h),
            d.prototype.processChunk = function(a) {
                this.meta = a.meta,
                this._pako.push(g.transformTo(i, a.data), !1)
            }
            ,
            d.prototype.flush = function() {
                h.prototype.flush.call(this),
                this._pako.push([], !0)
            }
            ,
            d.prototype.cleanUp = function() {
                h.prototype.cleanUp.call(this),
                this._pako = null
            }
            ,
            c.compressWorker = function(a) {
                return new d("Deflate",a)
            }
            ,
            c.uncompressWorker = function() {
                return new d("Inflate",{})
            }
        }
        , {
            "./stream/GenericWorker": 28,
            "./utils": 32,
            pako: 59
        }],
        8: [function(a, b, c) {
            "use strict";
            function d(a, b, c, d) {
                f.call(this, "ZipFileWorker"),
                this.bytesWritten = 0,
                this.zipComment = b,
                this.zipPlatform = c,
                this.encodeFileName = d,
                this.streamFiles = a,
                this.accumulate = !1,
                this.contentBuffer = [],
                this.dirRecords = [],
                this.currentSourceOffset = 0,
                this.entriesCount = 0,
                this.currentFile = null,
                this._sources = []
            }
            var e = a("../utils")
              , f = a("../stream/GenericWorker")
              , g = a("../utf8")
              , h = a("../crc32")
              , i = a("../signature")
              , j = function(a, b) {
                var c, d = "";
                for (c = 0; c < b; c++)
                    d += String.fromCharCode(255 & a),
                    a >>>= 8;
                return d
            }
              , k = function(a, b) {
                var c = a;
                return a || (c = b ? 16893 : 33204),
                (65535 & c) << 16
            }
              , l = function(a, b) {
                return 63 & (a || 0)
            }
              , m = function(a, b, c, d, f, m) {
                var n, o, p = a.file, q = a.compression, r = m !== g.utf8encode, s = e.transformTo("string", m(p.name)), t = e.transformTo("string", g.utf8encode(p.name)), u = p.comment, v = e.transformTo("string", m(u)), w = e.transformTo("string", g.utf8encode(u)), x = t.length !== p.name.length, y = w.length !== u.length, z = "", A = "", B = "", C = p.dir, D = p.date, E = {
                    crc32: 0,
                    compressedSize: 0,
                    uncompressedSize: 0
                };
                b && !c || (E.crc32 = a.crc32,
                E.compressedSize = a.compressedSize,
                E.uncompressedSize = a.uncompressedSize);
                var F = 0;
                b && (F |= 8),
                r || !x && !y || (F |= 2048);
                var G = 0
                  , H = 0;
                C && (G |= 16),
                "UNIX" === f ? (H = 798,
                G |= k(p.unixPermissions, C)) : (H = 20,
                G |= l(p.dosPermissions, C)),
                n = D.getUTCHours(),
                n <<= 6,
                n |= D.getUTCMinutes(),
                n <<= 5,
                n |= D.getUTCSeconds() / 2,
                o = D.getUTCFullYear() - 1980,
                o <<= 4,
                o |= D.getUTCMonth() + 1,
                o <<= 5,
                o |= D.getUTCDate(),
                x && (A = j(1, 1) + j(h(s), 4) + t,
                z += "up" + j(A.length, 2) + A),
                y && (B = j(1, 1) + j(h(v), 4) + w,
                z += "uc" + j(B.length, 2) + B);
                var I = "";
                I += "\n\0",
                I += j(F, 2),
                I += q.magic,
                I += j(n, 2),
                I += j(o, 2),
                I += j(E.crc32, 4),
                I += j(E.compressedSize, 4),
                I += j(E.uncompressedSize, 4),
                I += j(s.length, 2),
                I += j(z.length, 2);
                var J = i.LOCAL_FILE_HEADER + I + s + z
                  , K = i.CENTRAL_FILE_HEADER + j(H, 2) + I + j(v.length, 2) + "\0\0\0\0" + j(G, 4) + j(d, 4) + s + z + v;
                return {
                    fileRecord: J,
                    dirRecord: K
                }
            }
              , n = function(a, b, c, d, f) {
                var g = ""
                  , h = e.transformTo("string", f(d));
                return g = i.CENTRAL_DIRECTORY_END + "\0\0\0\0" + j(a, 2) + j(a, 2) + j(b, 4) + j(c, 4) + j(h.length, 2) + h
            }
              , o = function(a) {
                var b = "";
                return b = i.DATA_DESCRIPTOR + j(a.crc32, 4) + j(a.compressedSize, 4) + j(a.uncompressedSize, 4)
            };
            e.inherits(d, f),
            d.prototype.push = function(a) {
                var b = a.meta.percent || 0
                  , c = this.entriesCount
                  , d = this._sources.length;
                this.accumulate ? this.contentBuffer.push(a) : (this.bytesWritten += a.data.length,
                f.prototype.push.call(this, {
                    data: a.data,
                    meta: {
                        currentFile: this.currentFile,
                        percent: c ? (b + 100 * (c - d - 1)) / c : 100
                    }
                }))
            }
            ,
            d.prototype.openedSource = function(a) {
                this.currentSourceOffset = this.bytesWritten,
                this.currentFile = a.file.name;
                var b = this.streamFiles && !a.file.dir;
                if (b) {
                    var c = m(a, b, !1, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
                    this.push({
                        data: c.fileRecord,
                        meta: {
                            percent: 0
                        }
                    })
                } else
                    this.accumulate = !0
            }
            ,
            d.prototype.closedSource = function(a) {
                this.accumulate = !1;
                var b = this.streamFiles && !a.file.dir
                  , c = m(a, b, !0, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
                if (this.dirRecords.push(c.dirRecord),
                b)
                    this.push({
                        data: o(a),
                        meta: {
                            percent: 100
                        }
                    });
                else
                    for (this.push({
                        data: c.fileRecord,
                        meta: {
                            percent: 0
                        }
                    }); this.contentBuffer.length; )
                        this.push(this.contentBuffer.shift());
                this.currentFile = null
            }
            ,
            d.prototype.flush = function() {
                for (var a = this.bytesWritten, b = 0; b < this.dirRecords.length; b++)
                    this.push({
                        data: this.dirRecords[b],
                        meta: {
                            percent: 100
                        }
                    });
                var c = this.bytesWritten - a
                  , d = n(this.dirRecords.length, c, a, this.zipComment, this.encodeFileName);
                this.push({
                    data: d,
                    meta: {
                        percent: 100
                    }
                })
            }
            ,
            d.prototype.prepareNextSource = function() {
                this.previous = this._sources.shift(),
                this.openedSource(this.previous.streamInfo),
                this.isPaused ? this.previous.pause() : this.previous.resume()
            }
            ,
            d.prototype.registerPrevious = function(a) {
                this._sources.push(a);
                var b = this;
                return a.on("data", function(a) {
                    b.processChunk(a)
                }),
                a.on("end", function() {
                    b.closedSource(b.previous.streamInfo),
                    b._sources.length ? b.prepareNextSource() : b.end()
                }),
                a.on("error", function(a) {
                    b.error(a)
                }),
                this
            }
            ,
            d.prototype.resume = function() {
                return !!f.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(),
                !0) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(),
                !0))
            }
            ,
            d.prototype.error = function(a) {
                var b = this._sources;
                if (!f.prototype.error.call(this, a))
                    return !1;
                for (var c = 0; c < b.length; c++)
                    try {
                        b[c].error(a)
                    } catch (a) {}
                return !0
            }
            ,
            d.prototype.lock = function() {
                f.prototype.lock.call(this);
                for (var a = this._sources, b = 0; b < a.length; b++)
                    a[b].lock()
            }
            ,
            b.exports = d
        }
        , {
            "../crc32": 4,
            "../signature": 23,
            "../stream/GenericWorker": 28,
            "../utf8": 31,
            "../utils": 32
        }],
        9: [function(a, b, c) {
            "use strict";
            var d = a("../compressions")
              , e = a("./ZipFileWorker")
              , f = function(a, b) {
                var c = a || b
                  , e = d[c];
                if (!e)
                    throw new Error(c + " is not a valid compression method !");
                return e
            };
            c.generateWorker = function(a, b, c) {
                var d = new e(b.streamFiles,c,b.platform,b.encodeFileName)
                  , g = 0;
                try {
                    a.forEach(function(a, c) {
                        g++;
                        var e = f(c.options.compression, b.compression)
                          , h = c.options.compressionOptions || b.compressionOptions || {}
                          , i = c.dir
                          , j = c.date;
                        c._compressWorker(e, h).withStreamInfo("file", {
                            name: a,
                            dir: i,
                            date: j,
                            comment: c.comment || "",
                            unixPermissions: c.unixPermissions,
                            dosPermissions: c.dosPermissions
                        }).pipe(d)
                    }),
                    d.entriesCount = g
                } catch (h) {
                    d.error(h)
                }
                return d
            }
        }
        , {
            "../compressions": 3,
            "./ZipFileWorker": 8
        }],
        10: [function(a, b, c) {
            "use strict";
            function d() {
                if (!(this instanceof d))
                    return new d;
                if (arguments.length)
                    throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
                this.files = {},
                this.comment = null,
                this.root = "",
                this.clone = function() {
                    var a = new d;
                    for (var b in this)
                        "function" != typeof this[b] && (a[b] = this[b]);
                    return a
                }
            }
            d.prototype = a("./object"),
            d.prototype.loadAsync = a("./load"),
            d.support = a("./support"),
            d.defaults = a("./defaults"),
            d.version = "3.1.3",
            d.loadAsync = function(a, b) {
                return (new d).loadAsync(a, b)
            }
            ,
            d.external = a("./external"),
            b.exports = d
        }
        , {
            "./defaults": 5,
            "./external": 6,
            "./load": 11,
            "./object": 15,
            "./support": 30
        }],
        11: [function(a, b, c) {
            "use strict";
            function d(a) {
                return new f.Promise(function(b, c) {
                    var d = a.decompressed.getContentWorker().pipe(new i);
                    d.on("error", function(a) {
                        c(a)
                    }).on("end", function() {
                        d.streamInfo.crc32 !== a.decompressed.crc32 ? c(new Error("Corrupted zip : CRC32 mismatch")) : b()
                    }).resume()
                }
                )
            }
            var e = a("./utils")
              , f = a("./external")
              , g = a("./utf8")
              , e = a("./utils")
              , h = a("./zipEntries")
              , i = a("./stream/Crc32Probe")
              , j = a("./nodejsUtils");
            b.exports = function(a, b) {
                var c = this;
                return b = e.extend(b || {}, {
                    base64: !1,
                    checkCRC32: !1,
                    optimizedBinaryString: !1,
                    createFolders: !1,
                    decodeFileName: g.utf8decode
                }),
                j.isNode && j.isStream(a) ? f.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : e.prepareContent("the loaded zip file", a, !0, b.optimizedBinaryString, b.base64).then(function(a) {
                    var c = new h(b);
                    return c.load(a),
                    c
                }).then(function(a) {
                    var c = [f.Promise.resolve(a)]
                      , e = a.files;
                    if (b.checkCRC32)
                        for (var g = 0; g < e.length; g++)
                            c.push(d(e[g]));
                    return f.Promise.all(c)
                }).then(function(a) {
                    for (var d = a.shift(), e = d.files, f = 0; f < e.length; f++) {
                        var g = e[f];
                        c.file(g.fileNameStr, g.decompressed, {
                            binary: !0,
                            optimizedBinaryString: !0,
                            date: g.date,
                            dir: g.dir,
                            comment: g.fileCommentStr.length ? g.fileCommentStr : null,
                            unixPermissions: g.unixPermissions,
                            dosPermissions: g.dosPermissions,
                            createFolders: b.createFolders
                        })
                    }
                    return d.zipComment.length && (c.comment = d.zipComment),
                    c
                })
            }
        }
        , {
            "./external": 6,
            "./nodejsUtils": 14,
            "./stream/Crc32Probe": 25,
            "./utf8": 31,
            "./utils": 32,
            "./zipEntries": 33
        }],
        12: [function(a, b, c) {
            "use strict";
            function d(a, b) {
                f.call(this, "Nodejs stream input adapter for " + a),
                this._upstreamEnded = !1,
                this._bindStream(b)
            }
            var e = a("../utils")
              , f = a("../stream/GenericWorker");
            e.inherits(d, f),
            d.prototype._bindStream = function(a) {
                var b = this;
                this._stream = a,
                a.pause(),
                a.on("data", function(a) {
                    b.push({
                        data: a,
                        meta: {
                            percent: 0
                        }
                    })
                }).on("error", function(a) {
                    b.isPaused ? this.generatedError = a : b.error(a)
                }).on("end", function() {
                    b.isPaused ? b._upstreamEnded = !0 : b.end()
                })
            }
            ,
            d.prototype.pause = function() {
                return !!f.prototype.pause.call(this) && (this._stream.pause(),
                !0)
            }
            ,
            d.prototype.resume = function() {
                return !!f.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(),
                !0)
            }
            ,
            b.exports = d
        }
        , {
            "../stream/GenericWorker": 28,
            "../utils": 32
        }],
        13: [function(a, b, c) {
            "use strict";
            function d(a, b, c) {
                e.call(this, b),
                this._helper = a;
                var d = this;
                a.on("data", function(a, b) {
                    d.push(a) || d._helper.pause(),
                    c && c(b)
                }).on("error", function(a) {
                    d.emit("error", a)
                }).on("end", function() {
                    d.push(null)
                })
            }
            var e = a("readable-stream").Readable
              , f = a("util");
            f.inherits(d, e),
            d.prototype._read = function() {
                this._helper.resume()
            }
            ,
            b.exports = d
        }
        , {
            "readable-stream": 16,
            util: void 0
        }],
        14: [function(a, b, c) {
            "use strict";
            b.exports = {
                isNode: "undefined" != typeof Buffer,
                newBuffer: function(a, b) {
                    return new Buffer(a,b)
                },
                isBuffer: function(a) {
                    return Buffer.isBuffer(a)
                },
                isStream: function(a) {
                    return a && "function" == typeof a.on && "function" == typeof a.pause && "function" == typeof a.resume
                }
            }
        }
        , {}],
        15: [function(a, b, c) {
            "use strict";
            function d(a) {
                return "[object RegExp]" === Object.prototype.toString.call(a)
            }
            var e = a("./utf8")
              , f = a("./utils")
              , g = a("./stream/GenericWorker")
              , h = a("./stream/StreamHelper")
              , i = a("./defaults")
              , j = a("./compressedObject")
              , k = a("./zipObject")
              , l = a("./generate")
              , m = a("./nodejsUtils")
              , n = a("./nodejs/NodejsStreamInputAdapter")
              , o = function(a, b, c) {
                var d, e = f.getTypeOf(b), h = f.extend(c || {}, i);
                h.date = h.date || new Date,
                null !== h.compression && (h.compression = h.compression.toUpperCase()),
                "string" == typeof h.unixPermissions && (h.unixPermissions = parseInt(h.unixPermissions, 8)),
                h.unixPermissions && 16384 & h.unixPermissions && (h.dir = !0),
                h.dosPermissions && 16 & h.dosPermissions && (h.dir = !0),
                h.dir && (a = q(a)),
                h.createFolders && (d = p(a)) && r.call(this, d, !0);
                var l = "string" === e && h.binary === !1 && h.base64 === !1;
                c && "undefined" != typeof c.binary || (h.binary = !l);
                var o = b instanceof j && 0 === b.uncompressedSize;
                (o || h.dir || !b || 0 === b.length) && (h.base64 = !1,
                h.binary = !0,
                b = "",
                h.compression = "STORE",
                e = "string");
                var s = null;
                s = b instanceof j || b instanceof g ? b : m.isNode && m.isStream(b) ? new n(a,b) : f.prepareContent(a, b, h.binary, h.optimizedBinaryString, h.base64);
                var t = new k(a,s,h);
                this.files[a] = t
            }
              , p = function(a) {
                "/" === a.slice(-1) && (a = a.substring(0, a.length - 1));
                var b = a.lastIndexOf("/");
                return b > 0 ? a.substring(0, b) : ""
            }
              , q = function(a) {
                return "/" !== a.slice(-1) && (a += "/"),
                a
            }
              , r = function(a, b) {
                return b = "undefined" != typeof b ? b : i.createFolders,
                a = q(a),
                this.files[a] || o.call(this, a, null, {
                    dir: !0,
                    createFolders: b
                }),
                this.files[a]
            }
              , s = {
                load: function() {
                    throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")
                },
                forEach: function(a) {
                    var b, c, d;
                    for (b in this.files)
                        this.files.hasOwnProperty(b) && (d = this.files[b],
                        c = b.slice(this.root.length, b.length),
                        c && b.slice(0, this.root.length) === this.root && a(c, d))
                },
                filter: function(a) {
                    var b = [];
                    return this.forEach(function(c, d) {
                        a(c, d) && b.push(d)
                    }),
                    b
                },
                file: function(a, b, c) {
                    if (1 === arguments.length) {
                        if (d(a)) {
                            var e = a;
                            return this.filter(function(a, b) {
                                return !b.dir && e.test(a)
                            })
                        }
                        var f = this.files[this.root + a];
                        return f && !f.dir ? f : null
                    }
                    return a = this.root + a,
                    o.call(this, a, b, c),
                    this
                },
                folder: function(a) {
                    if (!a)
                        return this;
                    if (d(a))
                        return this.filter(function(b, c) {
                            return c.dir && a.test(b)
                        });
                    var b = this.root + a
                      , c = r.call(this, b)
                      , e = this.clone();
                    return e.root = c.name,
                    e
                },
                remove: function(a) {
                    a = this.root + a;
                    var b = this.files[a];
                    if (b || ("/" !== a.slice(-1) && (a += "/"),
                    b = this.files[a]),
                    b && !b.dir)
                        delete this.files[a];
                    else
                        for (var c = this.filter(function(b, c) {
                            return c.name.slice(0, a.length) === a
                        }), d = 0; d < c.length; d++)
                            delete this.files[c[d].name];
                    return this
                },
                generate: function(a) {
                    throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")
                },
                generateInternalStream: function(a) {
                    var b, c = {};
                    try {
                        if (c = f.extend(a || {}, {
                            streamFiles: !1,
                            compression: "STORE",
                            compressionOptions: null,
                            type: "",
                            platform: "DOS",
                            comment: null,
                            mimeType: "application/zip",
                            encodeFileName: e.utf8encode
                        }),
                        c.type = c.type.toLowerCase(),
                        c.compression = c.compression.toUpperCase(),
                        "binarystring" === c.type && (c.type = "string"),
                        !c.type)
                            throw new Error("No output type specified.");
                        f.checkSupport(c.type),
                        "darwin" !== c.platform && "freebsd" !== c.platform && "linux" !== c.platform && "sunos" !== c.platform || (c.platform = "UNIX"),
                        "win32" === c.platform && (c.platform = "DOS");
                        var d = c.comment || this.comment || "";
                        b = l.generateWorker(this, c, d)
                    } catch (i) {
                        b = new g("error"),
                        b.error(i)
                    }
                    return new h(b,c.type || "string",c.mimeType)
                },
                generateAsync: function(a, b) {
                    return this.generateInternalStream(a).accumulate(b)
                },
                generateNodeStream: function(a, b) {
                    return a = a || {},
                    a.type || (a.type = "nodebuffer"),
                    this.generateInternalStream(a).toNodejsStream(b)
                }
            };
            b.exports = s
        }
        , {
            "./compressedObject": 2,
            "./defaults": 5,
            "./generate": 9,
            "./nodejs/NodejsStreamInputAdapter": 12,
            "./nodejsUtils": 14,
            "./stream/GenericWorker": 28,
            "./stream/StreamHelper": 29,
            "./utf8": 31,
            "./utils": 32,
            "./zipObject": 35
        }],
        16: [function(a, b, c) {
            b.exports = a("stream")
        }
        , {
            stream: void 0
        }],
        17: [function(a, b, c) {
            "use strict";
            function d(a) {
                e.call(this, a);
                for (var b = 0; b < this.data.length; b++)
                    a[b] = 255 & a[b]
            }
            var e = a("./DataReader")
              , f = a("../utils");
            f.inherits(d, e),
            d.prototype.byteAt = function(a) {
                return this.data[this.zero + a]
            }
            ,
            d.prototype.lastIndexOfSignature = function(a) {
                for (var b = a.charCodeAt(0), c = a.charCodeAt(1), d = a.charCodeAt(2), e = a.charCodeAt(3), f = this.length - 4; f >= 0; --f)
                    if (this.data[f] === b && this.data[f + 1] === c && this.data[f + 2] === d && this.data[f + 3] === e)
                        return f - this.zero;
                return -1
            }
            ,
            d.prototype.readAndCheckSignature = function(a) {
                var b = a.charCodeAt(0)
                  , c = a.charCodeAt(1)
                  , d = a.charCodeAt(2)
                  , e = a.charCodeAt(3)
                  , f = this.readData(4);
                return b === f[0] && c === f[1] && d === f[2] && e === f[3]
            }
            ,
            d.prototype.readData = function(a) {
                if (this.checkOffset(a),
                0 === a)
                    return [];
                var b = this.data.slice(this.zero + this.index, this.zero + this.index + a);
                return this.index += a,
                b
            }
            ,
            b.exports = d
        }
        , {
            "../utils": 32,
            "./DataReader": 18
        }],
        18: [function(a, b, c) {
            "use strict";
            function d(a) {
                this.data = a,
                this.length = a.length,
                this.index = 0,
                this.zero = 0
            }
            var e = a("../utils");
            d.prototype = {
                checkOffset: function(a) {
                    this.checkIndex(this.index + a)
                },
                checkIndex: function(a) {
                    if (this.length < this.zero + a || a < 0)
                        throw new Error("End of data reached (data length = " + this.length + ", asked index = " + a + "). Corrupted zip ?")
                },
                setIndex: function(a) {
                    this.checkIndex(a),
                    this.index = a
                },
                skip: function(a) {
                    this.setIndex(this.index + a)
                },
                byteAt: function(a) {},
                readInt: function(a) {
                    var b, c = 0;
                    for (this.checkOffset(a),
                    b = this.index + a - 1; b >= this.index; b--)
                        c = (c << 8) + this.byteAt(b);
                    return this.index += a,
                    c
                },
                readString: function(a) {
                    return e.transformTo("string", this.readData(a))
                },
                readData: function(a) {},
                lastIndexOfSignature: function(a) {},
                readAndCheckSignature: function(a) {},
                readDate: function() {
                    var a = this.readInt(4);
                    return new Date(Date.UTC((a >> 25 & 127) + 1980, (a >> 21 & 15) - 1, a >> 16 & 31, a >> 11 & 31, a >> 5 & 63, (31 & a) << 1))
                }
            },
            b.exports = d
        }
        , {
            "../utils": 32
        }],
        19: [function(a, b, c) {
            "use strict";
            function d(a) {
                e.call(this, a)
            }
            var e = a("./Uint8ArrayReader")
              , f = a("../utils");
            f.inherits(d, e),
            d.prototype.readData = function(a) {
                this.checkOffset(a);
                var b = this.data.slice(this.zero + this.index, this.zero + this.index + a);
                return this.index += a,
                b
            }
            ,
            b.exports = d
        }
        , {
            "../utils": 32,
            "./Uint8ArrayReader": 21
        }],
        20: [function(a, b, c) {
            "use strict";
            function d(a) {
                e.call(this, a)
            }
            var e = a("./DataReader")
              , f = a("../utils");
            f.inherits(d, e),
            d.prototype.byteAt = function(a) {
                return this.data.charCodeAt(this.zero + a)
            }
            ,
            d.prototype.lastIndexOfSignature = function(a) {
                return this.data.lastIndexOf(a) - this.zero
            }
            ,
            d.prototype.readAndCheckSignature = function(a) {
                var b = this.readData(4);
                return a === b
            }
            ,
            d.prototype.readData = function(a) {
                this.checkOffset(a);
                var b = this.data.slice(this.zero + this.index, this.zero + this.index + a);
                return this.index += a,
                b
            }
            ,
            b.exports = d
        }
        , {
            "../utils": 32,
            "./DataReader": 18
        }],
        21: [function(a, b, c) {
            "use strict";
            function d(a) {
                e.call(this, a)
            }
            var e = a("./ArrayReader")
              , f = a("../utils");
            f.inherits(d, e),
            d.prototype.readData = function(a) {
                if (this.checkOffset(a),
                0 === a)
                    return new Uint8Array(0);
                var b = this.data.subarray(this.zero + this.index, this.zero + this.index + a);
                return this.index += a,
                b
            }
            ,
            b.exports = d
        }
        , {
            "../utils": 32,
            "./ArrayReader": 17
        }],
        22: [function(a, b, c) {
            "use strict";
            var d = a("../utils")
              , e = a("../support")
              , f = a("./ArrayReader")
              , g = a("./StringReader")
              , h = a("./NodeBufferReader")
              , i = a("./Uint8ArrayReader");
            b.exports = function(a) {
                var b = d.getTypeOf(a);
                return d.checkSupport(b),
                "string" !== b || e.uint8array ? "nodebuffer" === b ? new h(a) : e.uint8array ? new i(d.transformTo("uint8array", a)) : new f(d.transformTo("array", a)) : new g(a)
            }
        }
        , {
            "../support": 30,
            "../utils": 32,
            "./ArrayReader": 17,
            "./NodeBufferReader": 19,
            "./StringReader": 20,
            "./Uint8ArrayReader": 21
        }],
        23: [function(a, b, c) {
            "use strict";
            c.LOCAL_FILE_HEADER = "PK",
            c.CENTRAL_FILE_HEADER = "PK",
            c.CENTRAL_DIRECTORY_END = "PK",
            c.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK",
            c.ZIP64_CENTRAL_DIRECTORY_END = "PK",
            c.DATA_DESCRIPTOR = "PK\b"
        }
        , {}],
        24: [function(a, b, c) {
            "use strict";
            function d(a) {
                e.call(this, "ConvertWorker to " + a),
                this.destType = a
            }
            var e = a("./GenericWorker")
              , f = a("../utils");
            f.inherits(d, e),
            d.prototype.processChunk = function(a) {
                this.push({
                    data: f.transformTo(this.destType, a.data),
                    meta: a.meta
                })
            }
            ,
            b.exports = d
        }
        , {
            "../utils": 32,
            "./GenericWorker": 28
        }],
        25: [function(a, b, c) {
            "use strict";
            function d() {
                e.call(this, "Crc32Probe"),
                this.withStreamInfo("crc32", 0)
            }
            var e = a("./GenericWorker")
              , f = a("../crc32")
              , g = a("../utils");
            g.inherits(d, e),
            d.prototype.processChunk = function(a) {
                this.streamInfo.crc32 = f(a.data, this.streamInfo.crc32 || 0),
                this.push(a)
            }
            ,
            b.exports = d
        }
        , {
            "../crc32": 4,
            "../utils": 32,
            "./GenericWorker": 28
        }],
        26: [function(a, b, c) {
            "use strict";
            function d(a) {
                f.call(this, "DataLengthProbe for " + a),
                this.propName = a,
                this.withStreamInfo(a, 0)
            }
            var e = a("../utils")
              , f = a("./GenericWorker");
            e.inherits(d, f),
            d.prototype.processChunk = function(a) {
                if (a) {
                    var b = this.streamInfo[this.propName] || 0;
                    this.streamInfo[this.propName] = b + a.data.length
                }
                f.prototype.processChunk.call(this, a)
            }
            ,
            b.exports = d
        }
        , {
            "../utils": 32,
            "./GenericWorker": 28
        }],
        27: [function(a, b, c) {
            "use strict";
            function d(a) {
                f.call(this, "DataWorker");
                var b = this;
                this.dataIsReady = !1,
                this.index = 0,
                this.max = 0,
                this.data = null,
                this.type = "",
                this._tickScheduled = !1,
                a.then(function(a) {
                    b.dataIsReady = !0,
                    b.data = a,
                    b.max = a && a.length || 0,
                    b.type = e.getTypeOf(a),
                    b.isPaused || b._tickAndRepeat()
                }, function(a) {
                    b.error(a)
                })
            }
            var e = a("../utils")
              , f = a("./GenericWorker")
              , g = 16384;
            e.inherits(d, f),
            d.prototype.cleanUp = function() {
                f.prototype.cleanUp.call(this),
                this.data = null
            }
            ,
            d.prototype.resume = function() {
                return !!f.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = !0,
                e.delay(this._tickAndRepeat, [], this)),
                !0)
            }
            ,
            d.prototype._tickAndRepeat = function() {
                this._tickScheduled = !1,
                this.isPaused || this.isFinished || (this._tick(),
                this.isFinished || (e.delay(this._tickAndRepeat, [], this),
                this._tickScheduled = !0))
            }
            ,
            d.prototype._tick = function() {
                if (this.isPaused || this.isFinished)
                    return !1;
                var a = g
                  , b = null
                  , c = Math.min(this.max, this.index + a);
                if (this.index >= this.max)
                    return this.end();
                switch (this.type) {
                case "string":
                    b = this.data.substring(this.index, c);
                    break;
                case "uint8array":
                    b = this.data.subarray(this.index, c);
                    break;
                case "array":
                case "nodebuffer":
                    b = this.data.slice(this.index, c)
                }
                return this.index = c,
                this.push({
                    data: b,
                    meta: {
                        percent: this.max ? this.index / this.max * 100 : 0
                    }
                })
            }
            ,
            b.exports = d
        }
        , {
            "../utils": 32,
            "./GenericWorker": 28
        }],
        28: [function(a, b, c) {
            "use strict";
            function d(a) {
                this.name = a || "default",
                this.streamInfo = {},
                this.generatedError = null,
                this.extraStreamInfo = {},
                this.isPaused = !0,
                this.isFinished = !1,
                this.isLocked = !1,
                this._listeners = {
                    data: [],
                    end: [],
                    error: []
                },
                this.previous = null
            }
            d.prototype = {
                push: function(a) {
                    this.emit("data", a)
                },
                end: function() {
                    if (this.isFinished)
                        return !1;
                    this.flush();
                    try {
                        this.emit("end"),
                        this.cleanUp(),
                        this.isFinished = !0
                    } catch (a) {
                        this.emit("error", a)
                    }
                    return !0
                },
                error: function(a) {
                    return !this.isFinished && (this.isPaused ? this.generatedError = a : (this.isFinished = !0,
                    this.emit("error", a),
                    this.previous && this.previous.error(a),
                    this.cleanUp()),
                    !0)
                },
                on: function(a, b) {
                    return this._listeners[a].push(b),
                    this
                },
                cleanUp: function() {
                    this.streamInfo = this.generatedError = this.extraStreamInfo = null,
                    this._listeners = []
                },
                emit: function(a, b) {
                    if (this._listeners[a])
                        for (var c = 0; c < this._listeners[a].length; c++)
                            this._listeners[a][c].call(this, b)
                },
                pipe: function(a) {
                    return a.registerPrevious(this)
                },
                registerPrevious: function(a) {
                    if (this.isLocked)
                        throw new Error("The stream '" + this + "' has already been used.");
                    this.streamInfo = a.streamInfo,
                    this.mergeStreamInfo(),
                    this.previous = a;
                    var b = this;
                    return a.on("data", function(a) {
                        b.processChunk(a)
                    }),
                    a.on("end", function() {
                        b.end()
                    }),
                    a.on("error", function(a) {
                        b.error(a)
                    }),
                    this
                },
                pause: function() {
                    return !this.isPaused && !this.isFinished && (this.isPaused = !0,
                    this.previous && this.previous.pause(),
                    !0)
                },
                resume: function() {
                    if (!this.isPaused || this.isFinished)
                        return !1;
                    this.isPaused = !1;
                    var a = !1;
                    return this.generatedError && (this.error(this.generatedError),
                    a = !0),
                    this.previous && this.previous.resume(),
                    !a
                },
                flush: function() {},
                processChunk: function(a) {
                    this.push(a)
                },
                withStreamInfo: function(a, b) {
                    return this.extraStreamInfo[a] = b,
                    this.mergeStreamInfo(),
                    this
                },
                mergeStreamInfo: function() {
                    for (var a in this.extraStreamInfo)
                        this.extraStreamInfo.hasOwnProperty(a) && (this.streamInfo[a] = this.extraStreamInfo[a])
                },
                lock: function() {
                    if (this.isLocked)
                        throw new Error("The stream '" + this + "' has already been used.");
                    this.isLocked = !0,
                    this.previous && this.previous.lock()
                },
                toString: function() {
                    var a = "Worker " + this.name;
                    return this.previous ? this.previous + " -> " + a : a
                }
            },
            b.exports = d
        }
        , {}],
        29: [function(a, b, c) {
            "use strict";
            function d(a, b, c, d) {
                var f = null;
                switch (a) {
                case "blob":
                    return h.newBlob(c, d);
                case "base64":
                    return f = e(b, c),
                    k.encode(f);
                default:
                    return f = e(b, c),
                    h.transformTo(a, f)
                }
            }
            function e(a, b) {
                var c, d = 0, e = null, f = 0;
                for (c = 0; c < b.length; c++)
                    f += b[c].length;
                switch (a) {
                case "string":
                    return b.join("");
                case "array":
                    return Array.prototype.concat.apply([], b);
                case "uint8array":
                    for (e = new Uint8Array(f),
                    c = 0; c < b.length; c++)
                        e.set(b[c], d),
                        d += b[c].length;
                    return e;
                case "nodebuffer":
                    return Buffer.concat(b);
                default:
                    throw new Error("concat : unsupported type '" + a + "'")
                }
            }
            function f(a, b) {
                return new m.Promise(function(c, e) {
                    var f = []
                      , g = a._internalType
                      , h = a._outputType
                      , i = a._mimeType;
                    a.on("data", function(a, c) {
                        f.push(a),
                        b && b(c)
                    }).on("error", function(a) {
                        f = [],
                        e(a)
                    }).on("end", function() {
                        try {
                            var a = d(h, g, f, i);
                            c(a)
                        } catch (b) {
                            e(b)
                        }
                        f = []
                    }).resume()
                }
                )
            }
            function g(a, b, c) {
                var d = b;
                switch (b) {
                case "blob":
                    d = "arraybuffer";
                    break;
                case "arraybuffer":
                    d = "uint8array";
                    break;
                case "base64":
                    d = "string"
                }
                try {
                    this._internalType = d,
                    this._outputType = b,
                    this._mimeType = c,
                    h.checkSupport(d),
                    this._worker = a.pipe(new i(d)),
                    a.lock()
                } catch (e) {
                    this._worker = new j("error"),
                    this._worker.error(e)
                }
            }
            var h = a("../utils")
              , i = a("./ConvertWorker")
              , j = a("./GenericWorker")
              , k = a("../base64")
              , l = a("../support")
              , m = a("../external")
              , n = null;
            if (l.nodestream)
                try {
                    n = a("../nodejs/NodejsStreamOutputAdapter")
                } catch (o) {}
            g.prototype = {
                accumulate: function(a) {
                    return f(this, a)
                },
                on: function(a, b) {
                    var c = this;
                    return "data" === a ? this._worker.on(a, function(a) {
                        b.call(c, a.data, a.meta)
                    }) : this._worker.on(a, function() {
                        h.delay(b, arguments, c)
                    }),
                    this
                },
                resume: function() {
                    return h.delay(this._worker.resume, [], this._worker),
                    this
                },
                pause: function() {
                    return this._worker.pause(),
                    this
                },
                toNodejsStream: function(a) {
                    if (h.checkSupport("nodestream"),
                    "nodebuffer" !== this._outputType)
                        throw new Error(this._outputType + " is not supported by this method");
                    return new n(this,{
                        objectMode: "nodebuffer" !== this._outputType
                    },a)
                }
            },
            b.exports = g
        }
        , {
            "../base64": 1,
            "../external": 6,
            "../nodejs/NodejsStreamOutputAdapter": 13,
            "../support": 30,
            "../utils": 32,
            "./ConvertWorker": 24,
            "./GenericWorker": 28
        }],
        30: [function(a, b, c) {
            "use strict";
            if (c.base64 = !0,
            c.array = !0,
            c.string = !0,
            c.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array,
            c.nodebuffer = "undefined" != typeof Buffer,
            c.uint8array = "undefined" != typeof Uint8Array,
            "undefined" == typeof ArrayBuffer)
                c.blob = !1;
            else {
                var d = new ArrayBuffer(0);
                try {
                    c.blob = 0 === new Blob([d],{
                        type: "application/zip"
                    }).size
                } catch (e) {
                    try {
                        var f = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder
                          , g = new f;
                        g.append(d),
                        c.blob = 0 === g.getBlob("application/zip").size
                    } catch (e) {
                        c.blob = !1
                    }
                }
            }
            try {
                c.nodestream = !!a("readable-stream").Readable
            } catch (e) {
                c.nodestream = !1
            }
        }
        , {
            "readable-stream": 16
        }],
        31: [function(a, b, c) {
            "use strict";
            function d() {
                i.call(this, "utf-8 decode"),
                this.leftOver = null
            }
            function e() {
                i.call(this, "utf-8 encode")
            }
            for (var f = a("./utils"), g = a("./support"), h = a("./nodejsUtils"), i = a("./stream/GenericWorker"), j = new Array(256), k = 0; k < 256; k++)
                j[k] = k >= 252 ? 6 : k >= 248 ? 5 : k >= 240 ? 4 : k >= 224 ? 3 : k >= 192 ? 2 : 1;
            j[254] = j[254] = 1;
            var l = function(a) {
                var b, c, d, e, f, h = a.length, i = 0;
                for (e = 0; e < h; e++)
                    c = a.charCodeAt(e),
                    55296 === (64512 & c) && e + 1 < h && (d = a.charCodeAt(e + 1),
                    56320 === (64512 & d) && (c = 65536 + (c - 55296 << 10) + (d - 56320),
                    e++)),
                    i += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
                for (b = g.uint8array ? new Uint8Array(i) : new Array(i),
                f = 0,
                e = 0; f < i; e++)
                    c = a.charCodeAt(e),
                    55296 === (64512 & c) && e + 1 < h && (d = a.charCodeAt(e + 1),
                    56320 === (64512 & d) && (c = 65536 + (c - 55296 << 10) + (d - 56320),
                    e++)),
                    c < 128 ? b[f++] = c : c < 2048 ? (b[f++] = 192 | c >>> 6,
                    b[f++] = 128 | 63 & c) : c < 65536 ? (b[f++] = 224 | c >>> 12,
                    b[f++] = 128 | c >>> 6 & 63,
                    b[f++] = 128 | 63 & c) : (b[f++] = 240 | c >>> 18,
                    b[f++] = 128 | c >>> 12 & 63,
                    b[f++] = 128 | c >>> 6 & 63,
                    b[f++] = 128 | 63 & c);
                return b
            }
              , m = function(a, b) {
                var c;
                for (b = b || a.length,
                b > a.length && (b = a.length),
                c = b - 1; c >= 0 && 128 === (192 & a[c]); )
                    c--;
                return c < 0 ? b : 0 === c ? b : c + j[a[c]] > b ? c : b
            }
              , n = function(a) {
                var b, c, d, e, g = a.length, h = new Array(2 * g);
                for (c = 0,
                b = 0; b < g; )
                    if (d = a[b++],
                    d < 128)
                        h[c++] = d;
                    else if (e = j[d],
                    e > 4)
                        h[c++] = 65533,
                        b += e - 1;
                    else {
                        for (d &= 2 === e ? 31 : 3 === e ? 15 : 7; e > 1 && b < g; )
                            d = d << 6 | 63 & a[b++],
                            e--;
                        e > 1 ? h[c++] = 65533 : d < 65536 ? h[c++] = d : (d -= 65536,
                        h[c++] = 55296 | d >> 10 & 1023,
                        h[c++] = 56320 | 1023 & d)
                    }
                return h.length !== c && (h.subarray ? h = h.subarray(0, c) : h.length = c),
                f.applyFromCharCode(h)
            };
            c.utf8encode = function(a) {
                return g.nodebuffer ? h.newBuffer(a, "utf-8") : l(a)
            }
            ,
            c.utf8decode = function(a) {
                return g.nodebuffer ? f.transformTo("nodebuffer", a).toString("utf-8") : (a = f.transformTo(g.uint8array ? "uint8array" : "array", a),
                n(a))
            }
            ,
            f.inherits(d, i),
            d.prototype.processChunk = function(a) {
                var b = f.transformTo(g.uint8array ? "uint8array" : "array", a.data);
                if (this.leftOver && this.leftOver.length) {
                    if (g.uint8array) {
                        var d = b;
                        b = new Uint8Array(d.length + this.leftOver.length),
                        b.set(this.leftOver, 0),
                        b.set(d, this.leftOver.length)
                    } else
                        b = this.leftOver.concat(b);
                    this.leftOver = null
                }
                var e = m(b)
                  , h = b;
                e !== b.length && (g.uint8array ? (h = b.subarray(0, e),
                this.leftOver = b.subarray(e, b.length)) : (h = b.slice(0, e),
                this.leftOver = b.slice(e, b.length))),
                this.push({
                    data: c.utf8decode(h),
                    meta: a.meta
                })
            }
            ,
            d.prototype.flush = function() {
                this.leftOver && this.leftOver.length && (this.push({
                    data: c.utf8decode(this.leftOver),
                    meta: {}
                }),
                this.leftOver = null)
            }
            ,
            c.Utf8DecodeWorker = d,
            f.inherits(e, i),
            e.prototype.processChunk = function(a) {
                this.push({
                    data: c.utf8encode(a.data),
                    meta: a.meta
                })
            }
            ,
            c.Utf8EncodeWorker = e
        }
        , {
            "./nodejsUtils": 14,
            "./stream/GenericWorker": 28,
            "./support": 30,
            "./utils": 32
        }],
        32: [function(a, b, c) {
            "use strict";
            function d(a) {
                var b = null;
                return b = i.uint8array ? new Uint8Array(a.length) : new Array(a.length),
                f(a, b)
            }
            function e(a) {
                return a
            }
            function f(a, b) {
                for (var c = 0; c < a.length; ++c)
                    b[c] = 255 & a.charCodeAt(c);
                return b
            }
            function g(a) {
                var b = 65536
                  , d = c.getTypeOf(a)
                  , e = !0;
                if ("uint8array" === d ? e = n.applyCanBeUsed.uint8array : "nodebuffer" === d && (e = n.applyCanBeUsed.nodebuffer),
                e)
                    for (; b > 1; )
                        try {
                            return n.stringifyByChunk(a, d, b)
                        } catch (f) {
                            b = Math.floor(b / 2)
                        }
                return n.stringifyByChar(a)
            }
            function h(a, b) {
                for (var c = 0; c < a.length; c++)
                    b[c] = a[c];
                return b
            }
            var i = a("./support")
              , j = a("./base64")
              , k = a("./nodejsUtils")
              , l = a("core-js/library/fn/set-immediate")
              , m = a("./external");
            c.newBlob = function(a, b) {
                c.checkSupport("blob");
                try {
                    return new Blob(a,{
                        type: b
                    })
                } catch (d) {
                    try {
                        for (var e = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder, f = new e, g = 0; g < a.length; g++)
                            f.append(a[g]);
                        return f.getBlob(b)
                    } catch (d) {
                        throw new Error("Bug : can't construct the Blob.")
                    }
                }
            }
            ;
            var n = {
                stringifyByChunk: function(a, b, c) {
                    var d = []
                      , e = 0
                      , f = a.length;
                    if (f <= c)
                        return String.fromCharCode.apply(null, a);
                    for (; e < f; )
                        "array" === b || "nodebuffer" === b ? d.push(String.fromCharCode.apply(null, a.slice(e, Math.min(e + c, f)))) : d.push(String.fromCharCode.apply(null, a.subarray(e, Math.min(e + c, f)))),
                        e += c;
                    return d.join("")
                },
                stringifyByChar: function(a) {
                    for (var b = "", c = 0; c < a.length; c++)
                        b += String.fromCharCode(a[c]);
                    return b
                },
                applyCanBeUsed: {
                    uint8array: function() {
                        try {
                            return i.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length
                        } catch (a) {
                            return !1
                        }
                    }(),
                    nodebuffer: function() {
                        try {
                            return i.nodebuffer && 1 === String.fromCharCode.apply(null, k.newBuffer(1)).length
                        } catch (a) {
                            return !1
                        }
                    }()
                }
            };
            c.applyFromCharCode = g;
            var o = {};
            o.string = {
                string: e,
                array: function(a) {
                    return f(a, new Array(a.length))
                },
                arraybuffer: function(a) {
                    return o.string.uint8array(a).buffer
                },
                uint8array: function(a) {
                    return f(a, new Uint8Array(a.length))
                },
                nodebuffer: function(a) {
                    return f(a, k.newBuffer(a.length))
                }
            },
            o.array = {
                string: g,
                array: e,
                arraybuffer: function(a) {
                    return new Uint8Array(a).buffer
                },
                uint8array: function(a) {
                    return new Uint8Array(a)
                },
                nodebuffer: function(a) {
                    return k.newBuffer(a)
                }
            },
            o.arraybuffer = {
                string: function(a) {
                    return g(new Uint8Array(a))
                },
                array: function(a) {
                    return h(new Uint8Array(a), new Array(a.byteLength))
                },
                arraybuffer: e,
                uint8array: function(a) {
                    return new Uint8Array(a)
                },
                nodebuffer: function(a) {
                    return k.newBuffer(new Uint8Array(a))
                }
            },
            o.uint8array = {
                string: g,
                array: function(a) {
                    return h(a, new Array(a.length))
                },
                arraybuffer: function(a) {
                    var b = new Uint8Array(a.length);
                    return a.length && b.set(a, 0),
                    b.buffer
                },
                uint8array: e,
                nodebuffer: function(a) {
                    return k.newBuffer(a)
                }
            },
            o.nodebuffer = {
                string: g,
                array: function(a) {
                    return h(a, new Array(a.length))
                },
                arraybuffer: function(a) {
                    return o.nodebuffer.uint8array(a).buffer
                },
                uint8array: function(a) {
                    return h(a, new Uint8Array(a.length))
                },
                nodebuffer: e
            },
            c.transformTo = function(a, b) {
                if (b || (b = ""),
                !a)
                    return b;
                c.checkSupport(a);
                var d = c.getTypeOf(b)
                  , e = o[d][a](b);
                return e
            }
            ,
            c.getTypeOf = function(a) {
                return "string" == typeof a ? "string" : "[object Array]" === Object.prototype.toString.call(a) ? "array" : i.nodebuffer && k.isBuffer(a) ? "nodebuffer" : i.uint8array && a instanceof Uint8Array ? "uint8array" : i.arraybuffer && a instanceof ArrayBuffer ? "arraybuffer" : void 0
            }
            ,
            c.checkSupport = function(a) {
                var b = i[a.toLowerCase()];
                if (!b)
                    throw new Error(a + " is not supported by this platform")
            }
            ,
            c.MAX_VALUE_16BITS = 65535,
            c.MAX_VALUE_32BITS = -1,
            c.pretty = function(a) {
                var b, c, d = "";
                for (c = 0; c < (a || "").length; c++)
                    b = a.charCodeAt(c),
                    d += "\\x" + (b < 16 ? "0" : "") + b.toString(16).toUpperCase();
                return d
            }
            ,
            c.delay = function(a, b, c) {
                l(function() {
                    a.apply(c || null, b || [])
                })
            }
            ,
            c.inherits = function(a, b) {
                var c = function() {};
                c.prototype = b.prototype,
                a.prototype = new c
            }
            ,
            c.extend = function() {
                var a, b, c = {};
                for (a = 0; a < arguments.length; a++)
                    for (b in arguments[a])
                        arguments[a].hasOwnProperty(b) && "undefined" == typeof c[b] && (c[b] = arguments[a][b]);
                return c
            }
            ,
            c.prepareContent = function(a, b, e, f, g) {
                var h = m.Promise.resolve(b).then(function(a) {
                    var b = i.blob && (a instanceof Blob || ["[object File]", "[object Blob]"].indexOf(Object.prototype.toString.call(a)) !== -1);
                    return b && "undefined" != typeof FileReader ? new m.Promise(function(b, c) {
                        var d = new FileReader;
                        d.onload = function(a) {
                            b(a.target.result)
                        }
                        ,
                        d.onerror = function(a) {
                            c(a.target.error)
                        }
                        ,
                        d.readAsArrayBuffer(a)
                    }
                    ) : a
                });
                return h.then(function(b) {
                    var h = c.getTypeOf(b);
                    return h ? ("arraybuffer" === h ? b = c.transformTo("uint8array", b) : "string" === h && (g ? b = j.decode(b) : e && f !== !0 && (b = d(b))),
                    b) : m.Promise.reject(new Error("The data of '" + a + "' is in an unsupported format !"))
                })
            }
        }
        , {
            "./base64": 1,
            "./external": 6,
            "./nodejsUtils": 14,
            "./support": 30,
            "core-js/library/fn/set-immediate": 36
        }],
        33: [function(a, b, c) {
            "use strict";
            function d(a) {
                this.files = [],
                this.loadOptions = a
            }
            var e = a("./reader/readerFor")
              , f = a("./utils")
              , g = a("./signature")
              , h = a("./zipEntry")
              , i = (a("./utf8"),
            a("./support"));
            d.prototype = {
                checkSignature: function(a) {
                    if (!this.reader.readAndCheckSignature(a)) {
                        this.reader.index -= 4;
                        var b = this.reader.readString(4);
                        throw new Error("Corrupted zip or bug : unexpected signature (" + f.pretty(b) + ", expected " + f.pretty(a) + ")")
                    }
                },
                isSignature: function(a, b) {
                    var c = this.reader.index;
                    this.reader.setIndex(a);
                    var d = this.reader.readString(4)
                      , e = d === b;
                    return this.reader.setIndex(c),
                    e
                },
                readBlockEndOfCentral: function() {
                    this.diskNumber = this.reader.readInt(2),
                    this.diskWithCentralDirStart = this.reader.readInt(2),
                    this.centralDirRecordsOnThisDisk = this.reader.readInt(2),
                    this.centralDirRecords = this.reader.readInt(2),
                    this.centralDirSize = this.reader.readInt(4),
                    this.centralDirOffset = this.reader.readInt(4),
                    this.zipCommentLength = this.reader.readInt(2);
                    var a = this.reader.readData(this.zipCommentLength)
                      , b = i.uint8array ? "uint8array" : "array"
                      , c = f.transformTo(b, a);
                    this.zipComment = this.loadOptions.decodeFileName(c)
                },
                readBlockZip64EndOfCentral: function() {
                    this.zip64EndOfCentralSize = this.reader.readInt(8),
                    this.reader.skip(4),
                    this.diskNumber = this.reader.readInt(4),
                    this.diskWithCentralDirStart = this.reader.readInt(4),
                    this.centralDirRecordsOnThisDisk = this.reader.readInt(8),
                    this.centralDirRecords = this.reader.readInt(8),
                    this.centralDirSize = this.reader.readInt(8),
                    this.centralDirOffset = this.reader.readInt(8),
                    this.zip64ExtensibleData = {};
                    for (var a, b, c, d = this.zip64EndOfCentralSize - 44, e = 0; e < d; )
                        a = this.reader.readInt(2),
                        b = this.reader.readInt(4),
                        c = this.reader.readData(b),
                        this.zip64ExtensibleData[a] = {
                            id: a,
                            length: b,
                            value: c
                        }
                },
                readBlockZip64EndOfCentralLocator: function() {
                    if (this.diskWithZip64CentralDirStart = this.reader.readInt(4),
                    this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8),
                    this.disksCount = this.reader.readInt(4),
                    this.disksCount > 1)
                        throw new Error("Multi-volumes zip are not supported")
                },
                readLocalFiles: function() {
                    var a, b;
                    for (a = 0; a < this.files.length; a++)
                        b = this.files[a],
                        this.reader.setIndex(b.localHeaderOffset),
                        this.checkSignature(g.LOCAL_FILE_HEADER),
                        b.readLocalPart(this.reader),
                        b.handleUTF8(),
                        b.processAttributes()
                },
                readCentralDir: function() {
                    var a;
                    for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(g.CENTRAL_FILE_HEADER); )
                        a = new h({
                            zip64: this.zip64
                        },this.loadOptions),
                        a.readCentralPart(this.reader),
                        this.files.push(a);
                    if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length)
                        throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length)
                },
                readEndOfCentral: function() {
                    var a = this.reader.lastIndexOfSignature(g.CENTRAL_DIRECTORY_END);
                    if (a < 0) {
                        var b = !this.isSignature(0, g.LOCAL_FILE_HEADER);
                        throw b ? new Error("Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html") : new Error("Corrupted zip : can't find end of central directory")
                    }
                    this.reader.setIndex(a);
                    var c = a;
                    if (this.checkSignature(g.CENTRAL_DIRECTORY_END),
                    this.readBlockEndOfCentral(),
                    this.diskNumber === f.MAX_VALUE_16BITS || this.diskWithCentralDirStart === f.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === f.MAX_VALUE_16BITS || this.centralDirRecords === f.MAX_VALUE_16BITS || this.centralDirSize === f.MAX_VALUE_32BITS || this.centralDirOffset === f.MAX_VALUE_32BITS) {
                        if (this.zip64 = !0,
                        a = this.reader.lastIndexOfSignature(g.ZIP64_CENTRAL_DIRECTORY_LOCATOR),
                        a < 0)
                            throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
                        if (this.reader.setIndex(a),
                        this.checkSignature(g.ZIP64_CENTRAL_DIRECTORY_LOCATOR),
                        this.readBlockZip64EndOfCentralLocator(),
                        !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, g.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(g.ZIP64_CENTRAL_DIRECTORY_END),
                        this.relativeOffsetEndOfZip64CentralDir < 0))
                            throw new Error("Corrupted zip : can't find the ZIP64 end of central directory");
                        this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),
                        this.checkSignature(g.ZIP64_CENTRAL_DIRECTORY_END),
                        this.readBlockZip64EndOfCentral()
                    }
                    var d = this.centralDirOffset + this.centralDirSize;
                    this.zip64 && (d += 20,
                    d += 12 + this.zip64EndOfCentralSize);
                    var e = c - d;
                    if (e > 0)
                        this.isSignature(c, g.CENTRAL_FILE_HEADER) || (this.reader.zero = e);
                    else if (e < 0)
                        throw new Error("Corrupted zip: missing " + Math.abs(e) + " bytes.")
                },
                prepareReader: function(a) {
                    this.reader = e(a)
                },
                load: function(a) {
                    this.prepareReader(a),
                    this.readEndOfCentral(),
                    this.readCentralDir(),
                    this.readLocalFiles()
                }
            },
            b.exports = d
        }
        , {
            "./reader/readerFor": 22,
            "./signature": 23,
            "./support": 30,
            "./utf8": 31,
            "./utils": 32,
            "./zipEntry": 34
        }],
        34: [function(a, b, c) {
            "use strict";
            function d(a, b) {
                this.options = a,
                this.loadOptions = b
            }
            var e = a("./reader/readerFor")
              , f = a("./utils")
              , g = a("./compressedObject")
              , h = a("./crc32")
              , i = a("./utf8")
              , j = a("./compressions")
              , k = a("./support")
              , l = 0
              , m = 3
              , n = function(a) {
                for (var b in j)
                    if (j.hasOwnProperty(b) && j[b].magic === a)
                        return j[b];
                return null
            };
            d.prototype = {
                isEncrypted: function() {
                    return 1 === (1 & this.bitFlag)
                },
                useUTF8: function() {
                    return 2048 === (2048 & this.bitFlag)
                },
                readLocalPart: function(a) {
                    var b, c;
                    if (a.skip(22),
                    this.fileNameLength = a.readInt(2),
                    c = a.readInt(2),
                    this.fileName = a.readData(this.fileNameLength),
                    a.skip(c),
                    this.compressedSize === -1 || this.uncompressedSize === -1)
                        throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize === -1 || uncompressedSize === -1)");
                    if (b = n(this.compressionMethod),
                    null === b)
                        throw new Error("Corrupted zip : compression " + f.pretty(this.compressionMethod) + " unknown (inner file : " + f.transformTo("string", this.fileName) + ")");
                    this.decompressed = new g(this.compressedSize,this.uncompressedSize,this.crc32,b,a.readData(this.compressedSize))
                },
                readCentralPart: function(a) {
                    this.versionMadeBy = a.readInt(2),
                    a.skip(2),
                    this.bitFlag = a.readInt(2),
                    this.compressionMethod = a.readString(2),
                    this.date = a.readDate(),
                    this.crc32 = a.readInt(4),
                    this.compressedSize = a.readInt(4),
                    this.uncompressedSize = a.readInt(4);
                    var b = a.readInt(2);
                    if (this.extraFieldsLength = a.readInt(2),
                    this.fileCommentLength = a.readInt(2),
                    this.diskNumberStart = a.readInt(2),
                    this.internalFileAttributes = a.readInt(2),
                    this.externalFileAttributes = a.readInt(4),
                    this.localHeaderOffset = a.readInt(4),
                    this.isEncrypted())
                        throw new Error("Encrypted zip are not supported");
                    a.skip(b),
                    this.readExtraFields(a),
                    this.parseZIP64ExtraField(a),
                    this.fileComment = a.readData(this.fileCommentLength)
                },
                processAttributes: function() {
                    this.unixPermissions = null,
                    this.dosPermissions = null;
                    var a = this.versionMadeBy >> 8;
                    this.dir = !!(16 & this.externalFileAttributes),
                    a === l && (this.dosPermissions = 63 & this.externalFileAttributes),
                    a === m && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535),
                    this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = !0)
                },
                parseZIP64ExtraField: function(a) {
                    if (this.extraFields[1]) {
                        var b = e(this.extraFields[1].value);
                        this.uncompressedSize === f.MAX_VALUE_32BITS && (this.uncompressedSize = b.readInt(8)),
                        this.compressedSize === f.MAX_VALUE_32BITS && (this.compressedSize = b.readInt(8)),
                        this.localHeaderOffset === f.MAX_VALUE_32BITS && (this.localHeaderOffset = b.readInt(8)),
                        this.diskNumberStart === f.MAX_VALUE_32BITS && (this.diskNumberStart = b.readInt(4))
                    }
                },
                readExtraFields: function(a) {
                    var b, c, d, e = a.index + this.extraFieldsLength;
                    for (this.extraFields || (this.extraFields = {}); a.index < e; )
                        b = a.readInt(2),
                        c = a.readInt(2),
                        d = a.readData(c),
                        this.extraFields[b] = {
                            id: b,
                            length: c,
                            value: d
                        }
                },
                handleUTF8: function() {
                    var a = k.uint8array ? "uint8array" : "array";
                    if (this.useUTF8())
                        this.fileNameStr = i.utf8decode(this.fileName),
                        this.fileCommentStr = i.utf8decode(this.fileComment);
                    else {
                        var b = this.findExtraFieldUnicodePath();
                        if (null !== b)
                            this.fileNameStr = b;
                        else {
                            var c = f.transformTo(a, this.fileName);
                            this.fileNameStr = this.loadOptions.decodeFileName(c)
                        }
                        var d = this.findExtraFieldUnicodeComment();
                        if (null !== d)
                            this.fileCommentStr = d;
                        else {
                            var e = f.transformTo(a, this.fileComment);
                            this.fileCommentStr = this.loadOptions.decodeFileName(e)
                        }
                    }
                },
                findExtraFieldUnicodePath: function() {
                    var a = this.extraFields[28789];
                    if (a) {
                        var b = e(a.value);
                        return 1 !== b.readInt(1) ? null : h(this.fileName) !== b.readInt(4) ? null : i.utf8decode(b.readData(a.length - 5))
                    }
                    return null
                },
                findExtraFieldUnicodeComment: function() {
                    var a = this.extraFields[25461];
                    if (a) {
                        var b = e(a.value);
                        return 1 !== b.readInt(1) ? null : h(this.fileComment) !== b.readInt(4) ? null : i.utf8decode(b.readData(a.length - 5))
                    }
                    return null
                }
            },
            b.exports = d
        }
        , {
            "./compressedObject": 2,
            "./compressions": 3,
            "./crc32": 4,
            "./reader/readerFor": 22,
            "./support": 30,
            "./utf8": 31,
            "./utils": 32
        }],
        35: [function(a, b, c) {
            "use strict";
            var d = a("./stream/StreamHelper")
              , e = a("./stream/DataWorker")
              , f = a("./utf8")
              , g = a("./compressedObject")
              , h = a("./stream/GenericWorker")
              , i = function(a, b, c) {
                this.name = a,
                this.dir = c.dir,
                this.date = c.date,
                this.comment = c.comment,
                this.unixPermissions = c.unixPermissions,
                this.dosPermissions = c.dosPermissions,
                this._data = b,
                this._dataBinary = c.binary,
                this.options = {
                    compression: c.compression,
                    compressionOptions: c.compressionOptions
                }
            };
            i.prototype = {
                internalStream: function(a) {
                    var b = a.toLowerCase()
                      , c = "string" === b || "text" === b;
                    "binarystring" !== b && "text" !== b || (b = "string");
                    var e = this._decompressWorker()
                      , g = !this._dataBinary;
                    return g && !c && (e = e.pipe(new f.Utf8EncodeWorker)),
                    !g && c && (e = e.pipe(new f.Utf8DecodeWorker)),
                    new d(e,b,"")
                },
                async: function(a, b) {
                    return this.internalStream(a).accumulate(b)
                },
                nodeStream: function(a, b) {
                    return this.internalStream(a || "nodebuffer").toNodejsStream(b)
                },
                _compressWorker: function(a, b) {
                    if (this._data instanceof g && this._data.compression.magic === a.magic)
                        return this._data.getCompressedWorker();
                    var c = this._decompressWorker();
                    return this._dataBinary || (c = c.pipe(new f.Utf8EncodeWorker)),
                    g.createWorkerFrom(c, a, b)
                },
                _decompressWorker: function() {
                    return this._data instanceof g ? this._data.getContentWorker() : this._data instanceof h ? this._data : new e(this._data)
                }
            };
            for (var j = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"], k = function() {
                throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")
            }, l = 0; l < j.length; l++)
                i.prototype[j[l]] = k;
            b.exports = i
        }
        , {
            "./compressedObject": 2,
            "./stream/DataWorker": 27,
            "./stream/GenericWorker": 28,
            "./stream/StreamHelper": 29,
            "./utf8": 31
        }],
        36: [function(a, b, c) {
            a("../modules/web.immediate"),
            b.exports = a("../modules/_core").setImmediate
        }
        , {
            "../modules/_core": 40,
            "../modules/web.immediate": 56
        }],
        37: [function(a, b, c) {
            b.exports = function(a) {
                if ("function" != typeof a)
                    throw TypeError(a + " is not a function!");
                return a
            }
        }
        , {}],
        38: [function(a, b, c) {
            var d = a("./_is-object");
            b.exports = function(a) {
                if (!d(a))
                    throw TypeError(a + " is not an object!");
                return a
            }
        }
        , {
            "./_is-object": 51
        }],
        39: [function(a, b, c) {
            var d = {}.toString;
            b.exports = function(a) {
                return d.call(a).slice(8, -1)
            }
        }
        , {}],
        40: [function(a, b, c) {
            var d = b.exports = {
                version: "2.3.0"
            };
            "number" == typeof __e && (__e = d)
        }
        , {}],
        41: [function(a, b, c) {
            var d = a("./_a-function");
            b.exports = function(a, b, c) {
                if (d(a),
                void 0 === b)
                    return a;
                switch (c) {
                case 1:
                    return function(c) {
                        return a.call(b, c)
                    }
                    ;
                case 2:
                    return function(c, d) {
                        return a.call(b, c, d)
                    }
                    ;
                case 3:
                    return function(c, d, e) {
                        return a.call(b, c, d, e)
                    }
                }
                return function() {
                    return a.apply(b, arguments)
                }
            }
        }
        , {
            "./_a-function": 37
        }],
        42: [function(a, b, c) {
            b.exports = !a("./_fails")(function() {
                return 7 != Object.defineProperty({}, "a", {
                    get: function() {
                        return 7
                    }
                }).a
            })
        }
        , {
            "./_fails": 45
        }],
        43: [function(a, b, c) {
            var d = a("./_is-object")
              , e = a("./_global").document
              , f = d(e) && d(e.createElement);
            b.exports = function(a) {
                return f ? e.createElement(a) : {}
            }
        }
        , {
            "./_global": 46,
            "./_is-object": 51
        }],
        44: [function(a, b, c) {
            var d = a("./_global")
              , e = a("./_core")
              , f = a("./_ctx")
              , g = a("./_hide")
              , h = "prototype"
              , i = function(a, b, c) {
                var j, k, l, m = a & i.F, n = a & i.G, o = a & i.S, p = a & i.P, q = a & i.B, r = a & i.W, s = n ? e : e[b] || (e[b] = {}), t = s[h], u = n ? d : o ? d[b] : (d[b] || {})[h];
                n && (c = b);
                for (j in c)
                    k = !m && u && void 0 !== u[j],
                    k && j in s || (l = k ? u[j] : c[j],
                    s[j] = n && "function" != typeof u[j] ? c[j] : q && k ? f(l, d) : r && u[j] == l ? function(a) {
                        var b = function(b, c, d) {
                            if (this instanceof a) {
                                switch (arguments.length) {
                                case 0:
                                    return new a;
                                case 1:
                                    return new a(b);
                                case 2:
                                    return new a(b,c)
                                }
                                return new a(b,c,d)
                            }
                            return a.apply(this, arguments)
                        };
                        return b[h] = a[h],
                        b
                    }(l) : p && "function" == typeof l ? f(Function.call, l) : l,
                    p && ((s.virtual || (s.virtual = {}))[j] = l,
                    a & i.R && t && !t[j] && g(t, j, l)))
            };
            i.F = 1,
            i.G = 2,
            i.S = 4,
            i.P = 8,
            i.B = 16,
            i.W = 32,
            i.U = 64,
            i.R = 128,
            b.exports = i
        }
        , {
            "./_core": 40,
            "./_ctx": 41,
            "./_global": 46,
            "./_hide": 47
        }],
        45: [function(a, b, c) {
            b.exports = function(a) {
                try {
                    return !!a()
                } catch (b) {
                    return !0
                }
            }
        }
        , {}],
        46: [function(a, b, c) {
            var d = b.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
            "number" == typeof __g && (__g = d)
        }
        , {}],
        47: [function(a, b, c) {
            var d = a("./_object-dp")
              , e = a("./_property-desc");
            b.exports = a("./_descriptors") ? function(a, b, c) {
                return d.f(a, b, e(1, c))
            }
            : function(a, b, c) {
                return a[b] = c,
                a
            }
        }
        , {
            "./_descriptors": 42,
            "./_object-dp": 52,
            "./_property-desc": 53
        }],
        48: [function(a, b, c) {
            b.exports = a("./_global").document && document.documentElement
        }
        , {
            "./_global": 46
        }],
        49: [function(a, b, c) {
            b.exports = !a("./_descriptors") && !a("./_fails")(function() {
                return 7 != Object.defineProperty(a("./_dom-create")("div"), "a", {
                    get: function() {
                        return 7
                    }
                }).a
            })
        }
        , {
            "./_descriptors": 42,
            "./_dom-create": 43,
            "./_fails": 45
        }],
        50: [function(a, b, c) {
            b.exports = function(a, b, c) {
                var d = void 0 === c;
                switch (b.length) {
                case 0:
                    return d ? a() : a.call(c);
                case 1:
                    return d ? a(b[0]) : a.call(c, b[0]);
                case 2:
                    return d ? a(b[0], b[1]) : a.call(c, b[0], b[1]);
                case 3:
                    return d ? a(b[0], b[1], b[2]) : a.call(c, b[0], b[1], b[2]);
                case 4:
                    return d ? a(b[0], b[1], b[2], b[3]) : a.call(c, b[0], b[1], b[2], b[3])
                }
                return a.apply(c, b)
            }
        }
        , {}],
        51: [function(a, b, c) {
            b.exports = function(a) {
                return "object" == typeof a ? null !== a : "function" == typeof a
            }
        }
        , {}],
        52: [function(a, b, c) {
            var d = a("./_an-object")
              , e = a("./_ie8-dom-define")
              , f = a("./_to-primitive")
              , g = Object.defineProperty;
            c.f = a("./_descriptors") ? Object.defineProperty : function(a, b, c) {
                if (d(a),
                b = f(b, !0),
                d(c),
                e)
                    try {
                        return g(a, b, c)
                    } catch (h) {}
                if ("get"in c || "set"in c)
                    throw TypeError("Accessors not supported!");
                return "value"in c && (a[b] = c.value),
                a
            }
        }
        , {
            "./_an-object": 38,
            "./_descriptors": 42,
            "./_ie8-dom-define": 49,
            "./_to-primitive": 55
        }],
        53: [function(a, b, c) {
            b.exports = function(a, b) {
                return {
                    enumerable: !(1 & a),
                    configurable: !(2 & a),
                    writable: !(4 & a),
                    value: b
                }
            }
        }
        , {}],
        54: [function(a, b, c) {
            var d, e, f, g = a("./_ctx"), h = a("./_invoke"), i = a("./_html"), j = a("./_dom-create"), k = a("./_global"), l = k.process, m = k.setImmediate, n = k.clearImmediate, o = k.MessageChannel, p = 0, q = {}, r = "onreadystatechange", s = function() {
                var a = +this;
                if (q.hasOwnProperty(a)) {
                    var b = q[a];
                    delete q[a],
                    b()
                }
            }, t = function(a) {
                s.call(a.data)
            };
            m && n || (m = function(a) {
                for (var b = [], c = 1; arguments.length > c; )
                    b.push(arguments[c++]);
                return q[++p] = function() {
                    h("function" == typeof a ? a : Function(a), b)
                }
                ,
                d(p),
                p
            }
            ,
            n = function(a) {
                delete q[a]
            }
            ,
            "process" == a("./_cof")(l) ? d = function(a) {
                l.nextTick(g(s, a, 1))
            }
            : o ? (e = new o,
            f = e.port2,
            e.port1.onmessage = t,
            d = g(f.postMessage, f, 1)) : k.addEventListener && "function" == typeof postMessage && !k.importScripts ? (d = function(a) {
                k.postMessage(a + "", "*")
            }
            ,
            k.addEventListener("message", t, !1)) : d = r in j("script") ? function(a) {
                i.appendChild(j("script"))[r] = function() {
                    i.removeChild(this),
                    s.call(a)
                }
            }
            : function(a) {
                setTimeout(g(s, a, 1), 0)
            }
            ),
            b.exports = {
                set: m,
                clear: n
            }
        }
        , {
            "./_cof": 39,
            "./_ctx": 41,
            "./_dom-create": 43,
            "./_global": 46,
            "./_html": 48,
            "./_invoke": 50
        }],
        55: [function(a, b, c) {
            var d = a("./_is-object");
            b.exports = function(a, b) {
                if (!d(a))
                    return a;
                var c, e;
                if (b && "function" == typeof (c = a.toString) && !d(e = c.call(a)))
                    return e;
                if ("function" == typeof (c = a.valueOf) && !d(e = c.call(a)))
                    return e;
                if (!b && "function" == typeof (c = a.toString) && !d(e = c.call(a)))
                    return e;
                throw TypeError("Can't convert object to primitive value")
            }
        }
        , {
            "./_is-object": 51
        }],
        56: [function(a, b, c) {
            var d = a("./_export")
              , e = a("./_task");
            d(d.G + d.B, {
                setImmediate: e.set,
                clearImmediate: e.clear
            })
        }
        , {
            "./_export": 44,
            "./_task": 54
        }],
        57: [function(a, b, c) {
            (function(a) {
                "use strict";
                function c() {
                    k = !0;
                    for (var a, b, c = l.length; c; ) {
                        for (b = l,
                        l = [],
                        a = -1; ++a < c; )
                            b[a]();
                        c = l.length
                    }
                    k = !1
                }
                function d(a) {
                    1 !== l.push(a) || k || e()
                }
                var e, f = a.MutationObserver || a.WebKitMutationObserver;
                if (f) {
                    var g = 0
                      , h = new f(c)
                      , i = a.document.createTextNode("");
                    h.observe(i, {
                        characterData: !0
                    }),
                    e = function() {
                        i.data = g = ++g % 2
                    }
                } else if (a.setImmediate || "undefined" == typeof a.MessageChannel)
                    e = "document"in a && "onreadystatechange"in a.document.createElement("script") ? function() {
                        var b = a.document.createElement("script");
                        b.onreadystatechange = function() {
                            c(),
                            b.onreadystatechange = null,
                            b.parentNode.removeChild(b),
                            b = null
                        }
                        ,
                        a.document.documentElement.appendChild(b)
                    }
                    : function() {
                        setTimeout(c, 0)
                    }
                    ;
                else {
                    var j = new a.MessageChannel;
                    j.port1.onmessage = c,
                    e = function() {
                        j.port2.postMessage(0)
                    }
                }
                var k, l = [];
                b.exports = d
            }
            ).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
        }
        , {}],
        58: [function(a, b, c) {
            "use strict";
            function d() {}
            function e(a) {
                if ("function" != typeof a)
                    throw new TypeError("resolver must be a function");
                this.state = s,
                this.queue = [],
                this.outcome = void 0,
                a !== d && i(this, a)
            }
            function f(a, b, c) {
                this.promise = a,
                "function" == typeof b && (this.onFulfilled = b,
                this.callFulfilled = this.otherCallFulfilled),
                "function" == typeof c && (this.onRejected = c,
                this.callRejected = this.otherCallRejected)
            }
            function g(a, b, c) {
                o(function() {
                    var d;
                    try {
                        d = b(c)
                    } catch (e) {
                        return p.reject(a, e)
                    }
                    d === a ? p.reject(a, new TypeError("Cannot resolve promise with itself")) : p.resolve(a, d)
                })
            }
            function h(a) {
                var b = a && a.then;
                if (a && "object" == typeof a && "function" == typeof b)
                    return function() {
                        b.apply(a, arguments)
                    }
            }
            function i(a, b) {
                function c(b) {
                    f || (f = !0,
                    p.reject(a, b))
                }
                function d(b) {
                    f || (f = !0,
                    p.resolve(a, b))
                }
                function e() {
                    b(d, c)
                }
                var f = !1
                  , g = j(e);
                "error" === g.status && c(g.value)
            }
            function j(a, b) {
                var c = {};
                try {
                    c.value = a(b),
                    c.status = "success"
                } catch (d) {
                    c.status = "error",
                    c.value = d
                }
                return c
            }
            function k(a) {
                return a instanceof this ? a : p.resolve(new this(d), a)
            }
            function l(a) {
                var b = new this(d);
                return p.reject(b, a)
            }
            function m(a) {
                function b(a, b) {
                    function d(a) {
                        g[b] = a,
                        ++h !== e || f || (f = !0,
                        p.resolve(j, g))
                    }
                    c.resolve(a).then(d, function(a) {
                        f || (f = !0,
                        p.reject(j, a))
                    })
                }
                var c = this;
                if ("[object Array]" !== Object.prototype.toString.call(a))
                    return this.reject(new TypeError("must be an array"));
                var e = a.length
                  , f = !1;
                if (!e)
                    return this.resolve([]);
                for (var g = new Array(e), h = 0, i = -1, j = new this(d); ++i < e; )
                    b(a[i], i);
                return j
            }
            function n(a) {
                function b(a) {
                    c.resolve(a).then(function(a) {
                        f || (f = !0,
                        p.resolve(h, a))
                    }, function(a) {
                        f || (f = !0,
                        p.reject(h, a))
                    })
                }
                var c = this;
                if ("[object Array]" !== Object.prototype.toString.call(a))
                    return this.reject(new TypeError("must be an array"));
                var e = a.length
                  , f = !1;
                if (!e)
                    return this.resolve([]);
                for (var g = -1, h = new this(d); ++g < e; )
                    b(a[g]);
                return h
            }
            var o = a("immediate")
              , p = {}
              , q = ["REJECTED"]
              , r = ["FULFILLED"]
              , s = ["PENDING"];
            b.exports = e,
            e.prototype["catch"] = function(a) {
                return this.then(null, a)
            }
            ,
            e.prototype.then = function(a, b) {
                if ("function" != typeof a && this.state === r || "function" != typeof b && this.state === q)
                    return this;
                var c = new this.constructor(d);
                if (this.state !== s) {
                    var e = this.state === r ? a : b;
                    g(c, e, this.outcome)
                } else
                    this.queue.push(new f(c,a,b));
                return c
            }
            ,
            f.prototype.callFulfilled = function(a) {
                p.resolve(this.promise, a)
            }
            ,
            f.prototype.otherCallFulfilled = function(a) {
                g(this.promise, this.onFulfilled, a)
            }
            ,
            f.prototype.callRejected = function(a) {
                p.reject(this.promise, a)
            }
            ,
            f.prototype.otherCallRejected = function(a) {
                g(this.promise, this.onRejected, a)
            }
            ,
            p.resolve = function(a, b) {
                var c = j(h, b);
                if ("error" === c.status)
                    return p.reject(a, c.value);
                var d = c.value;
                if (d)
                    i(a, d);
                else {
                    a.state = r,
                    a.outcome = b;
                    for (var e = -1, f = a.queue.length; ++e < f; )
                        a.queue[e].callFulfilled(b)
                }
                return a
            }
            ,
            p.reject = function(a, b) {
                a.state = q,
                a.outcome = b;
                for (var c = -1, d = a.queue.length; ++c < d; )
                    a.queue[c].callRejected(b);
                return a
            }
            ,
            e.resolve = k,
            e.reject = l,
            e.all = m,
            e.race = n
        }
        , {
            immediate: 57
        }],
        59: [function(a, b, c) {
            "use strict";
            var d = a("./lib/utils/common").assign
              , e = a("./lib/deflate")
              , f = a("./lib/inflate")
              , g = a("./lib/zlib/constants")
              , h = {};
            d(h, e, f, g),
            b.exports = h
        }
        , {
            "./lib/deflate": 60,
            "./lib/inflate": 61,
            "./lib/utils/common": 62,
            "./lib/zlib/constants": 65
        }],
        60: [function(a, b, c) {
            "use strict";
            function d(a) {
                if (!(this instanceof d))
                    return new d(a);
                this.options = i.assign({
                    level: s,
                    method: u,
                    chunkSize: 16384,
                    windowBits: 15,
                    memLevel: 8,
                    strategy: t,
                    to: ""
                }, a || {});
                var b = this.options;
                b.raw && b.windowBits > 0 ? b.windowBits = -b.windowBits : b.gzip && b.windowBits > 0 && b.windowBits < 16 && (b.windowBits += 16),
                this.err = 0,
                this.msg = "",
                this.ended = !1,
                this.chunks = [],
                this.strm = new l,
                this.strm.avail_out = 0;
                var c = h.deflateInit2(this.strm, b.level, b.method, b.windowBits, b.memLevel, b.strategy);
                if (c !== p)
                    throw new Error(k[c]);
                if (b.header && h.deflateSetHeader(this.strm, b.header),
                b.dictionary) {
                    var e;
                    if (e = "string" == typeof b.dictionary ? j.string2buf(b.dictionary) : "[object ArrayBuffer]" === m.call(b.dictionary) ? new Uint8Array(b.dictionary) : b.dictionary,
                    c = h.deflateSetDictionary(this.strm, e),
                    c !== p)
                        throw new Error(k[c]);
                    this._dict_set = !0
                }
            }
            function e(a, b) {
                var c = new d(b);
                if (c.push(a, !0),
                c.err)
                    throw c.msg;
                return c.result
            }
            function f(a, b) {
                return b = b || {},
                b.raw = !0,
                e(a, b)
            }
            function g(a, b) {
                return b = b || {},
                b.gzip = !0,
                e(a, b)
            }
            var h = a("./zlib/deflate")
              , i = a("./utils/common")
              , j = a("./utils/strings")
              , k = a("./zlib/messages")
              , l = a("./zlib/zstream")
              , m = Object.prototype.toString
              , n = 0
              , o = 4
              , p = 0
              , q = 1
              , r = 2
              , s = -1
              , t = 0
              , u = 8;
            d.prototype.push = function(a, b) {
                var c, d, e = this.strm, f = this.options.chunkSize;
                if (this.ended)
                    return !1;
                d = b === ~~b ? b : b === !0 ? o : n,
                "string" == typeof a ? e.input = j.string2buf(a) : "[object ArrayBuffer]" === m.call(a) ? e.input = new Uint8Array(a) : e.input = a,
                e.next_in = 0,
                e.avail_in = e.input.length;
                do {
                    if (0 === e.avail_out && (e.output = new i.Buf8(f),
                    e.next_out = 0,
                    e.avail_out = f),
                    c = h.deflate(e, d),
                    c !== q && c !== p)
                        return this.onEnd(c),
                        this.ended = !0,
                        !1;
                    0 !== e.avail_out && (0 !== e.avail_in || d !== o && d !== r) || ("string" === this.options.to ? this.onData(j.buf2binstring(i.shrinkBuf(e.output, e.next_out))) : this.onData(i.shrinkBuf(e.output, e.next_out)))
                } while ((e.avail_in > 0 || 0 === e.avail_out) && c !== q);return d === o ? (c = h.deflateEnd(this.strm),
                this.onEnd(c),
                this.ended = !0,
                c === p) : d !== r || (this.onEnd(p),
                e.avail_out = 0,
                !0)
            }
            ,
            d.prototype.onData = function(a) {
                this.chunks.push(a)
            }
            ,
            d.prototype.onEnd = function(a) {
                a === p && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = i.flattenChunks(this.chunks)),
                this.chunks = [],
                this.err = a,
                this.msg = this.strm.msg
            }
            ,
            c.Deflate = d,
            c.deflate = e,
            c.deflateRaw = f,
            c.gzip = g
        }
        , {
            "./utils/common": 62,
            "./utils/strings": 63,
            "./zlib/deflate": 67,
            "./zlib/messages": 72,
            "./zlib/zstream": 74
        }],
        61: [function(a, b, c) {
            "use strict";
            function d(a) {
                if (!(this instanceof d))
                    return new d(a);
                this.options = h.assign({
                    chunkSize: 16384,
                    windowBits: 0,
                    to: ""
                }, a || {});
                var b = this.options;
                b.raw && b.windowBits >= 0 && b.windowBits < 16 && (b.windowBits = -b.windowBits,
                0 === b.windowBits && (b.windowBits = -15)),
                !(b.windowBits >= 0 && b.windowBits < 16) || a && a.windowBits || (b.windowBits += 32),
                b.windowBits > 15 && b.windowBits < 48 && 0 === (15 & b.windowBits) && (b.windowBits |= 15),
                this.err = 0,
                this.msg = "",
                this.ended = !1,
                this.chunks = [],
                this.strm = new l,
                this.strm.avail_out = 0;
                var c = g.inflateInit2(this.strm, b.windowBits);
                if (c !== j.Z_OK)
                    throw new Error(k[c]);
                this.header = new m,
                g.inflateGetHeader(this.strm, this.header)
            }
            function e(a, b) {
                var c = new d(b);
                if (c.push(a, !0),
                c.err)
                    throw c.msg;
                return c.result
            }
            function f(a, b) {
                return b = b || {},
                b.raw = !0,
                e(a, b)
            }
            var g = a("./zlib/inflate")
              , h = a("./utils/common")
              , i = a("./utils/strings")
              , j = a("./zlib/constants")
              , k = a("./zlib/messages")
              , l = a("./zlib/zstream")
              , m = a("./zlib/gzheader")
              , n = Object.prototype.toString;
            d.prototype.push = function(a, b) {
                var c, d, e, f, k, l, m = this.strm, o = this.options.chunkSize, p = this.options.dictionary, q = !1;
                if (this.ended)
                    return !1;
                d = b === ~~b ? b : b === !0 ? j.Z_FINISH : j.Z_NO_FLUSH,
                "string" == typeof a ? m.input = i.binstring2buf(a) : "[object ArrayBuffer]" === n.call(a) ? m.input = new Uint8Array(a) : m.input = a,
                m.next_in = 0,
                m.avail_in = m.input.length;
                do {
                    if (0 === m.avail_out && (m.output = new h.Buf8(o),
                    m.next_out = 0,
                    m.avail_out = o),
                    c = g.inflate(m, j.Z_NO_FLUSH),
                    c === j.Z_NEED_DICT && p && (l = "string" == typeof p ? i.string2buf(p) : "[object ArrayBuffer]" === n.call(p) ? new Uint8Array(p) : p,
                    c = g.inflateSetDictionary(this.strm, l)),
                    c === j.Z_BUF_ERROR && q === !0 && (c = j.Z_OK,
                    q = !1),
                    c !== j.Z_STREAM_END && c !== j.Z_OK)
                        return this.onEnd(c),
                        this.ended = !0,
                        !1;
                    m.next_out && (0 !== m.avail_out && c !== j.Z_STREAM_END && (0 !== m.avail_in || d !== j.Z_FINISH && d !== j.Z_SYNC_FLUSH) || ("string" === this.options.to ? (e = i.utf8border(m.output, m.next_out),
                    f = m.next_out - e,
                    k = i.buf2string(m.output, e),
                    m.next_out = f,
                    m.avail_out = o - f,
                    f && h.arraySet(m.output, m.output, e, f, 0),
                    this.onData(k)) : this.onData(h.shrinkBuf(m.output, m.next_out)))),
                    0 === m.avail_in && 0 === m.avail_out && (q = !0)
                } while ((m.avail_in > 0 || 0 === m.avail_out) && c !== j.Z_STREAM_END);return c === j.Z_STREAM_END && (d = j.Z_FINISH),
                d === j.Z_FINISH ? (c = g.inflateEnd(this.strm),
                this.onEnd(c),
                this.ended = !0,
                c === j.Z_OK) : d !== j.Z_SYNC_FLUSH || (this.onEnd(j.Z_OK),
                m.avail_out = 0,
                !0)
            }
            ,
            d.prototype.onData = function(a) {
                this.chunks.push(a)
            }
            ,
            d.prototype.onEnd = function(a) {
                a === j.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = h.flattenChunks(this.chunks)),
                this.chunks = [],
                this.err = a,
                this.msg = this.strm.msg
            }
            ,
            c.Inflate = d,
            c.inflate = e,
            c.inflateRaw = f,
            c.ungzip = e
        }
        , {
            "./utils/common": 62,
            "./utils/strings": 63,
            "./zlib/constants": 65,
            "./zlib/gzheader": 68,
            "./zlib/inflate": 70,
            "./zlib/messages": 72,
            "./zlib/zstream": 74
        }],
        62: [function(a, b, c) {
            "use strict";
            var d = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
            c.assign = function(a) {
                for (var b = Array.prototype.slice.call(arguments, 1); b.length; ) {
                    var c = b.shift();
                    if (c) {
                        if ("object" != typeof c)
                            throw new TypeError(c + "must be non-object");
                        for (var d in c)
                            c.hasOwnProperty(d) && (a[d] = c[d])
                    }
                }
                return a
            }
            ,
            c.shrinkBuf = function(a, b) {
                return a.length === b ? a : a.subarray ? a.subarray(0, b) : (a.length = b,
                a)
            }
            ;
            var e = {
                arraySet: function(a, b, c, d, e) {
                    if (b.subarray && a.subarray)
                        return void a.set(b.subarray(c, c + d), e);
                    for (var f = 0; f < d; f++)
                        a[e + f] = b[c + f]
                },
                flattenChunks: function(a) {
                    var b, c, d, e, f, g;
                    for (d = 0,
                    b = 0,
                    c = a.length; b < c; b++)
                        d += a[b].length;
                    for (g = new Uint8Array(d),
                    e = 0,
                    b = 0,
                    c = a.length; b < c; b++)
                        f = a[b],
                        g.set(f, e),
                        e += f.length;
                    return g
                }
            }
              , f = {
                arraySet: function(a, b, c, d, e) {
                    for (var f = 0; f < d; f++)
                        a[e + f] = b[c + f]
                },
                flattenChunks: function(a) {
                    return [].concat.apply([], a)
                }
            };
            c.setTyped = function(a) {
                a ? (c.Buf8 = Uint8Array,
                c.Buf16 = Uint16Array,
                c.Buf32 = Int32Array,
                c.assign(c, e)) : (c.Buf8 = Array,
                c.Buf16 = Array,
                c.Buf32 = Array,
                c.assign(c, f))
            }
            ,
            c.setTyped(d)
        }
        , {}],
        63: [function(a, b, c) {
            "use strict";
            function d(a, b) {
                if (b < 65537 && (a.subarray && g || !a.subarray && f))
                    return String.fromCharCode.apply(null, e.shrinkBuf(a, b));
                for (var c = "", d = 0; d < b; d++)
                    c += String.fromCharCode(a[d]);
                return c
            }
            var e = a("./common")
              , f = !0
              , g = !0;
            try {
                String.fromCharCode.apply(null, [0])
            } catch (h) {
                f = !1
            }
            try {
                String.fromCharCode.apply(null, new Uint8Array(1))
            } catch (h) {
                g = !1
            }
            for (var i = new e.Buf8(256), j = 0; j < 256; j++)
                i[j] = j >= 252 ? 6 : j >= 248 ? 5 : j >= 240 ? 4 : j >= 224 ? 3 : j >= 192 ? 2 : 1;
            i[254] = i[254] = 1,
            c.string2buf = function(a) {
                var b, c, d, f, g, h = a.length, i = 0;
                for (f = 0; f < h; f++)
                    c = a.charCodeAt(f),
                    55296 === (64512 & c) && f + 1 < h && (d = a.charCodeAt(f + 1),
                    56320 === (64512 & d) && (c = 65536 + (c - 55296 << 10) + (d - 56320),
                    f++)),
                    i += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
                for (b = new e.Buf8(i),
                g = 0,
                f = 0; g < i; f++)
                    c = a.charCodeAt(f),
                    55296 === (64512 & c) && f + 1 < h && (d = a.charCodeAt(f + 1),
                    56320 === (64512 & d) && (c = 65536 + (c - 55296 << 10) + (d - 56320),
                    f++)),
                    c < 128 ? b[g++] = c : c < 2048 ? (b[g++] = 192 | c >>> 6,
                    b[g++] = 128 | 63 & c) : c < 65536 ? (b[g++] = 224 | c >>> 12,
                    b[g++] = 128 | c >>> 6 & 63,
                    b[g++] = 128 | 63 & c) : (b[g++] = 240 | c >>> 18,
                    b[g++] = 128 | c >>> 12 & 63,
                    b[g++] = 128 | c >>> 6 & 63,
                    b[g++] = 128 | 63 & c);
                return b
            }
            ,
            c.buf2binstring = function(a) {
                return d(a, a.length)
            }
            ,
            c.binstring2buf = function(a) {
                for (var b = new e.Buf8(a.length), c = 0, d = b.length; c < d; c++)
                    b[c] = a.charCodeAt(c);
                return b
            }
            ,
            c.buf2string = function(a, b) {
                var c, e, f, g, h = b || a.length, j = new Array(2 * h);
                for (e = 0,
                c = 0; c < h; )
                    if (f = a[c++],
                    f < 128)
                        j[e++] = f;
                    else if (g = i[f],
                    g > 4)
                        j[e++] = 65533,
                        c += g - 1;
                    else {
                        for (f &= 2 === g ? 31 : 3 === g ? 15 : 7; g > 1 && c < h; )
                            f = f << 6 | 63 & a[c++],
                            g--;
                        g > 1 ? j[e++] = 65533 : f < 65536 ? j[e++] = f : (f -= 65536,
                        j[e++] = 55296 | f >> 10 & 1023,
                        j[e++] = 56320 | 1023 & f)
                    }
                return d(j, e)
            }
            ,
            c.utf8border = function(a, b) {
                var c;
                for (b = b || a.length,
                b > a.length && (b = a.length),
                c = b - 1; c >= 0 && 128 === (192 & a[c]); )
                    c--;
                return c < 0 ? b : 0 === c ? b : c + i[a[c]] > b ? c : b
            }
        }
        , {
            "./common": 62
        }],
        64: [function(a, b, c) {
            "use strict";
            function d(a, b, c, d) {
                for (var e = 65535 & a | 0, f = a >>> 16 & 65535 | 0, g = 0; 0 !== c; ) {
                    g = c > 2e3 ? 2e3 : c,
                    c -= g;
                    do
                        e = e + b[d++] | 0,
                        f = f + e | 0;
                    while (--g);e %= 65521,
                    f %= 65521
                }
                return e | f << 16 | 0
            }
            b.exports = d
        }
        , {}],
        65: [function(a, b, c) {
            "use strict";
            b.exports = {
                Z_NO_FLUSH: 0,
                Z_PARTIAL_FLUSH: 1,
                Z_SYNC_FLUSH: 2,
                Z_FULL_FLUSH: 3,
                Z_FINISH: 4,
                Z_BLOCK: 5,
                Z_TREES: 6,
                Z_OK: 0,
                Z_STREAM_END: 1,
                Z_NEED_DICT: 2,
                Z_ERRNO: -1,
                Z_STREAM_ERROR: -2,
                Z_DATA_ERROR: -3,
                Z_BUF_ERROR: -5,
                Z_NO_COMPRESSION: 0,
                Z_BEST_SPEED: 1,
                Z_BEST_COMPRESSION: 9,
                Z_DEFAULT_COMPRESSION: -1,
                Z_FILTERED: 1,
                Z_HUFFMAN_ONLY: 2,
                Z_RLE: 3,
                Z_FIXED: 4,
                Z_DEFAULT_STRATEGY: 0,
                Z_BINARY: 0,
                Z_TEXT: 1,
                Z_UNKNOWN: 2,
                Z_DEFLATED: 8
            }
        }
        , {}],
        66: [function(a, b, c) {
            "use strict";
            function d() {
                for (var a, b = [], c = 0; c < 256; c++) {
                    a = c;
                    for (var d = 0; d < 8; d++)
                        a = 1 & a ? 3988292384 ^ a >>> 1 : a >>> 1;
                    b[c] = a
                }
                return b
            }
            function e(a, b, c, d) {
                var e = f
                  , g = d + c;
                a ^= -1;
                for (var h = d; h < g; h++)
                    a = a >>> 8 ^ e[255 & (a ^ b[h])];
                return a ^ -1
            }
            var f = d();
            b.exports = e
        }
        , {}],
        67: [function(a, b, c) {
            "use strict";
            function d(a, b) {
                return a.msg = I[b],
                b
            }
            function e(a) {
                return (a << 1) - (a > 4 ? 9 : 0)
            }
            function f(a) {
                for (var b = a.length; --b >= 0; )
                    a[b] = 0
            }
            function g(a) {
                var b = a.state
                  , c = b.pending;
                c > a.avail_out && (c = a.avail_out),
                0 !== c && (E.arraySet(a.output, b.pending_buf, b.pending_out, c, a.next_out),
                a.next_out += c,
                b.pending_out += c,
                a.total_out += c,
                a.avail_out -= c,
                b.pending -= c,
                0 === b.pending && (b.pending_out = 0))
            }
            function h(a, b) {
                F._tr_flush_block(a, a.block_start >= 0 ? a.block_start : -1, a.strstart - a.block_start, b),
                a.block_start = a.strstart,
                g(a.strm)
            }
            function i(a, b) {
                a.pending_buf[a.pending++] = b
            }
            function j(a, b) {
                a.pending_buf[a.pending++] = b >>> 8 & 255,
                a.pending_buf[a.pending++] = 255 & b
            }
            function k(a, b, c, d) {
                var e = a.avail_in;
                return e > d && (e = d),
                0 === e ? 0 : (a.avail_in -= e,
                E.arraySet(b, a.input, a.next_in, e, c),
                1 === a.state.wrap ? a.adler = G(a.adler, b, e, c) : 2 === a.state.wrap && (a.adler = H(a.adler, b, e, c)),
                a.next_in += e,
                a.total_in += e,
                e)
            }
            function l(a, b) {
                var c, d, e = a.max_chain_length, f = a.strstart, g = a.prev_length, h = a.nice_match, i = a.strstart > a.w_size - la ? a.strstart - (a.w_size - la) : 0, j = a.window, k = a.w_mask, l = a.prev, m = a.strstart + ka, n = j[f + g - 1], o = j[f + g];
                a.prev_length >= a.good_match && (e >>= 2),
                h > a.lookahead && (h = a.lookahead);
                do
                    if (c = b,
                    j[c + g] === o && j[c + g - 1] === n && j[c] === j[f] && j[++c] === j[f + 1]) {
                        f += 2,
                        c++;
                        do
                            ;
                        while (j[++f] === j[++c] && j[++f] === j[++c] && j[++f] === j[++c] && j[++f] === j[++c] && j[++f] === j[++c] && j[++f] === j[++c] && j[++f] === j[++c] && j[++f] === j[++c] && f < m);if (d = ka - (m - f),
                        f = m - ka,
                        d > g) {
                            if (a.match_start = b,
                            g = d,
                            d >= h)
                                break;
                            n = j[f + g - 1],
                            o = j[f + g]
                        }
                    }
                while ((b = l[b & k]) > i && 0 !== --e);return g <= a.lookahead ? g : a.lookahead
            }
            function m(a) {
                var b, c, d, e, f, g = a.w_size;
                do {
                    if (e = a.window_size - a.lookahead - a.strstart,
                    a.strstart >= g + (g - la)) {
                        E.arraySet(a.window, a.window, g, g, 0),
                        a.match_start -= g,
                        a.strstart -= g,
                        a.block_start -= g,
                        c = a.hash_size,
                        b = c;
                        do
                            d = a.head[--b],
                            a.head[b] = d >= g ? d - g : 0;
                        while (--c);c = g,
                        b = c;
                        do
                            d = a.prev[--b],
                            a.prev[b] = d >= g ? d - g : 0;
                        while (--c);e += g
                    }
                    if (0 === a.strm.avail_in)
                        break;
                    if (c = k(a.strm, a.window, a.strstart + a.lookahead, e),
                    a.lookahead += c,
                    a.lookahead + a.insert >= ja)
                        for (f = a.strstart - a.insert,
                        a.ins_h = a.window[f],
                        a.ins_h = (a.ins_h << a.hash_shift ^ a.window[f + 1]) & a.hash_mask; a.insert && (a.ins_h = (a.ins_h << a.hash_shift ^ a.window[f + ja - 1]) & a.hash_mask,
                        a.prev[f & a.w_mask] = a.head[a.ins_h],
                        a.head[a.ins_h] = f,
                        f++,
                        a.insert--,
                        !(a.lookahead + a.insert < ja)); )
                            ;
                } while (a.lookahead < la && 0 !== a.strm.avail_in)
            }
            function n(a, b) {
                var c = 65535;
                for (c > a.pending_buf_size - 5 && (c = a.pending_buf_size - 5); ; ) {
                    if (a.lookahead <= 1) {
                        if (m(a),
                        0 === a.lookahead && b === J)
                            return ua;
                        if (0 === a.lookahead)
                            break
                    }
                    a.strstart += a.lookahead,
                    a.lookahead = 0;
                    var d = a.block_start + c;
                    if ((0 === a.strstart || a.strstart >= d) && (a.lookahead = a.strstart - d,
                    a.strstart = d,
                    h(a, !1),
                    0 === a.strm.avail_out))
                        return ua;
                    if (a.strstart - a.block_start >= a.w_size - la && (h(a, !1),
                    0 === a.strm.avail_out))
                        return ua
                }
                return a.insert = 0,
                b === M ? (h(a, !0),
                0 === a.strm.avail_out ? wa : xa) : a.strstart > a.block_start && (h(a, !1),
                0 === a.strm.avail_out) ? ua : ua
            }
            function o(a, b) {
                for (var c, d; ; ) {
                    if (a.lookahead < la) {
                        if (m(a),
                        a.lookahead < la && b === J)
                            return ua;
                        if (0 === a.lookahead)
                            break
                    }
                    if (c = 0,
                    a.lookahead >= ja && (a.ins_h = (a.ins_h << a.hash_shift ^ a.window[a.strstart + ja - 1]) & a.hash_mask,
                    c = a.prev[a.strstart & a.w_mask] = a.head[a.ins_h],
                    a.head[a.ins_h] = a.strstart),
                    0 !== c && a.strstart - c <= a.w_size - la && (a.match_length = l(a, c)),
                    a.match_length >= ja)
                        if (d = F._tr_tally(a, a.strstart - a.match_start, a.match_length - ja),
                        a.lookahead -= a.match_length,
                        a.match_length <= a.max_lazy_match && a.lookahead >= ja) {
                            a.match_length--;
                            do
                                a.strstart++,
                                a.ins_h = (a.ins_h << a.hash_shift ^ a.window[a.strstart + ja - 1]) & a.hash_mask,
                                c = a.prev[a.strstart & a.w_mask] = a.head[a.ins_h],
                                a.head[a.ins_h] = a.strstart;
                            while (0 !== --a.match_length);a.strstart++
                        } else
                            a.strstart += a.match_length,
                            a.match_length = 0,
                            a.ins_h = a.window[a.strstart],
                            a.ins_h = (a.ins_h << a.hash_shift ^ a.window[a.strstart + 1]) & a.hash_mask;
                    else
                        d = F._tr_tally(a, 0, a.window[a.strstart]),
                        a.lookahead--,
                        a.strstart++;
                    if (d && (h(a, !1),
                    0 === a.strm.avail_out))
                        return ua
                }
                return a.insert = a.strstart < ja - 1 ? a.strstart : ja - 1,
                b === M ? (h(a, !0),
                0 === a.strm.avail_out ? wa : xa) : a.last_lit && (h(a, !1),
                0 === a.strm.avail_out) ? ua : va
            }
            function p(a, b) {
                for (var c, d, e; ; ) {
                    if (a.lookahead < la) {
                        if (m(a),
                        a.lookahead < la && b === J)
                            return ua;
                        if (0 === a.lookahead)
                            break
                    }
                    if (c = 0,
                    a.lookahead >= ja && (a.ins_h = (a.ins_h << a.hash_shift ^ a.window[a.strstart + ja - 1]) & a.hash_mask,
                    c = a.prev[a.strstart & a.w_mask] = a.head[a.ins_h],
                    a.head[a.ins_h] = a.strstart),
                    a.prev_length = a.match_length,
                    a.prev_match = a.match_start,
                    a.match_length = ja - 1,
                    0 !== c && a.prev_length < a.max_lazy_match && a.strstart - c <= a.w_size - la && (a.match_length = l(a, c),
                    a.match_length <= 5 && (a.strategy === U || a.match_length === ja && a.strstart - a.match_start > 4096) && (a.match_length = ja - 1)),
                    a.prev_length >= ja && a.match_length <= a.prev_length) {
                        e = a.strstart + a.lookahead - ja,
                        d = F._tr_tally(a, a.strstart - 1 - a.prev_match, a.prev_length - ja),
                        a.lookahead -= a.prev_length - 1,
                        a.prev_length -= 2;
                        do
                            ++a.strstart <= e && (a.ins_h = (a.ins_h << a.hash_shift ^ a.window[a.strstart + ja - 1]) & a.hash_mask,
                            c = a.prev[a.strstart & a.w_mask] = a.head[a.ins_h],
                            a.head[a.ins_h] = a.strstart);
                        while (0 !== --a.prev_length);if (a.match_available = 0,
                        a.match_length = ja - 1,
                        a.strstart++,
                        d && (h(a, !1),
                        0 === a.strm.avail_out))
                            return ua
                    } else if (a.match_available) {
                        if (d = F._tr_tally(a, 0, a.window[a.strstart - 1]),
                        d && h(a, !1),
                        a.strstart++,
                        a.lookahead--,
                        0 === a.strm.avail_out)
                            return ua
                    } else
                        a.match_available = 1,
                        a.strstart++,
                        a.lookahead--
                }
                return a.match_available && (d = F._tr_tally(a, 0, a.window[a.strstart - 1]),
                a.match_available = 0),
                a.insert = a.strstart < ja - 1 ? a.strstart : ja - 1,
                b === M ? (h(a, !0),
                0 === a.strm.avail_out ? wa : xa) : a.last_lit && (h(a, !1),
                0 === a.strm.avail_out) ? ua : va
            }
            function q(a, b) {
                for (var c, d, e, f, g = a.window; ; ) {
                    if (a.lookahead <= ka) {
                        if (m(a),
                        a.lookahead <= ka && b === J)
                            return ua;
                        if (0 === a.lookahead)
                            break
                    }
                    if (a.match_length = 0,
                    a.lookahead >= ja && a.strstart > 0 && (e = a.strstart - 1,
                    d = g[e],
                    d === g[++e] && d === g[++e] && d === g[++e])) {
                        f = a.strstart + ka;
                        do
                            ;
                        while (d === g[++e] && d === g[++e] && d === g[++e] && d === g[++e] && d === g[++e] && d === g[++e] && d === g[++e] && d === g[++e] && e < f);a.match_length = ka - (f - e),
                        a.match_length > a.lookahead && (a.match_length = a.lookahead)
                    }
                    if (a.match_length >= ja ? (c = F._tr_tally(a, 1, a.match_length - ja),
                    a.lookahead -= a.match_length,
                    a.strstart += a.match_length,
                    a.match_length = 0) : (c = F._tr_tally(a, 0, a.window[a.strstart]),
                    a.lookahead--,
                    a.strstart++),
                    c && (h(a, !1),
                    0 === a.strm.avail_out))
                        return ua
                }
                return a.insert = 0,
                b === M ? (h(a, !0),
                0 === a.strm.avail_out ? wa : xa) : a.last_lit && (h(a, !1),
                0 === a.strm.avail_out) ? ua : va
            }
            function r(a, b) {
                for (var c; ; ) {
                    if (0 === a.lookahead && (m(a),
                    0 === a.lookahead)) {
                        if (b === J)
                            return ua;
                        break
                    }
                    if (a.match_length = 0,
                    c = F._tr_tally(a, 0, a.window[a.strstart]),
                    a.lookahead--,
                    a.strstart++,
                    c && (h(a, !1),
                    0 === a.strm.avail_out))
                        return ua
                }
                return a.insert = 0,
                b === M ? (h(a, !0),
                0 === a.strm.avail_out ? wa : xa) : a.last_lit && (h(a, !1),
                0 === a.strm.avail_out) ? ua : va
            }
            function s(a, b, c, d, e) {
                this.good_length = a,
                this.max_lazy = b,
                this.nice_length = c,
                this.max_chain = d,
                this.func = e
            }
            function t(a) {
                a.window_size = 2 * a.w_size,
                f(a.head),
                a.max_lazy_match = D[a.level].max_lazy,
                a.good_match = D[a.level].good_length,
                a.nice_match = D[a.level].nice_length,
                a.max_chain_length = D[a.level].max_chain,
                a.strstart = 0,
                a.block_start = 0,
                a.lookahead = 0,
                a.insert = 0,
                a.match_length = a.prev_length = ja - 1,
                a.match_available = 0,
                a.ins_h = 0
            }
            function u() {
                this.strm = null,
                this.status = 0,
                this.pending_buf = null,
                this.pending_buf_size = 0,
                this.pending_out = 0,
                this.pending = 0,
                this.wrap = 0,
                this.gzhead = null,
                this.gzindex = 0,
                this.method = $,
                this.last_flush = -1,
                this.w_size = 0,
                this.w_bits = 0,
                this.w_mask = 0,
                this.window = null,
                this.window_size = 0,
                this.prev = null,
                this.head = null,
                this.ins_h = 0,
                this.hash_size = 0,
                this.hash_bits = 0,
                this.hash_mask = 0,
                this.hash_shift = 0,
                this.block_start = 0,
                this.match_length = 0,
                this.prev_match = 0,
                this.match_available = 0,
                this.strstart = 0,
                this.match_start = 0,
                this.lookahead = 0,
                this.prev_length = 0,
                this.max_chain_length = 0,
                this.max_lazy_match = 0,
                this.level = 0,
                this.strategy = 0,
                this.good_match = 0,
                this.nice_match = 0,
                this.dyn_ltree = new E.Buf16(2 * ha),
                this.dyn_dtree = new E.Buf16(2 * (2 * fa + 1)),
                this.bl_tree = new E.Buf16(2 * (2 * ga + 1)),
                f(this.dyn_ltree),
                f(this.dyn_dtree),
                f(this.bl_tree),
                this.l_desc = null,
                this.d_desc = null,
                this.bl_desc = null,
                this.bl_count = new E.Buf16(ia + 1),
                this.heap = new E.Buf16(2 * ea + 1),
                f(this.heap),
                this.heap_len = 0,
                this.heap_max = 0,
                this.depth = new E.Buf16(2 * ea + 1),
                f(this.depth),
                this.l_buf = 0,
                this.lit_bufsize = 0,
                this.last_lit = 0,
                this.d_buf = 0,
                this.opt_len = 0,
                this.static_len = 0,
                this.matches = 0,
                this.insert = 0,
                this.bi_buf = 0,
                this.bi_valid = 0
            }
            function v(a) {
                var b;
                return a && a.state ? (a.total_in = a.total_out = 0,
                a.data_type = Z,
                b = a.state,
                b.pending = 0,
                b.pending_out = 0,
                b.wrap < 0 && (b.wrap = -b.wrap),
                b.status = b.wrap ? na : sa,
                a.adler = 2 === b.wrap ? 0 : 1,
                b.last_flush = J,
                F._tr_init(b),
                O) : d(a, Q)
            }
            function w(a) {
                var b = v(a);
                return b === O && t(a.state),
                b
            }
            function x(a, b) {
                return a && a.state ? 2 !== a.state.wrap ? Q : (a.state.gzhead = b,
                O) : Q
            }
            function y(a, b, c, e, f, g) {
                if (!a)
                    return Q;
                var h = 1;
                if (b === T && (b = 6),
                e < 0 ? (h = 0,
                e = -e) : e > 15 && (h = 2,
                e -= 16),
                f < 1 || f > _ || c !== $ || e < 8 || e > 15 || b < 0 || b > 9 || g < 0 || g > X)
                    return d(a, Q);
                8 === e && (e = 9);
                var i = new u;
                return a.state = i,
                i.strm = a,
                i.wrap = h,
                i.gzhead = null,
                i.w_bits = e,
                i.w_size = 1 << i.w_bits,
                i.w_mask = i.w_size - 1,
                i.hash_bits = f + 7,
                i.hash_size = 1 << i.hash_bits,
                i.hash_mask = i.hash_size - 1,
                i.hash_shift = ~~((i.hash_bits + ja - 1) / ja),
                i.window = new E.Buf8(2 * i.w_size),
                i.head = new E.Buf16(i.hash_size),
                i.prev = new E.Buf16(i.w_size),
                i.lit_bufsize = 1 << f + 6,
                i.pending_buf_size = 4 * i.lit_bufsize,
                i.pending_buf = new E.Buf8(i.pending_buf_size),
                i.d_buf = 1 * i.lit_bufsize,
                i.l_buf = 3 * i.lit_bufsize,
                i.level = b,
                i.strategy = g,
                i.method = c,
                w(a)
            }
            function z(a, b) {
                return y(a, b, $, aa, ba, Y)
            }
            function A(a, b) {
                var c, h, k, l;
                if (!a || !a.state || b > N || b < 0)
                    return a ? d(a, Q) : Q;
                if (h = a.state,
                !a.output || !a.input && 0 !== a.avail_in || h.status === ta && b !== M)
                    return d(a, 0 === a.avail_out ? S : Q);
                if (h.strm = a,
                c = h.last_flush,
                h.last_flush = b,
                h.status === na)
                    if (2 === h.wrap)
                        a.adler = 0,
                        i(h, 31),
                        i(h, 139),
                        i(h, 8),
                        h.gzhead ? (i(h, (h.gzhead.text ? 1 : 0) + (h.gzhead.hcrc ? 2 : 0) + (h.gzhead.extra ? 4 : 0) + (h.gzhead.name ? 8 : 0) + (h.gzhead.comment ? 16 : 0)),
                        i(h, 255 & h.gzhead.time),
                        i(h, h.gzhead.time >> 8 & 255),
                        i(h, h.gzhead.time >> 16 & 255),
                        i(h, h.gzhead.time >> 24 & 255),
                        i(h, 9 === h.level ? 2 : h.strategy >= V || h.level < 2 ? 4 : 0),
                        i(h, 255 & h.gzhead.os),
                        h.gzhead.extra && h.gzhead.extra.length && (i(h, 255 & h.gzhead.extra.length),
                        i(h, h.gzhead.extra.length >> 8 & 255)),
                        h.gzhead.hcrc && (a.adler = H(a.adler, h.pending_buf, h.pending, 0)),
                        h.gzindex = 0,
                        h.status = oa) : (i(h, 0),
                        i(h, 0),
                        i(h, 0),
                        i(h, 0),
                        i(h, 0),
                        i(h, 9 === h.level ? 2 : h.strategy >= V || h.level < 2 ? 4 : 0),
                        i(h, ya),
                        h.status = sa);
                    else {
                        var m = $ + (h.w_bits - 8 << 4) << 8
                          , n = -1;
                        n = h.strategy >= V || h.level < 2 ? 0 : h.level < 6 ? 1 : 6 === h.level ? 2 : 3,
                        m |= n << 6,
                        0 !== h.strstart && (m |= ma),
                        m += 31 - m % 31,
                        h.status = sa,
                        j(h, m),
                        0 !== h.strstart && (j(h, a.adler >>> 16),
                        j(h, 65535 & a.adler)),
                        a.adler = 1
                    }
                if (h.status === oa)
                    if (h.gzhead.extra) {
                        for (k = h.pending; h.gzindex < (65535 & h.gzhead.extra.length) && (h.pending !== h.pending_buf_size || (h.gzhead.hcrc && h.pending > k && (a.adler = H(a.adler, h.pending_buf, h.pending - k, k)),
                        g(a),
                        k = h.pending,
                        h.pending !== h.pending_buf_size)); )
                            i(h, 255 & h.gzhead.extra[h.gzindex]),
                            h.gzindex++;
                        h.gzhead.hcrc && h.pending > k && (a.adler = H(a.adler, h.pending_buf, h.pending - k, k)),
                        h.gzindex === h.gzhead.extra.length && (h.gzindex = 0,
                        h.status = pa)
                    } else
                        h.status = pa;
                if (h.status === pa)
                    if (h.gzhead.name) {
                        k = h.pending;
                        do {
                            if (h.pending === h.pending_buf_size && (h.gzhead.hcrc && h.pending > k && (a.adler = H(a.adler, h.pending_buf, h.pending - k, k)),
                            g(a),
                            k = h.pending,
                            h.pending === h.pending_buf_size)) {
                                l = 1;
                                break
                            }
                            l = h.gzindex < h.gzhead.name.length ? 255 & h.gzhead.name.charCodeAt(h.gzindex++) : 0,
                            i(h, l)
                        } while (0 !== l);h.gzhead.hcrc && h.pending > k && (a.adler = H(a.adler, h.pending_buf, h.pending - k, k)),
                        0 === l && (h.gzindex = 0,
                        h.status = qa)
                    } else
                        h.status = qa;
                if (h.status === qa)
                    if (h.gzhead.comment) {
                        k = h.pending;
                        do {
                            if (h.pending === h.pending_buf_size && (h.gzhead.hcrc && h.pending > k && (a.adler = H(a.adler, h.pending_buf, h.pending - k, k)),
                            g(a),
                            k = h.pending,
                            h.pending === h.pending_buf_size)) {
                                l = 1;
                                break
                            }
                            l = h.gzindex < h.gzhead.comment.length ? 255 & h.gzhead.comment.charCodeAt(h.gzindex++) : 0,
                            i(h, l)
                        } while (0 !== l);h.gzhead.hcrc && h.pending > k && (a.adler = H(a.adler, h.pending_buf, h.pending - k, k)),
                        0 === l && (h.status = ra)
                    } else
                        h.status = ra;
                if (h.status === ra && (h.gzhead.hcrc ? (h.pending + 2 > h.pending_buf_size && g(a),
                h.pending + 2 <= h.pending_buf_size && (i(h, 255 & a.adler),
                i(h, a.adler >> 8 & 255),
                a.adler = 0,
                h.status = sa)) : h.status = sa),
                0 !== h.pending) {
                    if (g(a),
                    0 === a.avail_out)
                        return h.last_flush = -1,
                        O
                } else if (0 === a.avail_in && e(b) <= e(c) && b !== M)
                    return d(a, S);
                if (h.status === ta && 0 !== a.avail_in)
                    return d(a, S);
                if (0 !== a.avail_in || 0 !== h.lookahead || b !== J && h.status !== ta) {
                    var o = h.strategy === V ? r(h, b) : h.strategy === W ? q(h, b) : D[h.level].func(h, b);
                    if (o !== wa && o !== xa || (h.status = ta),
                    o === ua || o === wa)
                        return 0 === a.avail_out && (h.last_flush = -1),
                        O;
                    if (o === va && (b === K ? F._tr_align(h) : b !== N && (F._tr_stored_block(h, 0, 0, !1),
                    b === L && (f(h.head),
                    0 === h.lookahead && (h.strstart = 0,
                    h.block_start = 0,
                    h.insert = 0))),
                    g(a),
                    0 === a.avail_out))
                        return h.last_flush = -1,
                        O
                }
                return b !== M ? O : h.wrap <= 0 ? P : (2 === h.wrap ? (i(h, 255 & a.adler),
                i(h, a.adler >> 8 & 255),
                i(h, a.adler >> 16 & 255),
                i(h, a.adler >> 24 & 255),
                i(h, 255 & a.total_in),
                i(h, a.total_in >> 8 & 255),
                i(h, a.total_in >> 16 & 255),
                i(h, a.total_in >> 24 & 255)) : (j(h, a.adler >>> 16),
                j(h, 65535 & a.adler)),
                g(a),
                h.wrap > 0 && (h.wrap = -h.wrap),
                0 !== h.pending ? O : P)
            }
            function B(a) {
                var b;
                return a && a.state ? (b = a.state.status,
                b !== na && b !== oa && b !== pa && b !== qa && b !== ra && b !== sa && b !== ta ? d(a, Q) : (a.state = null,
                b === sa ? d(a, R) : O)) : Q
            }
            function C(a, b) {
                var c, d, e, g, h, i, j, k, l = b.length;
                if (!a || !a.state)
                    return Q;
                if (c = a.state,
                g = c.wrap,
                2 === g || 1 === g && c.status !== na || c.lookahead)
                    return Q;
                for (1 === g && (a.adler = G(a.adler, b, l, 0)),
                c.wrap = 0,
                l >= c.w_size && (0 === g && (f(c.head),
                c.strstart = 0,
                c.block_start = 0,
                c.insert = 0),
                k = new E.Buf8(c.w_size),
                E.arraySet(k, b, l - c.w_size, c.w_size, 0),
                b = k,
                l = c.w_size),
                h = a.avail_in,
                i = a.next_in,
                j = a.input,
                a.avail_in = l,
                a.next_in = 0,
                a.input = b,
                m(c); c.lookahead >= ja; ) {
                    d = c.strstart,
                    e = c.lookahead - (ja - 1);
                    do
                        c.ins_h = (c.ins_h << c.hash_shift ^ c.window[d + ja - 1]) & c.hash_mask,
                        c.prev[d & c.w_mask] = c.head[c.ins_h],
                        c.head[c.ins_h] = d,
                        d++;
                    while (--e);c.strstart = d,
                    c.lookahead = ja - 1,
                    m(c)
                }
                return c.strstart += c.lookahead,
                c.block_start = c.strstart,
                c.insert = c.lookahead,
                c.lookahead = 0,
                c.match_length = c.prev_length = ja - 1,
                c.match_available = 0,
                a.next_in = i,
                a.input = j,
                a.avail_in = h,
                c.wrap = g,
                O
            }
            var D, E = a("../utils/common"), F = a("./trees"), G = a("./adler32"), H = a("./crc32"), I = a("./messages"), J = 0, K = 1, L = 3, M = 4, N = 5, O = 0, P = 1, Q = -2, R = -3, S = -5, T = -1, U = 1, V = 2, W = 3, X = 4, Y = 0, Z = 2, $ = 8, _ = 9, aa = 15, ba = 8, ca = 29, da = 256, ea = da + 1 + ca, fa = 30, ga = 19, ha = 2 * ea + 1, ia = 15, ja = 3, ka = 258, la = ka + ja + 1, ma = 32, na = 42, oa = 69, pa = 73, qa = 91, ra = 103, sa = 113, ta = 666, ua = 1, va = 2, wa = 3, xa = 4, ya = 3;
            D = [new s(0,0,0,0,n), new s(4,4,8,4,o), new s(4,5,16,8,o), new s(4,6,32,32,o), new s(4,4,16,16,p), new s(8,16,32,32,p), new s(8,16,128,128,p), new s(8,32,128,256,p), new s(32,128,258,1024,p), new s(32,258,258,4096,p)],
            c.deflateInit = z,
            c.deflateInit2 = y,
            c.deflateReset = w,
            c.deflateResetKeep = v,
            c.deflateSetHeader = x,
            c.deflate = A,
            c.deflateEnd = B,
            c.deflateSetDictionary = C,
            c.deflateInfo = "pako deflate (from Nodeca project)"
        }
        , {
            "../utils/common": 62,
            "./adler32": 64,
            "./crc32": 66,
            "./messages": 72,
            "./trees": 73
        }],
        68: [function(a, b, c) {
            "use strict";
            function d() {
                this.text = 0,
                this.time = 0,
                this.xflags = 0,
                this.os = 0,
                this.extra = null,
                this.extra_len = 0,
                this.name = "",
                this.comment = "",
                this.hcrc = 0,
                this.done = !1
            }
            b.exports = d
        }
        , {}],
        69: [function(a, b, c) {
            "use strict";
            var d = 30
              , e = 12;
            b.exports = function(a, b) {
                var c, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C;
                c = a.state,
                f = a.next_in,
                B = a.input,
                g = f + (a.avail_in - 5),
                h = a.next_out,
                C = a.output,
                i = h - (b - a.avail_out),
                j = h + (a.avail_out - 257),
                k = c.dmax,
                l = c.wsize,
                m = c.whave,
                n = c.wnext,
                o = c.window,
                p = c.hold,
                q = c.bits,
                r = c.lencode,
                s = c.distcode,
                t = (1 << c.lenbits) - 1,
                u = (1 << c.distbits) - 1;
                a: do {
                    q < 15 && (p += B[f++] << q,
                    q += 8,
                    p += B[f++] << q,
                    q += 8),
                    v = r[p & t];
                    b: for (; ; ) {
                        if (w = v >>> 24,
                        p >>>= w,
                        q -= w,
                        w = v >>> 16 & 255,
                        0 === w)
                            C[h++] = 65535 & v;
                        else {
                            if (!(16 & w)) {
                                if (0 === (64 & w)) {
                                    v = r[(65535 & v) + (p & (1 << w) - 1)];
                                    continue b
                                }
                                if (32 & w) {
                                    c.mode = e;
                                    break a
                                }
                                a.msg = "invalid literal/length code",
                                c.mode = d;
                                break a
                            }
                            x = 65535 & v,
                            w &= 15,
                            w && (q < w && (p += B[f++] << q,
                            q += 8),
                            x += p & (1 << w) - 1,
                            p >>>= w,
                            q -= w),
                            q < 15 && (p += B[f++] << q,
                            q += 8,
                            p += B[f++] << q,
                            q += 8),
                            v = s[p & u];
                            c: for (; ; ) {
                                if (w = v >>> 24,
                                p >>>= w,
                                q -= w,
                                w = v >>> 16 & 255,
                                !(16 & w)) {
                                    if (0 === (64 & w)) {
                                        v = s[(65535 & v) + (p & (1 << w) - 1)];
                                        continue c
                                    }
                                    a.msg = "invalid distance code",
                                    c.mode = d;
                                    break a
                                }
                                if (y = 65535 & v,
                                w &= 15,
                                q < w && (p += B[f++] << q,
                                q += 8,
                                q < w && (p += B[f++] << q,
                                q += 8)),
                                y += p & (1 << w) - 1,
                                y > k) {
                                    a.msg = "invalid distance too far back",
                                    c.mode = d;
                                    break a
                                }
                                if (p >>>= w,
                                q -= w,
                                w = h - i,
                                y > w) {
                                    if (w = y - w,
                                    w > m && c.sane) {
                                        a.msg = "invalid distance too far back",
                                        c.mode = d;
                                        break a
                                    }
                                    if (z = 0,
                                    A = o,
                                    0 === n) {
                                        if (z += l - w,
                                        w < x) {
                                            x -= w;
                                            do
                                                C[h++] = o[z++];
                                            while (--w);z = h - y,
                                            A = C
                                        }
                                    } else if (n < w) {
                                        if (z += l + n - w,
                                        w -= n,
                                        w < x) {
                                            x -= w;
                                            do
                                                C[h++] = o[z++];
                                            while (--w);if (z = 0,
                                            n < x) {
                                                w = n,
                                                x -= w;
                                                do
                                                    C[h++] = o[z++];
                                                while (--w);z = h - y,
                                                A = C
                                            }
                                        }
                                    } else if (z += n - w,
                                    w < x) {
                                        x -= w;
                                        do
                                            C[h++] = o[z++];
                                        while (--w);z = h - y,
                                        A = C
                                    }
                                    for (; x > 2; )
                                        C[h++] = A[z++],
                                        C[h++] = A[z++],
                                        C[h++] = A[z++],
                                        x -= 3;
                                    x && (C[h++] = A[z++],
                                    x > 1 && (C[h++] = A[z++]))
                                } else {
                                    z = h - y;
                                    do
                                        C[h++] = C[z++],
                                        C[h++] = C[z++],
                                        C[h++] = C[z++],
                                        x -= 3;
                                    while (x > 2);x && (C[h++] = C[z++],
                                    x > 1 && (C[h++] = C[z++]))
                                }
                                break
                            }
                        }
                        break
                    }
                } while (f < g && h < j);x = q >> 3,
                f -= x,
                q -= x << 3,
                p &= (1 << q) - 1,
                a.next_in = f,
                a.next_out = h,
                a.avail_in = f < g ? 5 + (g - f) : 5 - (f - g),
                a.avail_out = h < j ? 257 + (j - h) : 257 - (h - j),
                c.hold = p,
                c.bits = q
            }
        }
        , {}],
        70: [function(a, b, c) {
            "use strict";
            function d(a) {
                return (a >>> 24 & 255) + (a >>> 8 & 65280) + ((65280 & a) << 8) + ((255 & a) << 24)
            }
            function e() {
                this.mode = 0,
                this.last = !1,
                this.wrap = 0,
                this.havedict = !1,
                this.flags = 0,
                this.dmax = 0,
                this.check = 0,
                this.total = 0,
                this.head = null,
                this.wbits = 0,
                this.wsize = 0,
                this.whave = 0,
                this.wnext = 0,
                this.window = null,
                this.hold = 0,
                this.bits = 0,
                this.length = 0,
                this.offset = 0,
                this.extra = 0,
                this.lencode = null,
                this.distcode = null,
                this.lenbits = 0,
                this.distbits = 0,
                this.ncode = 0,
                this.nlen = 0,
                this.ndist = 0,
                this.have = 0,
                this.next = null,
                this.lens = new s.Buf16(320),
                this.work = new s.Buf16(288),
                this.lendyn = null,
                this.distdyn = null,
                this.sane = 0,
                this.back = 0,
                this.was = 0
            }
            function f(a) {
                var b;
                return a && a.state ? (b = a.state,
                a.total_in = a.total_out = b.total = 0,
                a.msg = "",
                b.wrap && (a.adler = 1 & b.wrap),
                b.mode = L,
                b.last = 0,
                b.havedict = 0,
                b.dmax = 32768,
                b.head = null,
                b.hold = 0,
                b.bits = 0,
                b.lencode = b.lendyn = new s.Buf32(pa),
                b.distcode = b.distdyn = new s.Buf32(qa),
                b.sane = 1,
                b.back = -1,
                D) : G
            }
            function g(a) {
                var b;
                return a && a.state ? (b = a.state,
                b.wsize = 0,
                b.whave = 0,
                b.wnext = 0,
                f(a)) : G
            }
            function h(a, b) {
                var c, d;
                return a && a.state ? (d = a.state,
                b < 0 ? (c = 0,
                b = -b) : (c = (b >> 4) + 1,
                b < 48 && (b &= 15)),
                b && (b < 8 || b > 15) ? G : (null !== d.window && d.wbits !== b && (d.window = null),
                d.wrap = c,
                d.wbits = b,
                g(a))) : G
            }
            function i(a, b) {
                var c, d;
                return a ? (d = new e,
                a.state = d,
                d.window = null,
                c = h(a, b),
                c !== D && (a.state = null),
                c) : G
            }
            function j(a) {
                return i(a, sa)
            }
            function k(a) {
                if (ta) {
                    var b;
                    for (q = new s.Buf32(512),
                    r = new s.Buf32(32),
                    b = 0; b < 144; )
                        a.lens[b++] = 8;
                    for (; b < 256; )
                        a.lens[b++] = 9;
                    for (; b < 280; )
                        a.lens[b++] = 7;
                    for (; b < 288; )
                        a.lens[b++] = 8;
                    for (w(y, a.lens, 0, 288, q, 0, a.work, {
                        bits: 9
                    }),
                    b = 0; b < 32; )
                        a.lens[b++] = 5;
                    w(z, a.lens, 0, 32, r, 0, a.work, {
                        bits: 5
                    }),
                    ta = !1
                }
                a.lencode = q,
                a.lenbits = 9,
                a.distcode = r,
                a.distbits = 5
            }
            function l(a, b, c, d) {
                var e, f = a.state;
                return null === f.window && (f.wsize = 1 << f.wbits,
                f.wnext = 0,
                f.whave = 0,
                f.window = new s.Buf8(f.wsize)),
                d >= f.wsize ? (s.arraySet(f.window, b, c - f.wsize, f.wsize, 0),
                f.wnext = 0,
                f.whave = f.wsize) : (e = f.wsize - f.wnext,
                e > d && (e = d),
                s.arraySet(f.window, b, c - d, e, f.wnext),
                d -= e,
                d ? (s.arraySet(f.window, b, c - d, d, 0),
                f.wnext = d,
                f.whave = f.wsize) : (f.wnext += e,
                f.wnext === f.wsize && (f.wnext = 0),
                f.whave < f.wsize && (f.whave += e))),
                0
            }
            function m(a, b) {
                var c, e, f, g, h, i, j, m, n, o, p, q, r, pa, qa, ra, sa, ta, ua, va, wa, xa, ya, za, Aa = 0, Ba = new s.Buf8(4), Ca = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                if (!a || !a.state || !a.output || !a.input && 0 !== a.avail_in)
                    return G;
                c = a.state,
                c.mode === W && (c.mode = X),
                h = a.next_out,
                f = a.output,
                j = a.avail_out,
                g = a.next_in,
                e = a.input,
                i = a.avail_in,
                m = c.hold,
                n = c.bits,
                o = i,
                p = j,
                xa = D;
                a: for (; ; )
                    switch (c.mode) {
                    case L:
                        if (0 === c.wrap) {
                            c.mode = X;
                            break
                        }
                        for (; n < 16; ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        if (2 & c.wrap && 35615 === m) {
                            c.check = 0,
                            Ba[0] = 255 & m,
                            Ba[1] = m >>> 8 & 255,
                            c.check = u(c.check, Ba, 2, 0),
                            m = 0,
                            n = 0,
                            c.mode = M;
                            break
                        }
                        if (c.flags = 0,
                        c.head && (c.head.done = !1),
                        !(1 & c.wrap) || (((255 & m) << 8) + (m >> 8)) % 31) {
                            a.msg = "incorrect header check",
                            c.mode = ma;
                            break
                        }
                        if ((15 & m) !== K) {
                            a.msg = "unknown compression method",
                            c.mode = ma;
                            break
                        }
                        if (m >>>= 4,
                        n -= 4,
                        wa = (15 & m) + 8,
                        0 === c.wbits)
                            c.wbits = wa;
                        else if (wa > c.wbits) {
                            a.msg = "invalid window size",
                            c.mode = ma;
                            break
                        }
                        c.dmax = 1 << wa,
                        a.adler = c.check = 1,
                        c.mode = 512 & m ? U : W,
                        m = 0,
                        n = 0;
                        break;
                    case M:
                        for (; n < 16; ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        if (c.flags = m,
                        (255 & c.flags) !== K) {
                            a.msg = "unknown compression method",
                            c.mode = ma;
                            break
                        }
                        if (57344 & c.flags) {
                            a.msg = "unknown header flags set",
                            c.mode = ma;
                            break
                        }
                        c.head && (c.head.text = m >> 8 & 1),
                        512 & c.flags && (Ba[0] = 255 & m,
                        Ba[1] = m >>> 8 & 255,
                        c.check = u(c.check, Ba, 2, 0)),
                        m = 0,
                        n = 0,
                        c.mode = N;
                    case N:
                        for (; n < 32; ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        c.head && (c.head.time = m),
                        512 & c.flags && (Ba[0] = 255 & m,
                        Ba[1] = m >>> 8 & 255,
                        Ba[2] = m >>> 16 & 255,
                        Ba[3] = m >>> 24 & 255,
                        c.check = u(c.check, Ba, 4, 0)),
                        m = 0,
                        n = 0,
                        c.mode = O;
                    case O:
                        for (; n < 16; ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        c.head && (c.head.xflags = 255 & m,
                        c.head.os = m >> 8),
                        512 & c.flags && (Ba[0] = 255 & m,
                        Ba[1] = m >>> 8 & 255,
                        c.check = u(c.check, Ba, 2, 0)),
                        m = 0,
                        n = 0,
                        c.mode = P;
                    case P:
                        if (1024 & c.flags) {
                            for (; n < 16; ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m += e[g++] << n,
                                n += 8
                            }
                            c.length = m,
                            c.head && (c.head.extra_len = m),
                            512 & c.flags && (Ba[0] = 255 & m,
                            Ba[1] = m >>> 8 & 255,
                            c.check = u(c.check, Ba, 2, 0)),
                            m = 0,
                            n = 0
                        } else
                            c.head && (c.head.extra = null);
                        c.mode = Q;
                    case Q:
                        if (1024 & c.flags && (q = c.length,
                        q > i && (q = i),
                        q && (c.head && (wa = c.head.extra_len - c.length,
                        c.head.extra || (c.head.extra = new Array(c.head.extra_len)),
                        s.arraySet(c.head.extra, e, g, q, wa)),
                        512 & c.flags && (c.check = u(c.check, e, q, g)),
                        i -= q,
                        g += q,
                        c.length -= q),
                        c.length))
                            break a;
                        c.length = 0,
                        c.mode = R;
                    case R:
                        if (2048 & c.flags) {
                            if (0 === i)
                                break a;
                            q = 0;
                            do
                                wa = e[g + q++],
                                c.head && wa && c.length < 65536 && (c.head.name += String.fromCharCode(wa));
                            while (wa && q < i);if (512 & c.flags && (c.check = u(c.check, e, q, g)),
                            i -= q,
                            g += q,
                            wa)
                                break a
                        } else
                            c.head && (c.head.name = null);
                        c.length = 0,
                        c.mode = S;
                    case S:
                        if (4096 & c.flags) {
                            if (0 === i)
                                break a;
                            q = 0;
                            do
                                wa = e[g + q++],
                                c.head && wa && c.length < 65536 && (c.head.comment += String.fromCharCode(wa));
                            while (wa && q < i);if (512 & c.flags && (c.check = u(c.check, e, q, g)),
                            i -= q,
                            g += q,
                            wa)
                                break a
                        } else
                            c.head && (c.head.comment = null);
                        c.mode = T;
                    case T:
                        if (512 & c.flags) {
                            for (; n < 16; ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m += e[g++] << n,
                                n += 8
                            }
                            if (m !== (65535 & c.check)) {
                                a.msg = "header crc mismatch",
                                c.mode = ma;
                                break
                            }
                            m = 0,
                            n = 0
                        }
                        c.head && (c.head.hcrc = c.flags >> 9 & 1,
                        c.head.done = !0),
                        a.adler = c.check = 0,
                        c.mode = W;
                        break;
                    case U:
                        for (; n < 32; ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        a.adler = c.check = d(m),
                        m = 0,
                        n = 0,
                        c.mode = V;
                    case V:
                        if (0 === c.havedict)
                            return a.next_out = h,
                            a.avail_out = j,
                            a.next_in = g,
                            a.avail_in = i,
                            c.hold = m,
                            c.bits = n,
                            F;
                        a.adler = c.check = 1,
                        c.mode = W;
                    case W:
                        if (b === B || b === C)
                            break a;
                    case X:
                        if (c.last) {
                            m >>>= 7 & n,
                            n -= 7 & n,
                            c.mode = ja;
                            break
                        }
                        for (; n < 3; ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        switch (c.last = 1 & m,
                        m >>>= 1,
                        n -= 1,
                        3 & m) {
                        case 0:
                            c.mode = Y;
                            break;
                        case 1:
                            if (k(c),
                            c.mode = ca,
                            b === C) {
                                m >>>= 2,
                                n -= 2;
                                break a
                            }
                            break;
                        case 2:
                            c.mode = _;
                            break;
                        case 3:
                            a.msg = "invalid block type",
                            c.mode = ma
                        }
                        m >>>= 2,
                        n -= 2;
                        break;
                    case Y:
                        for (m >>>= 7 & n,
                        n -= 7 & n; n < 32; ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        if ((65535 & m) !== (m >>> 16 ^ 65535)) {
                            a.msg = "invalid stored block lengths",
                            c.mode = ma;
                            break
                        }
                        if (c.length = 65535 & m,
                        m = 0,
                        n = 0,
                        c.mode = Z,
                        b === C)
                            break a;
                    case Z:
                        c.mode = $;
                    case $:
                        if (q = c.length) {
                            if (q > i && (q = i),
                            q > j && (q = j),
                            0 === q)
                                break a;
                            s.arraySet(f, e, g, q, h),
                            i -= q,
                            g += q,
                            j -= q,
                            h += q,
                            c.length -= q;
                            break
                        }
                        c.mode = W;
                        break;
                    case _:
                        for (; n < 14; ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        if (c.nlen = (31 & m) + 257,
                        m >>>= 5,
                        n -= 5,
                        c.ndist = (31 & m) + 1,
                        m >>>= 5,
                        n -= 5,
                        c.ncode = (15 & m) + 4,
                        m >>>= 4,
                        n -= 4,
                        c.nlen > 286 || c.ndist > 30) {
                            a.msg = "too many length or distance symbols",
                            c.mode = ma;
                            break
                        }
                        c.have = 0,
                        c.mode = aa;
                    case aa:
                        for (; c.have < c.ncode; ) {
                            for (; n < 3; ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m += e[g++] << n,
                                n += 8
                            }
                            c.lens[Ca[c.have++]] = 7 & m,
                            m >>>= 3,
                            n -= 3
                        }
                        for (; c.have < 19; )
                            c.lens[Ca[c.have++]] = 0;
                        if (c.lencode = c.lendyn,
                        c.lenbits = 7,
                        ya = {
                            bits: c.lenbits
                        },
                        xa = w(x, c.lens, 0, 19, c.lencode, 0, c.work, ya),
                        c.lenbits = ya.bits,
                        xa) {
                            a.msg = "invalid code lengths set",
                            c.mode = ma;
                            break
                        }
                        c.have = 0,
                        c.mode = ba;
                    case ba:
                        for (; c.have < c.nlen + c.ndist; ) {
                            for (; Aa = c.lencode[m & (1 << c.lenbits) - 1],
                            qa = Aa >>> 24,
                            ra = Aa >>> 16 & 255,
                            sa = 65535 & Aa,
                            !(qa <= n); ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m += e[g++] << n,
                                n += 8
                            }
                            if (sa < 16)
                                m >>>= qa,
                                n -= qa,
                                c.lens[c.have++] = sa;
                            else {
                                if (16 === sa) {
                                    for (za = qa + 2; n < za; ) {
                                        if (0 === i)
                                            break a;
                                        i--,
                                        m += e[g++] << n,
                                        n += 8
                                    }
                                    if (m >>>= qa,
                                    n -= qa,
                                    0 === c.have) {
                                        a.msg = "invalid bit length repeat",
                                        c.mode = ma;
                                        break
                                    }
                                    wa = c.lens[c.have - 1],
                                    q = 3 + (3 & m),
                                    m >>>= 2,
                                    n -= 2
                                } else if (17 === sa) {
                                    for (za = qa + 3; n < za; ) {
                                        if (0 === i)
                                            break a;
                                        i--,
                                        m += e[g++] << n,
                                        n += 8
                                    }
                                    m >>>= qa,
                                    n -= qa,
                                    wa = 0,
                                    q = 3 + (7 & m),
                                    m >>>= 3,
                                    n -= 3
                                } else {
                                    for (za = qa + 7; n < za; ) {
                                        if (0 === i)
                                            break a;
                                        i--,
                                        m += e[g++] << n,
                                        n += 8
                                    }
                                    m >>>= qa,
                                    n -= qa,
                                    wa = 0,
                                    q = 11 + (127 & m),
                                    m >>>= 7,
                                    n -= 7
                                }
                                if (c.have + q > c.nlen + c.ndist) {
                                    a.msg = "invalid bit length repeat",
                                    c.mode = ma;
                                    break
                                }
                                for (; q--; )
                                    c.lens[c.have++] = wa
                            }
                        }
                        if (c.mode === ma)
                            break;
                        if (0 === c.lens[256]) {
                            a.msg = "invalid code -- missing end-of-block",
                            c.mode = ma;
                            break
                        }
                        if (c.lenbits = 9,
                        ya = {
                            bits: c.lenbits
                        },
                        xa = w(y, c.lens, 0, c.nlen, c.lencode, 0, c.work, ya),
                        c.lenbits = ya.bits,
                        xa) {
                            a.msg = "invalid literal/lengths set",
                            c.mode = ma;
                            break
                        }
                        if (c.distbits = 6,
                        c.distcode = c.distdyn,
                        ya = {
                            bits: c.distbits
                        },
                        xa = w(z, c.lens, c.nlen, c.ndist, c.distcode, 0, c.work, ya),
                        c.distbits = ya.bits,
                        xa) {
                            a.msg = "invalid distances set",
                            c.mode = ma;
                            break
                        }
                        if (c.mode = ca,
                        b === C)
                            break a;
                    case ca:
                        c.mode = da;
                    case da:
                        if (i >= 6 && j >= 258) {
                            a.next_out = h,
                            a.avail_out = j,
                            a.next_in = g,
                            a.avail_in = i,
                            c.hold = m,
                            c.bits = n,
                            v(a, p),
                            h = a.next_out,
                            f = a.output,
                            j = a.avail_out,
                            g = a.next_in,
                            e = a.input,
                            i = a.avail_in,
                            m = c.hold,
                            n = c.bits,
                            c.mode === W && (c.back = -1);
                            break
                        }
                        for (c.back = 0; Aa = c.lencode[m & (1 << c.lenbits) - 1],
                        qa = Aa >>> 24,
                        ra = Aa >>> 16 & 255,
                        sa = 65535 & Aa,
                        !(qa <= n); ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        if (ra && 0 === (240 & ra)) {
                            for (ta = qa,
                            ua = ra,
                            va = sa; Aa = c.lencode[va + ((m & (1 << ta + ua) - 1) >> ta)],
                            qa = Aa >>> 24,
                            ra = Aa >>> 16 & 255,
                            sa = 65535 & Aa,
                            !(ta + qa <= n); ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m += e[g++] << n,
                                n += 8
                            }
                            m >>>= ta,
                            n -= ta,
                            c.back += ta
                        }
                        if (m >>>= qa,
                        n -= qa,
                        c.back += qa,
                        c.length = sa,
                        0 === ra) {
                            c.mode = ia;
                            break
                        }
                        if (32 & ra) {
                            c.back = -1,
                            c.mode = W;
                            break
                        }
                        if (64 & ra) {
                            a.msg = "invalid literal/length code",
                            c.mode = ma;
                            break
                        }
                        c.extra = 15 & ra,
                        c.mode = ea;
                    case ea:
                        if (c.extra) {
                            for (za = c.extra; n < za; ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m += e[g++] << n,
                                n += 8
                            }
                            c.length += m & (1 << c.extra) - 1,
                            m >>>= c.extra,
                            n -= c.extra,
                            c.back += c.extra
                        }
                        c.was = c.length,
                        c.mode = fa;
                    case fa:
                        for (; Aa = c.distcode[m & (1 << c.distbits) - 1],
                        qa = Aa >>> 24,
                        ra = Aa >>> 16 & 255,
                        sa = 65535 & Aa,
                        !(qa <= n); ) {
                            if (0 === i)
                                break a;
                            i--,
                            m += e[g++] << n,
                            n += 8
                        }
                        if (0 === (240 & ra)) {
                            for (ta = qa,
                            ua = ra,
                            va = sa; Aa = c.distcode[va + ((m & (1 << ta + ua) - 1) >> ta)],
                            qa = Aa >>> 24,
                            ra = Aa >>> 16 & 255,
                            sa = 65535 & Aa,
                            !(ta + qa <= n); ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m += e[g++] << n,
                                n += 8
                            }
                            m >>>= ta,
                            n -= ta,
                            c.back += ta
                        }
                        if (m >>>= qa,
                        n -= qa,
                        c.back += qa,
                        64 & ra) {
                            a.msg = "invalid distance code",
                            c.mode = ma;
                            break
                        }
                        c.offset = sa,
                        c.extra = 15 & ra,
                        c.mode = ga;
                    case ga:
                        if (c.extra) {
                            for (za = c.extra; n < za; ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m += e[g++] << n,
                                n += 8
                            }
                            c.offset += m & (1 << c.extra) - 1,
                            m >>>= c.extra,
                            n -= c.extra,
                            c.back += c.extra
                        }
                        if (c.offset > c.dmax) {
                            a.msg = "invalid distance too far back",
                            c.mode = ma;
                            break
                        }
                        c.mode = ha;
                    case ha:
                        if (0 === j)
                            break a;
                        if (q = p - j,
                        c.offset > q) {
                            if (q = c.offset - q,
                            q > c.whave && c.sane) {
                                a.msg = "invalid distance too far back",
                                c.mode = ma;
                                break
                            }
                            q > c.wnext ? (q -= c.wnext,
                            r = c.wsize - q) : r = c.wnext - q,
                            q > c.length && (q = c.length),
                            pa = c.window
                        } else
                            pa = f,
                            r = h - c.offset,
                            q = c.length;
                        q > j && (q = j),
                        j -= q,
                        c.length -= q;
                        do
                            f[h++] = pa[r++];
                        while (--q);0 === c.length && (c.mode = da);
                        break;
                    case ia:
                        if (0 === j)
                            break a;
                        f[h++] = c.length,
                        j--,
                        c.mode = da;
                        break;
                    case ja:
                        if (c.wrap) {
                            for (; n < 32; ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m |= e[g++] << n,
                                n += 8
                            }
                            if (p -= j,
                            a.total_out += p,
                            c.total += p,
                            p && (a.adler = c.check = c.flags ? u(c.check, f, p, h - p) : t(c.check, f, p, h - p)),
                            p = j,
                            (c.flags ? m : d(m)) !== c.check) {
                                a.msg = "incorrect data check",
                                c.mode = ma;
                                break
                            }
                            m = 0,
                            n = 0
                        }
                        c.mode = ka;
                    case ka:
                        if (c.wrap && c.flags) {
                            for (; n < 32; ) {
                                if (0 === i)
                                    break a;
                                i--,
                                m += e[g++] << n,
                                n += 8
                            }
                            if (m !== (4294967295 & c.total)) {
                                a.msg = "incorrect length check",
                                c.mode = ma;
                                break
                            }
                            m = 0,
                            n = 0
                        }
                        c.mode = la;
                    case la:
                        xa = E;
                        break a;
                    case ma:
                        xa = H;
                        break a;
                    case na:
                        return I;
                    case oa:
                    default:
                        return G
                    }
                return a.next_out = h,
                a.avail_out = j,
                a.next_in = g,
                a.avail_in = i,
                c.hold = m,
                c.bits = n,
                (c.wsize || p !== a.avail_out && c.mode < ma && (c.mode < ja || b !== A)) && l(a, a.output, a.next_out, p - a.avail_out) ? (c.mode = na,
                I) : (o -= a.avail_in,
                p -= a.avail_out,
                a.total_in += o,
                a.total_out += p,
                c.total += p,
                c.wrap && p && (a.adler = c.check = c.flags ? u(c.check, f, p, a.next_out - p) : t(c.check, f, p, a.next_out - p)),
                a.data_type = c.bits + (c.last ? 64 : 0) + (c.mode === W ? 128 : 0) + (c.mode === ca || c.mode === Z ? 256 : 0),
                (0 === o && 0 === p || b === A) && xa === D && (xa = J),
                xa)
            }
            function n(a) {
                if (!a || !a.state)
                    return G;
                var b = a.state;
                return b.window && (b.window = null),
                a.state = null,
                D
            }
            function o(a, b) {
                var c;
                return a && a.state ? (c = a.state,
                0 === (2 & c.wrap) ? G : (c.head = b,
                b.done = !1,
                D)) : G
            }
            function p(a, b) {
                var c, d, e, f = b.length;
                return a && a.state ? (c = a.state,
                0 !== c.wrap && c.mode !== V ? G : c.mode === V && (d = 1,
                d = t(d, b, f, 0),
                d !== c.check) ? H : (e = l(a, b, f, f)) ? (c.mode = na,
                I) : (c.havedict = 1,
                D)) : G
            }
            var q, r, s = a("../utils/common"), t = a("./adler32"), u = a("./crc32"), v = a("./inffast"), w = a("./inftrees"), x = 0, y = 1, z = 2, A = 4, B = 5, C = 6, D = 0, E = 1, F = 2, G = -2, H = -3, I = -4, J = -5, K = 8, L = 1, M = 2, N = 3, O = 4, P = 5, Q = 6, R = 7, S = 8, T = 9, U = 10, V = 11, W = 12, X = 13, Y = 14, Z = 15, $ = 16, _ = 17, aa = 18, ba = 19, ca = 20, da = 21, ea = 22, fa = 23, ga = 24, ha = 25, ia = 26, ja = 27, ka = 28, la = 29, ma = 30, na = 31, oa = 32, pa = 852, qa = 592, ra = 15, sa = ra, ta = !0;
            c.inflateReset = g,
            c.inflateReset2 = h,
            c.inflateResetKeep = f,
            c.inflateInit = j,
            c.inflateInit2 = i,
            c.inflate = m,
            c.inflateEnd = n,
            c.inflateGetHeader = o,
            c.inflateSetDictionary = p,
            c.inflateInfo = "pako inflate (from Nodeca project)"
        }
        , {
            "../utils/common": 62,
            "./adler32": 64,
            "./crc32": 66,
            "./inffast": 69,
            "./inftrees": 71
        }],
        71: [function(a, b, c) {
            "use strict";
            var d = a("../utils/common")
              , e = 15
              , f = 852
              , g = 592
              , h = 0
              , i = 1
              , j = 2
              , k = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]
              , l = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78]
              , m = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]
              , n = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
            b.exports = function(a, b, c, o, p, q, r, s) {
                var t, u, v, w, x, y, z, A, B, C = s.bits, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = null, O = 0, P = new d.Buf16(e + 1), Q = new d.Buf16(e + 1), R = null, S = 0;
                for (D = 0; D <= e; D++)
                    P[D] = 0;
                for (E = 0; E < o; E++)
                    P[b[c + E]]++;
                for (H = C,
                G = e; G >= 1 && 0 === P[G]; G--)
                    ;
                if (H > G && (H = G),
                0 === G)
                    return p[q++] = 20971520,
                    p[q++] = 20971520,
                    s.bits = 1,
                    0;
                for (F = 1; F < G && 0 === P[F]; F++)
                    ;
                for (H < F && (H = F),
                K = 1,
                D = 1; D <= e; D++)
                    if (K <<= 1,
                    K -= P[D],
                    K < 0)
                        return -1;
                if (K > 0 && (a === h || 1 !== G))
                    return -1;
                for (Q[1] = 0,
                D = 1; D < e; D++)
                    Q[D + 1] = Q[D] + P[D];
                for (E = 0; E < o; E++)
                    0 !== b[c + E] && (r[Q[b[c + E]]++] = E);
                if (a === h ? (N = R = r,
                y = 19) : a === i ? (N = k,
                O -= 257,
                R = l,
                S -= 257,
                y = 256) : (N = m,
                R = n,
                y = -1),
                M = 0,
                E = 0,
                D = F,
                x = q,
                I = H,
                J = 0,
                v = -1,
                L = 1 << H,
                w = L - 1,
                a === i && L > f || a === j && L > g)
                    return 1;
                for (var T = 0; ; ) {
                    T++,
                    z = D - J,
                    r[E] < y ? (A = 0,
                    B = r[E]) : r[E] > y ? (A = R[S + r[E]],
                    B = N[O + r[E]]) : (A = 96,
                    B = 0),
                    t = 1 << D - J,
                    u = 1 << I,
                    F = u;
                    do
                        u -= t,
                        p[x + (M >> J) + u] = z << 24 | A << 16 | B | 0;
                    while (0 !== u);for (t = 1 << D - 1; M & t; )
                        t >>= 1;
                    if (0 !== t ? (M &= t - 1,
                    M += t) : M = 0,
                    E++,
                    0 === --P[D]) {
                        if (D === G)
                            break;
                        D = b[c + r[E]]
                    }
                    if (D > H && (M & w) !== v) {
                        for (0 === J && (J = H),
                        x += F,
                        I = D - J,
                        K = 1 << I; I + J < G && (K -= P[I + J],
                        !(K <= 0)); )
                            I++,
                            K <<= 1;
                        if (L += 1 << I,
                        a === i && L > f || a === j && L > g)
                            return 1;
                        v = M & w,
                        p[v] = H << 24 | I << 16 | x - q | 0
                    }
                }
                return 0 !== M && (p[x + M] = D - J << 24 | 64 << 16 | 0),
                s.bits = H,
                0
            }
        }
        , {
            "../utils/common": 62
        }],
        72: [function(a, b, c) {
            "use strict";
            b.exports = {
                2: "need dictionary",
                1: "stream end",
                0: "",
                "-1": "file error",
                "-2": "stream error",
                "-3": "data error",
                "-4": "insufficient memory",
                "-5": "buffer error",
                "-6": "incompatible version"
            }
        }
        , {}],
        73: [function(a, b, c) {
            "use strict";
            function d(a) {
                for (var b = a.length; --b >= 0; )
                    a[b] = 0
            }
            function e(a, b, c, d, e) {
                this.static_tree = a,
                this.extra_bits = b,
                this.extra_base = c,
                this.elems = d,
                this.max_length = e,
                this.has_stree = a && a.length
            }
            function f(a, b) {
                this.dyn_tree = a,
                this.max_code = 0,
                this.stat_desc = b
            }
            function g(a) {
                return a < 256 ? ia[a] : ia[256 + (a >>> 7)]
            }
            function h(a, b) {
                a.pending_buf[a.pending++] = 255 & b,
                a.pending_buf[a.pending++] = b >>> 8 & 255
            }
            function i(a, b, c) {
                a.bi_valid > X - c ? (a.bi_buf |= b << a.bi_valid & 65535,
                h(a, a.bi_buf),
                a.bi_buf = b >> X - a.bi_valid,
                a.bi_valid += c - X) : (a.bi_buf |= b << a.bi_valid & 65535,
                a.bi_valid += c)
            }
            function j(a, b, c) {
                i(a, c[2 * b], c[2 * b + 1])
            }
            function k(a, b) {
                var c = 0;
                do
                    c |= 1 & a,
                    a >>>= 1,
                    c <<= 1;
                while (--b > 0);return c >>> 1
            }
            function l(a) {
                16 === a.bi_valid ? (h(a, a.bi_buf),
                a.bi_buf = 0,
                a.bi_valid = 0) : a.bi_valid >= 8 && (a.pending_buf[a.pending++] = 255 & a.bi_buf,
                a.bi_buf >>= 8,
                a.bi_valid -= 8)
            }
            function m(a, b) {
                var c, d, e, f, g, h, i = b.dyn_tree, j = b.max_code, k = b.stat_desc.static_tree, l = b.stat_desc.has_stree, m = b.stat_desc.extra_bits, n = b.stat_desc.extra_base, o = b.stat_desc.max_length, p = 0;
                for (f = 0; f <= W; f++)
                    a.bl_count[f] = 0;
                for (i[2 * a.heap[a.heap_max] + 1] = 0,
                c = a.heap_max + 1; c < V; c++)
                    d = a.heap[c],
                    f = i[2 * i[2 * d + 1] + 1] + 1,
                    f > o && (f = o,
                    p++),
                    i[2 * d + 1] = f,
                    d > j || (a.bl_count[f]++,
                    g = 0,
                    d >= n && (g = m[d - n]),
                    h = i[2 * d],
                    a.opt_len += h * (f + g),
                    l && (a.static_len += h * (k[2 * d + 1] + g)));
                if (0 !== p) {
                    do {
                        for (f = o - 1; 0 === a.bl_count[f]; )
                            f--;
                        a.bl_count[f]--,
                        a.bl_count[f + 1] += 2,
                        a.bl_count[o]--,
                        p -= 2
                    } while (p > 0);for (f = o; 0 !== f; f--)
                        for (d = a.bl_count[f]; 0 !== d; )
                            e = a.heap[--c],
                            e > j || (i[2 * e + 1] !== f && (a.opt_len += (f - i[2 * e + 1]) * i[2 * e],
                            i[2 * e + 1] = f),
                            d--)
                }
            }
            function n(a, b, c) {
                var d, e, f = new Array(W + 1), g = 0;
                for (d = 1; d <= W; d++)
                    f[d] = g = g + c[d - 1] << 1;
                for (e = 0; e <= b; e++) {
                    var h = a[2 * e + 1];
                    0 !== h && (a[2 * e] = k(f[h]++, h))
                }
            }
            function o() {
                var a, b, c, d, f, g = new Array(W + 1);
                for (c = 0,
                d = 0; d < Q - 1; d++)
                    for (ka[d] = c,
                    a = 0; a < 1 << ba[d]; a++)
                        ja[c++] = d;
                for (ja[c - 1] = d,
                f = 0,
                d = 0; d < 16; d++)
                    for (la[d] = f,
                    a = 0; a < 1 << ca[d]; a++)
                        ia[f++] = d;
                for (f >>= 7; d < T; d++)
                    for (la[d] = f << 7,
                    a = 0; a < 1 << ca[d] - 7; a++)
                        ia[256 + f++] = d;
                for (b = 0; b <= W; b++)
                    g[b] = 0;
                for (a = 0; a <= 143; )
                    ga[2 * a + 1] = 8,
                    a++,
                    g[8]++;
                for (; a <= 255; )
                    ga[2 * a + 1] = 9,
                    a++,
                    g[9]++;
                for (; a <= 279; )
                    ga[2 * a + 1] = 7,
                    a++,
                    g[7]++;
                for (; a <= 287; )
                    ga[2 * a + 1] = 8,
                    a++,
                    g[8]++;
                for (n(ga, S + 1, g),
                a = 0; a < T; a++)
                    ha[2 * a + 1] = 5,
                    ha[2 * a] = k(a, 5);
                ma = new e(ga,ba,R + 1,S,W),
                na = new e(ha,ca,0,T,W),
                oa = new e(new Array(0),da,0,U,Y)
            }
            function p(a) {
                var b;
                for (b = 0; b < S; b++)
                    a.dyn_ltree[2 * b] = 0;
                for (b = 0; b < T; b++)
                    a.dyn_dtree[2 * b] = 0;
                for (b = 0; b < U; b++)
                    a.bl_tree[2 * b] = 0;
                a.dyn_ltree[2 * Z] = 1,
                a.opt_len = a.static_len = 0,
                a.last_lit = a.matches = 0
            }
            function q(a) {
                a.bi_valid > 8 ? h(a, a.bi_buf) : a.bi_valid > 0 && (a.pending_buf[a.pending++] = a.bi_buf),
                a.bi_buf = 0,
                a.bi_valid = 0
            }
            function r(a, b, c, d) {
                q(a),
                d && (h(a, c),
                h(a, ~c)),
                G.arraySet(a.pending_buf, a.window, b, c, a.pending),
                a.pending += c
            }
            function s(a, b, c, d) {
                var e = 2 * b
                  , f = 2 * c;
                return a[e] < a[f] || a[e] === a[f] && d[b] <= d[c]
            }
            function t(a, b, c) {
                for (var d = a.heap[c], e = c << 1; e <= a.heap_len && (e < a.heap_len && s(b, a.heap[e + 1], a.heap[e], a.depth) && e++,
                !s(b, d, a.heap[e], a.depth)); )
                    a.heap[c] = a.heap[e],
                    c = e,
                    e <<= 1;
                a.heap[c] = d
            }
            function u(a, b, c) {
                var d, e, f, h, k = 0;
                if (0 !== a.last_lit)
                    do
                        d = a.pending_buf[a.d_buf + 2 * k] << 8 | a.pending_buf[a.d_buf + 2 * k + 1],
                        e = a.pending_buf[a.l_buf + k],
                        k++,
                        0 === d ? j(a, e, b) : (f = ja[e],
                        j(a, f + R + 1, b),
                        h = ba[f],
                        0 !== h && (e -= ka[f],
                        i(a, e, h)),
                        d--,
                        f = g(d),
                        j(a, f, c),
                        h = ca[f],
                        0 !== h && (d -= la[f],
                        i(a, d, h)));
                    while (k < a.last_lit);j(a, Z, b)
            }
            function v(a, b) {
                var c, d, e, f = b.dyn_tree, g = b.stat_desc.static_tree, h = b.stat_desc.has_stree, i = b.stat_desc.elems, j = -1;
                for (a.heap_len = 0,
                a.heap_max = V,
                c = 0; c < i; c++)
                    0 !== f[2 * c] ? (a.heap[++a.heap_len] = j = c,
                    a.depth[c] = 0) : f[2 * c + 1] = 0;
                for (; a.heap_len < 2; )
                    e = a.heap[++a.heap_len] = j < 2 ? ++j : 0,
                    f[2 * e] = 1,
                    a.depth[e] = 0,
                    a.opt_len--,
                    h && (a.static_len -= g[2 * e + 1]);
                for (b.max_code = j,
                c = a.heap_len >> 1; c >= 1; c--)
                    t(a, f, c);
                e = i;
                do
                    c = a.heap[1],
                    a.heap[1] = a.heap[a.heap_len--],
                    t(a, f, 1),
                    d = a.heap[1],
                    a.heap[--a.heap_max] = c,
                    a.heap[--a.heap_max] = d,
                    f[2 * e] = f[2 * c] + f[2 * d],
                    a.depth[e] = (a.depth[c] >= a.depth[d] ? a.depth[c] : a.depth[d]) + 1,
                    f[2 * c + 1] = f[2 * d + 1] = e,
                    a.heap[1] = e++,
                    t(a, f, 1);
                while (a.heap_len >= 2);a.heap[--a.heap_max] = a.heap[1],
                m(a, b),
                n(f, j, a.bl_count)
            }
            function w(a, b, c) {
                var d, e, f = -1, g = b[1], h = 0, i = 7, j = 4;
                for (0 === g && (i = 138,
                j = 3),
                b[2 * (c + 1) + 1] = 65535,
                d = 0; d <= c; d++)
                    e = g,
                    g = b[2 * (d + 1) + 1],
                    ++h < i && e === g || (h < j ? a.bl_tree[2 * e] += h : 0 !== e ? (e !== f && a.bl_tree[2 * e]++,
                    a.bl_tree[2 * $]++) : h <= 10 ? a.bl_tree[2 * _]++ : a.bl_tree[2 * aa]++,
                    h = 0,
                    f = e,
                    0 === g ? (i = 138,
                    j = 3) : e === g ? (i = 6,
                    j = 3) : (i = 7,
                    j = 4))
            }
            function x(a, b, c) {
                var d, e, f = -1, g = b[1], h = 0, k = 7, l = 4;
                for (0 === g && (k = 138,
                l = 3),
                d = 0; d <= c; d++)
                    if (e = g,
                    g = b[2 * (d + 1) + 1],
                    !(++h < k && e === g)) {
                        if (h < l) {
                            do
                                j(a, e, a.bl_tree);
                            while (0 !== --h)
                        } else
                            0 !== e ? (e !== f && (j(a, e, a.bl_tree),
                            h--),
                            j(a, $, a.bl_tree),
                            i(a, h - 3, 2)) : h <= 10 ? (j(a, _, a.bl_tree),
                            i(a, h - 3, 3)) : (j(a, aa, a.bl_tree),
                            i(a, h - 11, 7));
                        h = 0,
                        f = e,
                        0 === g ? (k = 138,
                        l = 3) : e === g ? (k = 6,
                        l = 3) : (k = 7,
                        l = 4)
                    }
            }
            function y(a) {
                var b;
                for (w(a, a.dyn_ltree, a.l_desc.max_code),
                w(a, a.dyn_dtree, a.d_desc.max_code),
                v(a, a.bl_desc),
                b = U - 1; b >= 3 && 0 === a.bl_tree[2 * ea[b] + 1]; b--)
                    ;
                return a.opt_len += 3 * (b + 1) + 5 + 5 + 4,
                b
            }
            function z(a, b, c, d) {
                var e;
                for (i(a, b - 257, 5),
                i(a, c - 1, 5),
                i(a, d - 4, 4),
                e = 0; e < d; e++)
                    i(a, a.bl_tree[2 * ea[e] + 1], 3);
                x(a, a.dyn_ltree, b - 1),
                x(a, a.dyn_dtree, c - 1)
            }
            function A(a) {
                var b, c = 4093624447;
                for (b = 0; b <= 31; b++,
                c >>>= 1)
                    if (1 & c && 0 !== a.dyn_ltree[2 * b])
                        return I;
                if (0 !== a.dyn_ltree[18] || 0 !== a.dyn_ltree[20] || 0 !== a.dyn_ltree[26])
                    return J;
                for (b = 32; b < R; b++)
                    if (0 !== a.dyn_ltree[2 * b])
                        return J;
                return I
            }
            function B(a) {
                pa || (o(),
                pa = !0),
                a.l_desc = new f(a.dyn_ltree,ma),
                a.d_desc = new f(a.dyn_dtree,na),
                a.bl_desc = new f(a.bl_tree,oa),
                a.bi_buf = 0,
                a.bi_valid = 0,
                p(a)
            }
            function C(a, b, c, d) {
                i(a, (L << 1) + (d ? 1 : 0), 3),
                r(a, b, c, !0)
            }
            function D(a) {
                i(a, M << 1, 3),
                j(a, Z, ga),
                l(a)
            }
            function E(a, b, c, d) {
                var e, f, g = 0;
                a.level > 0 ? (a.strm.data_type === K && (a.strm.data_type = A(a)),
                v(a, a.l_desc),
                v(a, a.d_desc),
                g = y(a),
                e = a.opt_len + 3 + 7 >>> 3,
                f = a.static_len + 3 + 7 >>> 3,
                f <= e && (e = f)) : e = f = c + 5,
                c + 4 <= e && b !== -1 ? C(a, b, c, d) : a.strategy === H || f === e ? (i(a, (M << 1) + (d ? 1 : 0), 3),
                u(a, ga, ha)) : (i(a, (N << 1) + (d ? 1 : 0), 3),
                z(a, a.l_desc.max_code + 1, a.d_desc.max_code + 1, g + 1),
                u(a, a.dyn_ltree, a.dyn_dtree)),
                p(a),
                d && q(a)
            }
            function F(a, b, c) {
                return a.pending_buf[a.d_buf + 2 * a.last_lit] = b >>> 8 & 255,
                a.pending_buf[a.d_buf + 2 * a.last_lit + 1] = 255 & b,
                a.pending_buf[a.l_buf + a.last_lit] = 255 & c,
                a.last_lit++,
                0 === b ? a.dyn_ltree[2 * c]++ : (a.matches++,
                b--,
                a.dyn_ltree[2 * (ja[c] + R + 1)]++,
                a.dyn_dtree[2 * g(b)]++),
                a.last_lit === a.lit_bufsize - 1
            }
            var G = a("../utils/common")
              , H = 4
              , I = 0
              , J = 1
              , K = 2
              , L = 0
              , M = 1
              , N = 2
              , O = 3
              , P = 258
              , Q = 29
              , R = 256
              , S = R + 1 + Q
              , T = 30
              , U = 19
              , V = 2 * S + 1
              , W = 15
              , X = 16
              , Y = 7
              , Z = 256
              , $ = 16
              , _ = 17
              , aa = 18
              , ba = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
              , ca = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
              , da = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
              , ea = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
              , fa = 512
              , ga = new Array(2 * (S + 2));
            d(ga);
            var ha = new Array(2 * T);
            d(ha);
            var ia = new Array(fa);
            d(ia);
            var ja = new Array(P - O + 1);
            d(ja);
            var ka = new Array(Q);
            d(ka);
            var la = new Array(T);
            d(la);
            var ma, na, oa, pa = !1;
            c._tr_init = B,
            c._tr_stored_block = C,
            c._tr_flush_block = E,
            c._tr_tally = F,
            c._tr_align = D
        }
        , {
            "../utils/common": 62
        }],
        74: [function(a, b, c) {
            "use strict";
            function d() {
                this.input = null,
                this.next_in = 0,
                this.avail_in = 0,
                this.total_in = 0,
                this.output = null,
                this.next_out = 0,
                this.avail_out = 0,
                this.total_out = 0,
                this.msg = "",
                this.state = null,
                this.data_type = 2,
                this.adler = 0
            }
            b.exports = d
        }
        , {}]
    }, {}, [10])(10)
});
